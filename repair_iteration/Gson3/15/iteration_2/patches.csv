bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.superClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
2	[BUG]  [BUGGY]  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  incompatible  types  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Class  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  incompatible  types	81	None	replace
3	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getInstance();  [CE]  cannot  find  symbol  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getInstance();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getInstance();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
4	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [CE]  cannot  find  symbol  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
5	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
6	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
7	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
8	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
9	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  null);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  null);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	56	None	replace
10	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  renderer  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  renderer	56	None	replace
11	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
12	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
13	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
14	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	79	None	replace
15	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  RawType.newDefaultConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  RawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  RawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	79	None	replace
16	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
17	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  ObjectConstructor<T>  conforms  to  Constructor<?  super  T>  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  ObjectConstructor<T>  conforms  to  Constructor<?  super  T>	80	None	replace
18	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  ObjectConstructor<T>  conforms  to  Constructor<?  super  T>  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  ObjectConstructor<T>  conforms  to  Constructor<?  super  T>	80	None	replace
19	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	80	None	replace
20	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  rawType);	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	80	None	replace
21	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
22	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	84	None	replace
23	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getConstructor()  :  null;  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	84	None	replace
24	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  context  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol  context	84	None	replace
25	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
26	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  RawType  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol  RawType	84	None	replace
27	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
28	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
29	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType.getRawClass();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
30	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType.getRawClass();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
31	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
32	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawClass()  :  defaultConstructor;  [CE]  cannot  find  symbol  renderer  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawClass()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawClass()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  renderer	87	None	replace
33	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
34	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
35	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
36	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
37	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  context  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  context	61	None	replace
38	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  this.rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  this.rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  this.rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	61	None	replace
39	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  type  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	61	None	replace
40	[BUG]  [BUGGY]  ObjectConstructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  incompatible  types  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  ObjectConstructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	ObjectConstructor  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	9	None	replace
41	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [CE]  cannot  find  symbol  RawType  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	9	None	replace
42	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	5	None	replace
43	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	5	None	replace
44	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();  [CE]  cannot  find  symbol  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
45	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	5	None	replace
46	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	5	None	replace
47	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();  [CE]  cannot  find  symbol  renderer  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	5	None	replace
48	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    RawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	12	None	replace
49	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
50	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType;  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  RawType	92	None	replace
51	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type;  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
52	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType;  [CE]  cannot  find  symbol  context  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  context	92	None	replace
53	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType;  [CE]  cannot  find  symbol  type  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  type	92	None	replace
54	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
55	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.newDefaultConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
56	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getDeclaredConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getDeclaredConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getDeclaredConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	23	None	replace
57	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.newConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
58	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getRawConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
59	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor(this.instanceCreators);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getConstructor(this.instanceCreators);	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	23	None	replace
60	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor(true);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor(true);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getConstructor(true);	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	23	None	replace
61	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	22	None	replace
62	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)this.instanceCreators.get(rawType);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	22	None	replace
63	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	22	None	replace
64	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType.getName());  [CE]  inconvertible  types  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType.getName());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType.getName());	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	22	None	replace
65	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  null);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  null);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	22	None	replace
66	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  false);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	22	None	replace
67	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
68	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
69	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
70	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  context  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  context	69	None	replace
71	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	69	None	replace
72	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	69	None	replace
73	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructorType();  [CE]  cannot  find  symbol  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructorType();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructorType();	  Constructor    <?    super    T>    constructor    =    rawType.getComponentType();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
74	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
75	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type;  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
76	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  RawType  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  RawType	83	None	replace
77	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  context  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  context	83	None	replace
78	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType;  [CE]  incompatible  types  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  incompatible  types	83	None	replace
79	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  type  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol  type	83	None	replace
80	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	72	None	replace
81	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)this.instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)this.instanceCreators.get(rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	72	None	replace
82	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  context);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	72	None	replace
83	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  null);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  null);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	72	None	replace
84	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType.getName());  [CE]  inconvertible  types  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType.getName());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType.getName());	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	72	None	replace
85	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  false);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	72	None	replace
86	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	48	None	replace
87	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	48	None	replace
88	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	48	None	replace
89	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtils  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtils	48	None	replace
90	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor();  [CE]  cannot  find  symbol  RawTypeUtils  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtils	48	None	replace
91	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	51	None	replace
92	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getConstructor();  [CE]  incompatible  types  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	51	None	replace
93	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	51	None	replace
94	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();  [CE]  incompatible  types  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	51	None	replace
95	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
96	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isAssignableFrom(rawType.getRawConstructor());  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isAssignableFrom(rawType.getRawConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor().isAssignableFrom(rawType.getRawConstructor());	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
97	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null  ||  rawType.getRawConstructor().isInterface()?  null  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
98	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance(this.instanceCreators);  [CE]  method  newInstance  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newInstance(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.newInstance();    	non-compiled	[CE]  method  newInstance  in  class  Class<T>  cannot  be  applied  to  given  types;	30	None	replace
99	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.build();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.build();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.build();	  Constructor    <?    super    T>    constructor    =    rawType.newInstance();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
100	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.construct(rawType);  [CE]  cannot  find  symbol  rawType  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.rawType.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  rawType	75	None	replace
101	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.construct(rawType);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
102	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
103	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this,  context);  [CE]  cannot  find  symbol  context  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(this,  context);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  context	75	None	replace
104	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.construct(this);  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  type	75	None	replace
105	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(this,  newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	75	None	replace
106	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
107	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
108	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
109	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
110	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withRawSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withRawSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withRawSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
111	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
112	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType):  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
113	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor(constructor);  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor(constructor);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor(constructor);	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	41	None	replace
114	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(),  rawType);  [CE]  unexpected  type  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(),  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(),  rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
115	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(null));  [CE]  unexpected  type  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(null));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(null));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
116	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(this.instanceCreators));  [CE]  unexpected  type  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(this.instanceCreators));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(this.instanceCreators));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
117	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(false));  [CE]  unexpected  type  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(false));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(false));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
118	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(1));  [CE]  unexpected  type  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(1));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(1));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
119	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);  [CE]  illegal  start  of  type  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
120	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
121	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);  [CE]  illegal  start  of  type  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
122	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  illegal  start  of  type  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
123	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);  [CE]  illegal  start  of  type  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
124	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);  [CE]  illegal  start  of  type  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
125	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);  [CE]  illegal  start  of  type  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  rawType);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
126	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)this.instanceCreators.get(rawType);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
127	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);  [CE]  illegal  start  of  type  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType  +  1);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
128	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);  [CE]  illegal  start  of  type  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  false);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
129	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);  [CE]  illegal  start  of  type  [FE]                                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  null);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
130	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)super.instanceCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)super.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)super.instanceCreators.get(rawType);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
131	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
132	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
133	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  instances  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	78	None	replace
134	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
135	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType);  [CE]  cannot  find  symbol  instances  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instances.construct(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	78	None	replace
136	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredType();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredType();	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
137	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getDeclaredType();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getDeclaredType();	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
138	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getDeclaredType();  [CE]  cannot  find  symbol  type  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getDeclaredType();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.getDeclaredType();	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  type	74	None	replace
139	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.buildConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.superClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
140	[BUG]  [BUGGY]  final  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  incompatible  types  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Class  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Class    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	13	None	replace
141	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(null,  null);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(null,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(null,  null);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
142	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(false);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(false);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
143	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  null.construct(rawType);  [CE]  <null>  cannot  be  dereferenced  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  null.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  null.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	68	None	replace
144	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	68	None	replace
145	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  Constructor[instanceCreators.size()  ]);  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  Constructor[instanceCreators.size()  ]);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  Constructor[instanceCreators.size()  ]);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
146	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.clone();  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.clone();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.clone();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
147	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObjectConstructor();  [CE]  cannot  find  symbol  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObjectConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObjectConstructor();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
148	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObject();  [CE]  cannot  find  symbol  [FE]                                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObject();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.getObject();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
149	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone(),  rawType);  [CE]  ';'  expected  [FE]                                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone(),  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone(),  rawType);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  ';'  expected	25	None	replace
150	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getSuperclass();  [CE]  incompatible  types  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getSuperclass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getSuperclass();    	non-compiled	[CE]  incompatible  types	32	None	replace
151	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  >=  null?  null  :  rawType.getSuperclass();  [CE]  bad  operand  types  for  binary  operator  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  >=  null?  null  :  rawType.getSuperclass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  >=  null?  null  :  rawType.getSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	32	None	replace
152	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
153	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
154	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withUnsafeConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
155	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withSimpleConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
156	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
157	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
158	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
159	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
160	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
161	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
162	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
163	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  context  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  context	86	None	replace
164	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
165	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  type	86	None	replace
166	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
167	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  factory.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  factory  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  factory.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  factory.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  factory	86	None	replace
168	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	54	None	add
169	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]      ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	54	None	add
170	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]        ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	54	None	add
171	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  |  null  :  rawType.getConstructor();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  |  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  |  null  :  rawType.getConstructor();	  	non-compiled	[CE]  ';'  expected	54	None	add
172	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor());  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor());	  	non-compiled	[CE]  ';'  expected	54	None	add
173	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
174	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
175	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class  <?  super  T>());  [CE]  unexpected  type  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class  <?  super  T>());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.construct(new  Class  <?  super  T>());	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  unexpected  type	28	None	replace
176	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawClass()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawClass()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
177	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawClass()  :  null;  [CE]  cannot  find  symbol  context  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawClass()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawClass()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol  context	85	None	replace
178	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
179	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawClass()  :  null;  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawClass()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawClass()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol  RawType	85	None	replace
180	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawClass()  :  null;  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawClass()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawClass()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol  type	85	None	replace
181	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptyList();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptyList();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptyList();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
182	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();  [CE]  cannot  find  symbol  constructor  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    buildor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  constructor	11	None	replace
183	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClass();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
184	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClass();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
185	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType.getSuperClass();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType.getSuperClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType.getSuperClass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
186	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
187	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
188	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
189	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
190	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
191	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
192	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	73	None	replace
193	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	73	None	replace
194	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getRawClass());  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getRawClass());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getRawClass());	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
195	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getName());  [CE]  inconvertible  types  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getName());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType.getName());	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	73	None	replace
196	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	73	None	replace
197	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	73	None	replace
198	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor();  [CE]  cannot  find  symbol  RawType  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rootType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	71	None	replace
199	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
200	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
201	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
202	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  defaultConstructor  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
203	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
204	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
205	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor!=  null?  rawType.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
206	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	compilable	  [FE]  NullPointerException  	55	43	replace
207	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	compilable	  [FE]  NullPointerException  	55	43	replace
208	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	55	2	replace
209	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDeclaredConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	55	2	replace
210	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();  [CE]  incompatible  types  [FE]        ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getName();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	55	None	replace
211	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
212	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
213	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.classConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
214	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
215	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
216	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
217	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  instances  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.construct(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	29	None	replace
218	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  getInstanceCreators().construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
219	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(rawType);  [CE]  cannot  find  symbol  instances  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.construct(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	29	None	replace
220	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  context  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  context.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  context	77	None	replace
221	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
222	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  type	77	None	replace
223	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
224	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  },  rawType);  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  },  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  },  rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
225	[BUG]  [BUGGY]  final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Converter    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
226	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();  [CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;	18	None	replace
227	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  new  Constructor()  :  rawType.newConstructor();  [CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  new  Constructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  new  Constructor()  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;	18	None	replace
228	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.newConstructor();  [CE]  cannot  find  symbol  type  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
229	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	18	None	replace
230	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	18	None	replace
231	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.newConstructor();  [CE]  cannot  find  symbol  renderer  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	18	None	replace
232	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	40	None	replace
233	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	40	None	replace
234	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawTypeUtils  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtils	40	None	replace
235	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperClassConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	40	None	replace
236	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtils  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtils.getSuperClassConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtils	40	None	replace
237	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.getConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
238	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  getConstructor(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
239	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getConstructor(this.instanceCreators);  [CE]  cannot  find  symbol  sourceType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getConstructor(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  sourceType.getConstructor(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  sourceType	19	None	replace
240	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  renderer  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.getConstructor(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  renderer	19	None	replace
241	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  context);  [CE]  cannot  find  symbol  context  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  context);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  context	19	None	replace
242	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
243	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
244	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
245	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtils.newDefaultConstructor();  [CE]  cannot  find  symbol  RawTypeUtils  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtils.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtils.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtils	45	None	replace
246	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null? "null "  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
247	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
248	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  rawType);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	21	None	replace
249	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)this.instanceCreators.get(rawType);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	21	None	replace
250	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  args);  [CE]  cannot  find  symbol  args  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  args);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  args);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  args	21	None	replace
251	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  -  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  -  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  -  1);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	21	None	replace
252	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  context);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	21	None	replace
253	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType  +  1);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	21	None	replace
254	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	44	None	replace
255	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	44	None	replace
256	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	44	None	replace
257	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	44	None	replace
258	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	52	None	replace
259	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
260	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
261	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newInstance()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	52	None	replace
262	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  incompatible  types  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	26	None	replace
263	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [CE]  incompatible  types  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType!=  null?  null  :  rawType.getConstructor();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	26	None	replace
264	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.getConstructor(this.instanceCreators);	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
265	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.newConstructor();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
266	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.newDefaultConstructor();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
267	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.getDeclaredConstructor();  [CE]  incompatible  types  [FE]                                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.getDeclaredConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.getDeclaredConstructor();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	26	None	replace
268	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();  [CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    rawType    =    rawType.getConstructor();    	non-compiled	[CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	57	None	replace
269	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.constructor();  [CE]  cannot  find  symbol  type  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.constructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol  type	63	None	replace
270	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.construct();	  final    Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
271	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.constructor();  [CE]  cannot  find  symbol  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.constructor();	  Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
272	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct();	  Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
273	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	37	None	replace
274	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	37	None	replace
275	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	37	None	replace
276	[BUG]  [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [CE]  ';'  expected  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
277	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();  [CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  new  Constructor()  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T>  cannot  be  applied  to  given  types;	76	None	replace
278	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.newConstructor();  [CE]  cannot  find  symbol  type  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	76	None	replace
279	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	76	None	replace
280	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
281	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
282	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol  RawType	94	None	replace
283	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  context  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  context.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol  context	94	None	replace
284	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
285	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  factory.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  factory  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  factory.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  factory.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol  factory	94	None	replace
286	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
287	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.getDeclaredConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.getDeclaredConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.getDeclaredConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
288	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getDeclaredConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  renderer  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getDeclaredConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.getDeclaredConstructor(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  renderer	34	None	replace
289	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  method  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  method	34	None	replace
290	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  context);  [CE]  cannot  find  symbol  context  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  context);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  context	34	None	replace
291	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  rawType);  [CE]  method  getDeclaredConstructor  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  method  getDeclaredConstructor  in  class  Class<T#2>  cannot  be  applied  to  given  types;	34	None	replace
292	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getDeclaredConstructor(this.instanceCreators);  [CE]  cannot  find  symbol  sourceType  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getDeclaredConstructor(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  sourceType.getDeclaredConstructor(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  sourceType	34	None	replace
293	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
294	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
295	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
296	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
297	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().build().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor().build().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
298	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.constructor().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.constructor().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.constructor().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
299	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
300	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.construct().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
301	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().getConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build().getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
302	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  rawType);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	20	None	replace
303	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  args);  [CE]  cannot  find  symbol  args  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  args);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  args);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  args	20	None	replace
304	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)this.instanceCreators.get(rawType);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  inconvertible  types	20	None	replace
305	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  context);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	20	None	replace
306	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  false);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	20	None	replace
307	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  null);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  null);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	20	None	replace
308	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	17	None	replace
309	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	17	None	replace
310	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [CE]  illegal  start  of  expression  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
311	[BUG]  [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [CE]  ';'  expected  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  ';'  expected	17	None	replace
312	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  rawType);  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  rawType);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
313	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  instanceCreators);  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  instanceCreators);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
314	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  context);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	67	None	replace
315	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  null);  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  null);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
316	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  false);  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  false);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
317	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  true);  [CE]  cannot  find  symbol  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  true);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  true);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
318	[BUG]  [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	10	None	replace
319	[BUG]  [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	10	None	replace
320	[BUG]  [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	10	None	replace
321	[BUG]  [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	10	None	replace
322	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getSuperClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
323	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getConstructor();  [CE]  package  RawType  does  not  exist  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
324	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getConstructor();  [CE]  package  RawType  does  not  exist  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
325	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getRawClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getRawClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getRawClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
326	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getInterfaceConstructor();  [CE]  package  RawType  does  not  exist  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getInterfaceConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawType.None.class  :  rawType.getInterfaceConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
327	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getInterfaceConstructor();  [CE]  package  RawType  does  not  exist  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getInterfaceConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getInterfaceConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
328	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	53	None	replace
329	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
330	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
331	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newInstanceConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newInstanceConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newInstanceConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	70	None	replace
332	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawClass()!=  null?  null  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawClass()!=  null?  null  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  rawType.getRawClass()!=  null?  null  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
333	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  rawType;  [CE]  cannot  find  symbol  rawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  rawType;	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
334	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
335	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  rawType;  [CE]  cannot  find  symbol  rawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  rawType;	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
336	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null)?  this.rawType.newDefaultConstructor()  :  newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
337	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  rawType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  rawType);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	65	None	replace
338	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  args);  [CE]  cannot  find  symbol  args  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  args);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  args);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  args	65	None	replace
339	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  false);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	65	None	replace
340	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  true);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  true);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  true);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	65	None	replace
341	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  null);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  null);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	65	None	replace
342	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  context);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	65	None	replace
343	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();  [CE]  cannot  find  symbol  renderer  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  renderer.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	42	None	replace
344	[BUG]  [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [CE]  ';'  expected  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.newDefaultConstructor();    	non-compiled	[CE]  ';'  expected	42	None	replace
345	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.getRawConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	95	None	replace
346	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
347	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.getRawConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	95	None	replace
348	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor(rawType.getRawConstructor()):  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
349	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  newDefaultConstructor  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  newDefaultConstructor	95	None	replace
350	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor().getRawConstructor()  :  newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor().getRawConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor().getRawConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	95	None	replace
351	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
352	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getInterfaceConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getInterfaceConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getInterfaceConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
353	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
354	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  instances  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  instances	77	None	replace
355	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
356	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  typeFactory.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  typeFactory  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  typeFactory.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  typeFactory.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  typeFactory	77	None	replace
357	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance(instanceCreators);  [CE]  method  newInstance  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance(instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newInstance(instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.newInstance();    	non-compiled	[CE]  method  newInstance  in  class  Class<T>  cannot  be  applied  to  given  types;	30	None	replace
358	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor(null);  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor(null);	  Constructor    <?    super    T>    constructor    =    rawType.newInstance();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
359	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();  [CE]  package  RawConstructor  does  not  exist  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawConstructor  does  not  exist	53	None	replace
360	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  RawConstructor.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
361	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  RawConstructor.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	53	None	replace
362	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GET_CONSTRUCTOR  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GET_CONSTRUCTOR  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GET_CONSTRUCTOR  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	53	None	replace
363	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType;  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
364	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	23	None	replace
365	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getSuperclassConstructor();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
366	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
367	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  getDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
368	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
369	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
370	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
371	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toArray();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toArray();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toArray();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
372	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build();	  final    Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
373	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
374	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
375	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
376	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  rawType  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
377	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  instances  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  instances	86	None	replace
378	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
379	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  sourceType  }  );  [CE]  cannot  find  symbol  sourceType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  sourceType  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  sourceType  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  sourceType	86	None	replace
380	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(null);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(null);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
381	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.construct(null);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.construct(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType!=  null)?  null  :  rawType.construct(null);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
382	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
383	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
384	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  instanceCreators);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	20	None	replace
385	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType  -  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType  -  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType  -  1);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	20	None	replace
386	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  ObjectConstructor.class);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  ObjectConstructor.class);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType,  ObjectConstructor.class);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	20	None	replace
387	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  sourceType.newDefaultConstructor();  [CE]  cannot  find  symbol  sourceType  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  sourceType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  sourceType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  sourceType	42	None	replace
388	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(null);  [CE]  incompatible  types  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.getConstructor(null);	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	26	None	replace
389	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.size()  ]);	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
390	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.constructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
391	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getConstructor()  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Converter    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	14	None	replace
392	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
393	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  newDefaultConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
394	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptySet();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptySet();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  Collections.emptySet();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
395	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.newDefaultConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.newDefaultConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.newDefaultConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
396	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  illegal  start  of  type  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
397	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
398	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);  [CE]  illegal  start  of  type  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
399	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	76	None	replace
400	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	76	None	replace
401	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newConstructor()  :  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newConstructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newConstructor()  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
402	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    rawType    =    rawType.getConstructor();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
403	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	81	None	replace
404	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [CE]  ';'  expected  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  ';'  expected	81	None	replace
405	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	81	None	replace
406	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  	81	None	replace
407	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	81	None	replace
408	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
409	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  sourceType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  sourceType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  defaultConstructor.getRawClass()  :  sourceType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
410	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawClass()  :  defaultConstructor;  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawClass()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawClass()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  type	87	None	replace
411	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)objectCreators.get(rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
412	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);  [CE]  illegal  start  of  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
413	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
414	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();  [CE]  incompatible  types  [FE]      ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	55	None	replace
415	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();  [CE]  package  RawConstructor  does  not  exist  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.None.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawConstructor  does  not  exist	50	None	replace
416	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GETPROP  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GETPROP  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.GETPROP  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
417	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
418	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  type.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
419	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  RawTypeUtil.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  RawTypeUtil.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  RawTypeUtil.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
420	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
421	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  sourceType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  sourceType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  sourceType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  sourceType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  sourceType	69	None	replace
422	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.class  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
423	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.NO_OBJECT_CONSTRUCTOR  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.NO_OBJECT_CONSTRUCTOR  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.NO_OBJECT_CONSTRUCTOR  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
424	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	34	None	replace
425	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  getDeclaredConstructor(rawType,  this.instanceCreators);  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  getDeclaredConstructor(rawType,  this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  getDeclaredConstructor(rawType,  this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
426	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.unsafeAllocator);  [CE]  cannot  find  symbol  unsafeAllocator  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.unsafeAllocator);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.unsafeAllocator);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  unsafeAllocator	34	None	replace
427	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  null);  [CE]  method  getDeclaredConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  null);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  method  getDeclaredConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	34	None	replace
428	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.defaultConstructor);  [CE]  cannot  find  symbol  defaultConstructor  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.defaultConstructor);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators,  this.defaultConstructor);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	34	None	replace
429	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(this);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
430	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(this);  [CE]  cannot  find  symbol  instances  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  instances	75	None	replace
431	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(this);  [CE]  cannot  find  symbol  context  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  context.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  context	75	None	replace
432	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.construct(this);  [CE]  cannot  find  symbol  rawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.rawType.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.rawType.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol  rawType	75	None	replace
433	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	17	None	replace
434	[BUG]  [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [CE]  ';'  expected  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType!=  null)  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  ';'  expected	10	None	replace
435	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	19	None	replace
436	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);  [CE]  cannot  find  symbol  unsafeAllocator  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  unsafeAllocator	19	None	replace
437	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
438	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  ObjectConstructor.class);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  ObjectConstructor.class);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  ObjectConstructor.class);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	21	None	replace
439	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
440	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  RawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  RawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  RawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	41	None	replace
441	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().newDefaultConstructor(rawType);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
442	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  rawType  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  rawType  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  rawType  =  rawType  ==  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	54	None	add
443	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  ';'  expected  [FE]      ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    Final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  ';'  expected	54	None	add
444	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  ConstructorType[instanceCreators.size()  ]);  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  ConstructorType[instanceCreators.size()  ]);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.toArray(new  ConstructorType[instanceCreators.size()  ]);	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
445	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.values().clone();  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.values().clone();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.values().clone();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
446	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	25	None	replace
447	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);  [CE]  cannot  find  symbol  instances  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	29	None	replace
448	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
449	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  type.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
450	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  RawTypeUtil.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  RawTypeUtil.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  RawTypeUtil.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
451	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
452	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  defaultConstructor.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
453	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  renderer  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer!=  null?  rawType.getRawConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  renderer	96	None	replace
454	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type!=  null?  rawType.getRawConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  type	96	None	replace
455	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  rootType  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  rootType	96	None	replace
456	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType,  false);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor(rawType,  false);	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	44	None	replace
457	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  type.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  type.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  type.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	70	None	replace
458	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
459	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  context);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  context	22	None	replace
460	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getSuperClassConstructor();  [CE]  cannot  find  symbol  sourceType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  sourceType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  sourceType	40	None	replace
461	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getSuperClassConstructor();  [CE]  cannot  find  symbol  renderer  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	40	None	replace
462	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
463	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();  [CE]  incompatible  types  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getClass();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	51	None	replace
464	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
465	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.None.class    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	59	None	replace
466	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  factory.newDefaultConstructor()  :  rawType;  [CE]  cannot  find  symbol  factory  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  factory.newDefaultConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  factory.newDefaultConstructor()  :  rawType;	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	45	None	replace
467	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor(rawType);  [CE]  cannot  find  symbol  factory  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	45	None	replace
468	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  rawType  :  factory.newDefaultConstructor();  [CE]  cannot  find  symbol  factory  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  rawType  :  factory.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  rawType  :  factory.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    factory.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	45	None	replace
469	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
470	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  UnsafeAllocator)?(UnsafeAllocator)rawType  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
471	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
472	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
473	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
474	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getImplicitPrototype();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getImplicitPrototype();	  Constructor    <?    super    T>    constructor    =    rawType.getComponentType();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
475	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	52	None	replace
476	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();  [CE]  package  RawType  does  not  exist  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	52	None	replace
477	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_CONSTRUCTOR  :  RawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_CONSTRUCTOR  :  RawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_CONSTRUCTOR  :  RawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	52	None	replace
478	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	52	None	replace
479	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toSuperclass();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toSuperclass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
480	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor().build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor().build().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor().build().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
481	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build().newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
482	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().withSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().withSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build().withSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
483	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().constructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build().constructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
484	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  newDefaultConstructor()  :  this.rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  rawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  newDefaultConstructor()  :  this.rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null)?  newDefaultConstructor()  :  this.rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
485	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();  [CE]  package  RawType  does  not  exist  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	49	None	replace
486	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.UNKNOWN_TYPE  :  RawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
487	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.GETPROP  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.GETPROP  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.GETPROP  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	49	None	replace
488	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType;  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType;	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	80	None	replace
489	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  getDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
490	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType  +  1);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType  +  1);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	72	None	replace
491	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instanceCreators);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	72	None	replace
492	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
493	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [CE]  illegal  start  of  expression  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
494	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType).newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
495	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  false);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	73	None	replace
496	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	73	None	replace
497	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  Collections.emptySet();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  Collections.emptySet();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  Collections.emptySet();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
498	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(null);	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
499	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  renderer.newDefaultConstructor();  [CE]  cannot  find  symbol  renderer  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  renderer.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  renderer.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	79	None	replace
500	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getDefaultConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
501	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	18	None	replace
502	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	18	None	replace
503	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor(rawType):  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
504	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  ObjectConstructor.class);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  ObjectConstructor.class);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  ObjectConstructor.class);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	65	None	replace
505	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  newDefaultConstructor());	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	65	None	replace
506	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    RawType.getConstructor();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
507	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  Collections.emptySet();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  Collections.emptySet();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  Collections.emptySet();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
508	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class  <?  super  T>());  [CE]  unexpected  type  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class  <?  super  T>());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class  <?  super  T>());	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
509	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(rawType));  [CE]  unexpected  type  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(rawType));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(rawType));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
510	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>()));  [CE]  ';'  expected  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>()));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>()));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  ';'  expected	64	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(rawType.getConstructor()!=  null);  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  cannot  find  symbol  Preconditions  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Preconditions.checkState(rawType.getConstructor()!=  null);  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Preconditions.checkState(rawType.getConstructor()!=  null);  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(rawType.isPrimitive());  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  cannot  find  symbol  Preconditions  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Preconditions.checkState(rawType.isPrimitive());  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Preconditions.checkState(rawType.isPrimitive());  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
513	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);  [CE]  cannot  find  symbol  instances  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  instances.construct(this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	78	None	replace
514	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
515	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  rawType.getRawConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
516	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  newDefaultConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  newDefaultConstructor	95	None	replace
517	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	95	None	replace
518	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  newDefaultConstructor());	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	56	None	replace
519	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);  [CE]  cannot  find  symbol  unsafeAllocator  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators,  this.unsafeAllocator);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  unsafeAllocator	56	None	replace
520	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	6	None	replace
521	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);  [CE]  cannot  find  symbol  RawTypeUtil  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawTypeUtil.getRawConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	6	None	replace
522	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  RawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	6	None	replace
523	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getRawConstructor();  [CE]  cannot  find  symbol  sourceType  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  sourceType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  sourceType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  sourceType	6	None	replace
524	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getRawConstructor();  [CE]  cannot  find  symbol  renderer  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  renderer.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  renderer.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  renderer	6	None	replace
525	[BUG]  [BUGGY]  Constructor  <?  super  T>  buildor  =  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  buildor  =  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  buildor  =  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
526	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();  [CE]  cannot  find  symbol  rootType  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rootType	5	None	replace
527	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();  [CE]  cannot  find  symbol  factory  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	5	None	replace
528	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
529	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newInstance()  :  null;  [CE]  incompatible  types  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newInstance()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newInstance()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  incompatible  types	85	None	replace
530	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
531	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	21	None	replace
532	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.getRawClass());  [CE]  ']'  expected  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.getRawClass());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toArray(new  Class[rawType.getRawClass());	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  ']'  expected	27	None	replace
533	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();  [CE]  incompatible  types  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  incompatible  types	27	None	replace
534	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  package  RawType  does  not  exist  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	52	None	replace
535	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.declaredType();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.declaredType();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.declaredType();	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
536	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getDeclaredType()  :  null;  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getDeclaredType()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getDeclaredType()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
537	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
538	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  factory.getSuperclassConstructor();  [CE]  ';'  expected  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  factory.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  factory.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  ';'  expected	61	None	replace
539	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  renderer.getSuperclassConstructor();  [CE]  ';'  expected  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  renderer.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType,  renderer.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  ';'  expected	61	None	replace
540	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	22	None	replace
541	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType,  instanceCreators);	  Constructor    <?>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	22	None	replace
542	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  package  RawType  does  not  exist  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	49	None	replace
543	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  context  }  );  [CE]  cannot  find  symbol  context  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  context  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instanceCreators.construct(new  Class[]  {  context  }  );	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  context	86	None	replace
544	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()!=  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
545	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
546	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
547	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getRawConstructor()  :  null;	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
548	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
549	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);  [CE]  ';'  expected  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  ';'  expected	78	None	replace
550	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rrawType);  [CE]  cannot  find  symbol  rrawType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rrawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.construct(rrawType);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  rrawType	29	None	replace
551	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);  [CE]  ';'  expected  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this,  rawType.construct(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this.instanceCreators);    	non-compiled	[CE]  ';'  expected	29	None	replace
552	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
553	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()!=  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()!=  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()!=  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
554	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
555	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  null  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  null  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  null  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
556	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  ==  null)?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
557	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperClassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperClassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperClassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperClassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    type.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
558	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
559	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
560	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.UNKNOWN_CONSTRUCTOR  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
561	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	50	None	replace
562	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
563	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instances);  [CE]  cannot  find  symbol  instances  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instances);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType,  instances);	  Constructor    <?    super    T>    constructor    =(Constructor    <    Object>)instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  instances	72	None	replace
564	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObjectConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
565	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.clone();  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.clone();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.clone();	  Constructor    <    T>    constructor    =(Constructor    <    T>)instanceCreators.clone();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
566	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  prefix);  [CE]  cannot  find  symbol  prefix  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  prefix);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType,  prefix);	  Constructor    <    T>    constructor    =    instanceCreators.get(rawType);    	non-compiled	[CE]  cannot  find  symbol  prefix	65	None	replace
567	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
568	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  context.newConstructor();  [CE]  cannot  find  symbol  context  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  context.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  context.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  context	18	None	replace
569	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  types.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  types  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  types.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  types.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class[]    {    }    );    	non-compiled	[CE]  cannot  find  symbol  types	77	None	replace
570	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getReferenceName();  [CE]  cannot  find  symbol  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getReferenceName();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getReferenceName();	  Constructor    <?    super    T>    constructor    =    rawType.getComponentType();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
571	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(this);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(this);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.construct(this);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
572	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor(rawType);  [CE]  cannot  find  symbol  RawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    RawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	12	None	replace
573	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null?  this.rawType.newDefaultConstructor()  :  rawType);  [CE]  cannot  find  symbol  rawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null?  this.rawType.newDefaultConstructor()  :  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType!=  null?  this.rawType.newDefaultConstructor()  :  rawType);	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
574	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null?  this.rawType.newDefaultConstructor()  :  rawType);  [CE]  cannot  find  symbol  rawType  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null?  this.rawType.newDefaultConstructor()  :  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(this.rawType  ==  null?  this.rawType.newDefaultConstructor()  :  rawType);	  final    Constructor    <?    super    T>    constructor    =    this.rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	43	None	replace
575	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(),  false);  [CE]  <identifier>  expected  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor(),  false);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.getConstructor(),  false);	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
576	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.newInstance();  [CE]  incompatible  types  [FE]                                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <  T>  constructor  =  rawType.newInstance();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.newInstance();	  Constructor    <    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	26	None	replace
577	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.newInstance();  [CE]  incompatible  types  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.newInstance();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.newInstance();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	23	None	replace
578	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getRawClass();	  Constructor    <?>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
579	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
580	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getRawClass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getRawClass();	  final    Constructor    <?    super    T>    constructor    =    rawType.constructor();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
581	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
582	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toString();  [CE]  incompatible  types  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toString();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.toString();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  incompatible  types	4	None	replace
583	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
584	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperclassConstructor()    :    null;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
585	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  buildor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]    ClassCastException    [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  final  Constructor  <?  super  T>  buildor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getConstructor();    final  Constructor  <?  super  T>  buildor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	54	None	add
586	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  factory.getSuperClassConstructor();  [CE]  ';'  expected  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  factory.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  factory.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  ';'  expected	69	None	replace
587	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  context.getSuperClassConstructor();  [CE]  ';'  expected  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  context.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType,  context.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  ';'  expected	69	None	replace
588	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
589	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawParameterType(0);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawParameterType(0);	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
590	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withUnknownSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
591	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(true);  [CE]  cannot  find  symbol  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(true);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor(true);	  Constructor    <?    super    T>    constructor    =    rawType.withSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
592	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newInstance().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newInstance().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.newInstance().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
593	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.decorated().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.decorated().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.decorated().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.build().getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
594	[BUG]  [BUGGY]  Preconditions.checkArgument(rawType.isPrimitive());  [CE]  cannot  find  symbol  Preconditions  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Preconditions.checkArgument(rawType.isPrimitive());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Preconditions.checkArgument(rawType.isPrimitive());	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    rawType    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
595	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  sourceType;  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  sourceType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  sourceType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getSuperClassConstructor()    :    rawType;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
596	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);  [CE]  illegal  start  of  type  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
597	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);  [CE]  illegal  start  of  type  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);	  Constructor    <?    super    T>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
598	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);  [CE]  illegal  start  of  type  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.put(rawType,  rawType);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
599	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);  [CE]  illegal  start  of  type  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  context);	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
600	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  newDefaultConstructor());  [CE]  illegal  start  of  type  [FE]                                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType,  newDefaultConstructor());	  Constructor    <?>    constructor    =(Constructor    <?    super>)instanceCreators.get(rawType);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
601	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  instanceCreators().get(rawType);  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  instanceCreators().get(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  instanceCreators().get(rawType);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
602	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().findConstructor(rawType);  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().findConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().findConstructor(rawType);	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
603	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType,  newDefaultConstructor());	  Constructor    <?>    constructor    =    getInstanceCreators().get(rawType);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	67	None	replace
604	[BUG]  [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  static  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	static  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rawType);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
605	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);  [CE]  cannot  find  symbol  raw  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  raw	56	None	replace
606	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raf);  [CE]  cannot  find  symbol  raf  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raf);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raf);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  raf	56	None	replace
607	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObject();  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObject();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toObject();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
608	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType,  newDefaultConstructor());	  Constructor    <?    super    T>    constructor    =(Constructor)instanceCreators.get(rawType);    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	73	None	replace
609	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.DEFAULT_CONSTRUCTOR  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	53	None	replace
610	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.newRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawConstructor.getRawConstructor()    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	53	None	replace
611	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  type  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  type.getRawConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	95	None	replace
612	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	87	None	replace
613	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawClass()  :  rawType;  [CE]  cannot  find  symbol  rootType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawClass()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rootType!=  null?  defaultConstructor.getRawClass()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawClass()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  rootType	87	None	replace
614	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <  Object>());  [CE]  constructor  Class  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <  Object>());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <  Object>());	  Constructor    <?    super    T>    constructor    =    rawType.newInstance();    	non-compiled	[CE]  constructor  Class  in  class  Class<T>  cannot  be  applied  to  given  types;	30	None	replace
615	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  this.newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  this.newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  this.newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	70	None	replace
616	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  ';'  expected  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null  ||  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    newDefaultConstructor()    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  ';'  expected	70	None	replace
617	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.construct(new  Class[]  {  }  );  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
618	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(this.instanceCreators);  [CE]  cannot  find  symbol  method  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(this.instanceCreators);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  method.getDeclaredConstructor(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  method	34	None	replace
619	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType,  rawType);  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType,  rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(rawType,  rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
620	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.getDeclaredConstructor(rawType);  [CE]  cannot  find  symbol  instances  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.getDeclaredConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.getDeclaredConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	34	None	replace
621	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(raw);  [CE]  cannot  find  symbol  raw  [FE]                      ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(raw);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getDeclaredConstructor(raw);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  raw	34	None	replace
622	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Converter    <?    super    T>    constructor    =    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	14	2	replace
623	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;  [FE]  ClassCastException  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getConstructor()  :  null;	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Converter    <?    super    T>    constructor    =    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	14	2	replace
624	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
625	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeConstants.newDefaultConstructor();  [CE]  cannot  find  symbol  RawTypeConstants  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeConstants.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeConstants.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    RawTypeUtil.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeConstants	44	None	replace
626	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.constructor();	  final    Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
627	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
628	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
629	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  rawType  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
630	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
631	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType;	  final    Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
632	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(null);  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.construct(null);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
633	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(null);  [CE]  cannot  find  symbol  context  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  context.construct(null);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  context.construct(null);	  Constructor    <?    super    T>    constructor    =    rawType.construct(null);    	non-compiled	[CE]  cannot  find  symbol  context	68	None	replace
634	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor  ==  null?  rawType.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
635	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor.getRawConstructor()!=  null?  rawType.getRawConstructor()  :  rawType;  [CE]  cannot  find  symbol  defaultConstructor  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  defaultConstructor.getRawConstructor()!=  null?  rawType.getRawConstructor()  :  rawType;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  defaultConstructor.getRawConstructor()!=  null?  rawType.getRawConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    rawType.getRawConstructor()    :    defaultConstructor;    	non-compiled	[CE]  cannot  find  symbol  defaultConstructor	96	None	replace
636	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(type));  [CE]  unexpected  type  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(type));  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>(type));	  Constructor    <?    super    T>    constructor    =    rawType.construct(new    Class    <?    super    T>());    	non-compiled	[CE]  unexpected  type	64	None	replace
637	[BUG]  [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	10	None	replace
638	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
639	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();  [CE]  incompatible  types  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.toString();	  final    Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getRawConstructor();    	non-compiled	[CE]  incompatible  types	15	None	replace
640	[BUG]  [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [CE]  ';'  expected  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isPrimitive())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  ';'  expected	81	None	replace
641	[BUG]  [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [CE]  ';'  expected  [FE]          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	if(rawType.isInterface())  {  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  }	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor());    	non-compiled	[CE]  ';'  expected	81	None	replace
642	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
643	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newConstructor();  [CE]  cannot  find  symbol  factory  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  factory.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	76	None	replace
644	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.build().getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType    ==    null?    null    :    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
645	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	79	None	replace
646	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.build();  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.build();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.build();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
647	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	compilable	  [FE]  ClassCastException  	79	2	replace
648	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getConstructor();  [FE]  ClassCastException  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =(rawType    ==    null)?    null    :    rawType.newDefaultConstructor();    	compilable	  [FE]  ClassCastException  	79	2	replace
649	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	58	None	replace
650	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                    ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.newSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    RawType.getSuperClassConstructor()    :    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	58	None	replace
651	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  newDefaultConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.newDefaultConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(rawType.isPrimitive());  [CE]  cannot  find  symbol  Preconditions  [FE]        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Preconditions.checkState(rawType.isPrimitive());  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Preconditions.checkState(rawType.isPrimitive());	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  Preconditions	8	None	replace
653	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()!=  null)?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
654	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                          ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType.getSuperclassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
655	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  null  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  null  :  rawType.getSuperclassConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getSuperclassConstructor()  ==  null)?  null  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    type.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
656	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);  [CE]  cannot  find  symbol  raw  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(raw);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  raw	19	None	replace
657	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rrawType);  [CE]  cannot  find  symbol  rrawType  [FE]                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rrawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  this.instanceCreators.getConstructor(rrawType);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  rrawType	19	None	replace
658	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.getConstructor(rawType);  [CE]  cannot  find  symbol  instances  [FE]                  ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  instances.getConstructor(rawType);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  instances.getConstructor(rawType);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor(this.instanceCreators);    	non-compiled	[CE]  cannot  find  symbol  instances	19	None	replace
659	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  >>  null?  null  :  rawType.getSuperclass();  [CE]  bad  operand  types  for  binary  operator  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  >>  null?  null  :  rawType.getSuperclass();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  >>  null?  null  :  rawType.getSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType!=    null?    null    :    rawType.getSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	32	None	replace
660	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                            ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  null  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
661	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  ==  null)?  rawType  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
662	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                                ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getRawConstructor();  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(rawType.getRawConstructor()  instanceof  Class  <?  super  T>)?(Class  <?  super  T>)rawType  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    type.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
663	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  context);  [CE]  cannot  find  symbol  context  [FE]              ClassCastException      [CONTEXT]      private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {      [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  context);  [BUGGY]      if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(     "unchecked     ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor(rawType,  context);	  final    Constructor    <?    super    T>    constructor    =    newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  context	80	None	replace
