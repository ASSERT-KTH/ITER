bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
2	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
3	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
5	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawConstructor();  [CE]  cannot  find  symbol  type  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
7	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.constructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.constructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
9	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
10	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    Final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	  	non-compiled	[CE]  ';'  expected	2	None	add
11	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Constructor  <?  super  T>  buildor  =  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
12	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  RawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
13	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Class  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Class  <?  super  T>  constructor  =  rawType.getConstructor();	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
14	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Converter  <?  super  T>  constructor  =  rawType.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
15	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
16	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
17	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.getRawConstructor();  [CE]  cannot  find  symbol  type  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
18	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
19	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	1	None	replace
20	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.get(rawType);	      	non-compiled	[CE]  inconvertible  types	9	None	replace
21	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor)instanceCreators.get(rawType);	      	non-compiled	[CE]  inconvertible  types	9	None	replace
22	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor)instanceCreators.get(rawType);	      	non-compiled	[CE]  inconvertible  types	9	None	replace
23	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  rawType.getConstructor();	      	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	9	None	replace
24	[BUG]  [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone();  [CE]  cannot  find  symbol  [FE]                                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =(Constructor  <  T>)instanceCreators.clone();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
26	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor();  [CE]  incompatible  types  [FE]                                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <  T>  constructor  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  rawType.getConstructor();	      	non-compiled	[CE]  incompatible  types	9	None	replace
27	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
28	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawClass();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getRawClass();	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
29	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
30	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance();  [CE]  incompatible  types  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.newInstance();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.newInstance();	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  incompatible  types	14	None	replace
31	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclass();  [CE]  incompatible  types  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclass();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  incompatible  types	13	None	replace
32	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclass();  [CE]  incompatible  types  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclass();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  incompatible  types	13	None	replace
33	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperClass();  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperClass();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getSuperClass();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
34	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators);  [CE]  method  getDeclaredConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor(this.instanceCreators);	  Constructor    <?    super    T>    constructor    =    rawType.getDeclaredConstructor();    	non-compiled	[CE]  method  getDeclaredConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	4	None	replace
35	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();  [CE]  cannot  find  symbol  type  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
38	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
39	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
40	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getSuperClassConstructor();  [CE]  cannot  find  symbol  type  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
41	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	10	None	replace
42	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();  [CE]  cannot  find  symbol  type  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  type.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
43	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  rawType  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  this.rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rawType	10	None	replace
44	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();  [CE]  cannot  find  symbol  RawTypeUtil  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  RawTypeUtil.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawTypeUtil	10	None	replace
45	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();  [CE]  cannot  find  symbol  factory  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  factory.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  factory	10	None	replace
46	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
47	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  null  :  rawType.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
48	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();  [CE]  cannot  find  symbol  type  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  type.getSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	6	None	replace
49	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	7	None	replace
50	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	7	None	replace
51	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	1	None	replace
52	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawType  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	12	None	replace
53	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [CE]  cannot  find  symbol  RawConstructor  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawConstructor.getRawConstructor()  :  rawType.getRawConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawConstructor	12	None	replace
54	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	3	2	replace
55	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  null  :  rawType.getConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	compilable	  [FE]  ClassCastException  	3	2	replace
56	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor(this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  method  getConstructor  in  class  Class<T>  cannot  be  applied  to  given  types;	3	None	replace
57	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();  [CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Constructor  <?  super  T>  rawType  =  rawType.getConstructor();	  	non-compiled	[CE]  variable  rawType  is  already  defined  in  method  <T>newDefaultConstructor(Class<?  super  T>)	2	None	add
58	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  RawType  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol  RawType	5	None	replace
59	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getSuperClassConstructor();  [CE]  package  RawType  does  not  exist  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  RawType.None.class  :  rawType.getSuperClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  package  RawType  does  not  exist	5	None	replace
60	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
61	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType.getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
62	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.withSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
63	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.constructor();  [CE]  cannot  find  symbol  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.constructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.constructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
64	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>());  [CE]  unexpected  type  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>());  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class  <?  super  T>());	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  unexpected  type	13	None	replace
65	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType);  [CE]  incompatible  types  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <  T>  constructor  =  instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <  T>  constructor  =  instanceCreators.get(rawType);	      	non-compiled	[CE]  incompatible  types	9	None	replace
66	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);  [CE]  illegal  start  of  type  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <?  super>)instanceCreators.get(rawType);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType);  [CE]  cannot  find  symbol  [FE]                          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?>  constructor  =  getInstanceCreators().get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?>  constructor  =  getInstanceCreators().get(rawType);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
68	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(null);  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(null);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(null);	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
69	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType.getSuperClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
70	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType  ==  null?  newDefaultConstructor()  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	10	None	replace
71	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();  [CE]  cannot  find  symbol  rootType  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rootType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol  rootType	10	None	replace
72	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor  <  Object>)instanceCreators.get(rawType);	      	non-compiled	[CE]  inconvertible  types	9	None	replace
73	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType);  [CE]  inconvertible  types  [FE]                        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =(Constructor)instanceCreators.get(rawType);	      	non-compiled	[CE]  inconvertible  types	9	None	replace
74	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredType();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredType();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
75	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this);  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(this);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(this);	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
76	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.newConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
77	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
78	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.construct(this.instanceCreators);	  final    Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
79	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =(rawType  ==  null)?  null  :  rawType.newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
80	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor();  [CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  newDefaultConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.newDefaultConstructor();    	non-compiled	[CE]  method  newDefaultConstructor  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	10	None	replace
81	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  [CE]  ';'  expected  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor());	  	non-compiled	[CE]  ';'  expected	2	None	add
82	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
83	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
84	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  null;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperclassConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
85	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  null;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
86	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.construct(new  Class[]  {  }  );	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
87	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  defaultConstructor;  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  defaultConstructor;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawClass()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
88	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
89	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.build().getSuperclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
90	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.superclassConstructor();	  final    Constructor    <?    super    T>    constructor    =    rawType.getSuperclassConstructor();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
91	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.superClassConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
92	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType;  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getSuperClassConstructor()  :  rawType;	  Constructor    <?    super    T>    constructor    =    rawType.getSuperClassConstructor();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
93	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getComponentType();  [CE]  incompatible  types  [FE]    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getComponentType();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getComponentType();	  final    Constructor    <?    super    T>    constructor    =    rawType.getConstructor();    	non-compiled	[CE]  incompatible  types	3	None	replace
94	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  null;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  null;	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
95	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor();  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  newDefaultConstructor();	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
96	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {    [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  defaultConstructor;  [BUGGY]    if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "unchecked   ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType!=  null?  rawType.getRawConstructor()  :  defaultConstructor;	  Constructor    <?    super    T>    constructor    =    rawType.getRawConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
