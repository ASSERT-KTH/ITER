bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] double max = 0; [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { [BUGGY] double max = 0; [BUGGY] Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	499	499	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { [BUGGY] [BUGGY] double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	499	499	2	add	
3	[BUG] [BUGGY] Iterator iter = entries.iterator(); [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; [BUGGY] Iterator iter = entries.iterator(); [BUGGY] while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	500	500	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; [BUGGY] [BUGGY] Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	500	500	2	add	
5	[BUG] [BUGGY] while (iter.hasNext()) { [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); [BUGGY] while (iter.hasNext()) { [BUGGY] iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	501	501	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); [BUGGY] [BUGGY] while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	501	501	2	add	
7	[BUG] [BUGGY] iter.advance(); [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { [BUGGY] iter.advance(); [BUGGY] max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	502	502	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { [BUGGY] [BUGGY] iter.advance(); max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	502	502	2	add	
9	[BUG] [BUGGY] max += iter.value(); [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); [BUGGY] max += iter.value(); [BUGGY] } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	503	503	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); [BUGGY] [BUGGY] max += iter.value(); } return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	503	503	2	add	
11	[BUG] [BUGGY] return max; [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } [BUGGY] return max; [BUGGY] } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	505	505	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } [BUGGY] [BUGGY] return max; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max res value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID int dimension end expectedSize i index key n resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	505	505	2	add	
13	[BUG] [BUGGY] double sum = 0; [FE] AssertionFailedError [CONTEXT] public double getNorm() { [BUGGY] double sum = 0; [BUGGY] for (double a : data) { sum += a * a; } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	699	699	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getNorm() { [BUGGY] [BUGGY] double sum = 0; for (double a : data) { sum += a * a; } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	699	699	2	add	
15	[BUG] [BUGGY] for (double a : data) { [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; [BUGGY] for (double a : data) { [BUGGY] sum += a * a; } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	700	700	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; [BUGGY] [BUGGY] for (double a : data) { sum += a * a; } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	700	700	2	add	
17	[BUG] [BUGGY] sum += a * a; [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; for (double a : data) { [BUGGY] sum += a * a; [BUGGY] } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	701	701	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; for (double a : data) { [BUGGY] [BUGGY] sum += a * a; } return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	701	701	2	add	
19	[BUG] [BUGGY] return Math.sqrt(sum); [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; for (double a : data) { sum += a * a; } [BUGGY] return Math.sqrt(sum); [BUGGY] } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	703	703	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getNorm() { double sum = 0; for (double a : data) { sum += a * a; } [BUGGY] [BUGGY] return Math.sqrt(sum); } [CLASS] ArrayRealVector [METHOD] getNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	703	703	2	add	
21	[BUG] [BUGGY] double sum = 0; [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { [BUGGY] double sum = 0; [BUGGY] for (double a : data) { sum += Math.abs(a); } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	709	709	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { [BUGGY] [BUGGY] double sum = 0; for (double a : data) { sum += Math.abs(a); } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	709	709	2	add	
23	[BUG] [BUGGY] for (double a : data) { [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; [BUGGY] for (double a : data) { [BUGGY] sum += Math.abs(a); } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	710	710	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; [BUGGY] [BUGGY] for (double a : data) { sum += Math.abs(a); } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	710	710	2	add	
25	[BUG] [BUGGY] sum += Math.abs(a); [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; for (double a : data) { [BUGGY] sum += Math.abs(a); [BUGGY] } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	711	711	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; for (double a : data) { [BUGGY] [BUGGY] sum += Math.abs(a); } return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	711	711	2	add	
27	[BUG] [BUGGY] return sum; [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; for (double a : data) { sum += Math.abs(a); } [BUGGY] return sum; [BUGGY] } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	713	713	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getL1Norm() { double sum = 0; for (double a : data) { sum += Math.abs(a); } [BUGGY] [BUGGY] return sum; } [CLASS] ArrayRealVector [METHOD] getL1Norm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a sum  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	713	713	2	add	
29	[BUG] [BUGGY] double max = 0; [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { [BUGGY] double max = 0; [BUGGY] for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	719	719	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { [BUGGY] [BUGGY] double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	719	719	2	add	
31	[BUG] [BUGGY] for (double a : data) { [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; [BUGGY] for (double a : data) { [BUGGY] max += Math.max(max, Math.abs(a)); } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	720	720	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; [BUGGY] [BUGGY] for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	720	720	2	add	
33	[BUG] [BUGGY] max += Math.max(max, Math.abs(a)); [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; for (double a : data) { [BUGGY] max += Math.max(max, Math.abs(a)); [BUGGY] } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	721	721	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; for (double a : data) { [BUGGY] [BUGGY] max += Math.max(max, Math.abs(a)); } return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	721	721	2	add	
35	[BUG] [BUGGY] return max; [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } [BUGGY] return max; [BUGGY] } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	723	723	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } [BUGGY] [BUGGY] return max; } [CLASS] ArrayRealVector [METHOD] getLInfNorm [RETURN_TYPE] double  [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data out v v1 v2 long serialVersionUID double a max  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.7071067811865475	723	723	2	add	
37	[BUG] [BUGGY] return new OpenMapSparseIterator(); [FE] AssertionFailedError [CONTEXT] public java.util.Iterator<Entry> sparseIterator() { [BUGGY] return new OpenMapSparseIterator(); [BUGGY] } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] sparseIterator [RETURN_TYPE] Iterator  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max norm res test value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID temp int col dimension end expectedSize i index key n prime resize result row virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.5	809	809	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public java.util.Iterator<Entry> sparseIterator() { [BUGGY] [BUGGY] return new OpenMapSparseIterator(); } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] sparseIterator [RETURN_TYPE] Iterator  [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE d delta epsilon max norm res test value Iterator iter OpenIntToDoubleHashMap entries larger randomAccess long serialVersionUID temp int col dimension end expectedSize i index key n prime resize result row virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.5	809	809	2	add	
39	[BUG] [BUGGY] this(values, DEFAULT_ZERO_TOLERANCE); [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values) { [BUGGY] this(values, DEFAULT_ZERO_TOLERANCE); [BUGGY] } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[])  double[] values [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	117	117	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values) { [BUGGY] [BUGGY] this(values, DEFAULT_ZERO_TOLERANCE); } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[])  double[] values [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	117	117	2	add	
41	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); [BUGGY] } [BUGGY]  [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[])  double[] values [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	118	118	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); [BUGGY] [BUGGY] } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[])  double[] values [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	118	118	2	add	
43	[BUG] [BUGGY] public OpenMapRealVector(double[] values, double epsilon) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public OpenMapRealVector(double[] values, double epsilon) { [BUGGY] virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	126	126	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	126	126	2	add	
45	[BUG] [BUGGY] virtualSize = values.length; [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { [BUGGY] virtualSize = values.length; [BUGGY] entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	127	127	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { [BUGGY] [BUGGY] virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	127	127	2	add	
47	[BUG] [BUGGY] entries = new OpenIntToDoubleHashMap(0.0); [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; [BUGGY] entries = new OpenIntToDoubleHashMap(0.0); [BUGGY] this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	128	128	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; [BUGGY] [BUGGY] entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	128	128	2	add	
49	[BUG] [BUGGY] this.epsilon = epsilon; [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); [BUGGY] this.epsilon = epsilon; [BUGGY] for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	129	129	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); [BUGGY] [BUGGY] this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	129	129	2	add	
51	[BUG] [BUGGY] for (int key = 0; key < values.length; key++) { [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; [BUGGY] for (int key = 0; key < values.length; key++) { [BUGGY] double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	130	130	2	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; [BUGGY] [BUGGY] for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	130	130	2	add	
53	[BUG] [BUGGY] double value = values[key]; [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { [BUGGY] double value = values[key]; [BUGGY] if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	131	131	2	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { [BUGGY] [BUGGY] double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	131	131	2	add	
55	[BUG] [BUGGY] if (!isDefaultValue(value)) { [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; [BUGGY] if (!isDefaultValue(value)) { [BUGGY] entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	132	132	2	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; [BUGGY] [BUGGY] if (!isDefaultValue(value)) { entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	132	132	2	add	
57	[BUG] [BUGGY] entries.put(key, value); [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { [BUGGY] entries.put(key, value); [BUGGY] } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	133	133	2	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { [BUGGY] [BUGGY] entries.put(key, value); } } } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] <init> [RETURN_TYPE] OpenMapRealVector(double[],double)  double[] values double epsilon [VARIABLES] Entry current boolean double[] values double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	133	133	2	add	
60	[BUG] [BUGGY] return Math.abs(value) < epsilon; [FE] AssertionFailedError [CONTEXT] protected boolean isDefaultValue(double value) { [BUGGY] return Math.abs(value) < epsilon; [BUGGY] } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] isDefaultValue [RETURN_TYPE] boolean  double value [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	205	205	2	replace	
61	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected boolean isDefaultValue(double value) { [BUGGY] [BUGGY] return Math.abs(value) < epsilon; } [CLASS] OpenMapRealVector OpenMapEntry OpenMapSparseIterator [METHOD] isDefaultValue [RETURN_TYPE] boolean  double value [VARIABLES] Entry current boolean double DEFAULT_ZERO_TOLERANCE epsilon value Iterator iter OpenIntToDoubleHashMap entries long serialVersionUID int dimension expectedSize key resize virtualSize  	projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.2672612419124244	205	205	2	add	
62	[BUG] [BUGGY] public ArrayRealVector(double[] d) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public ArrayRealVector(double[] d) { [BUGGY] data = d.clone(); } [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	82	82	2	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public ArrayRealVector(double[] d) { data = d.clone(); } [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	82	82	2	add	
64	[BUG] [BUGGY] data = d.clone(); [FE] AssertionFailedError [CONTEXT] public ArrayRealVector(double[] d) { [BUGGY] data = d.clone(); [BUGGY] } [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	83	83	2	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArrayRealVector(double[] d) { [BUGGY] [BUGGY] data = d.clone(); } [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	83	83	2	add	
66	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public ArrayRealVector(double[] d) { data = d.clone(); [BUGGY] } [BUGGY]  [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	84	84	2	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArrayRealVector(double[] d) { data = d.clone(); [BUGGY] [BUGGY] } [CLASS] ArrayRealVector [METHOD] <init> [RETURN_TYPE] ArrayRealVector(double[])  double[] d [VARIABLES] RealVectorFormat DEFAULT_FORMAT String NON_FITTING_POSITION_AND_SIZE_MESSAGE boolean double[] d data long serialVersionUID  	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	84	84	2	add	
68	[BUG] [BUGGY] private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance(); [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final RealVectorFormat DEFAULT_FORMAT =  RealVectorFormat.getInstance(); [BUGGY] RealVectorFormat.getInstance(); [CLASS] ArrayRealVector  [VARIABLES] 	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	41	42	2	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final RealVectorFormat DEFAULT_FORMAT =  RealVectorFormat.getInstance(); RealVectorFormat.getInstance(); [CLASS] ArrayRealVector  [VARIABLES] 	projects/Math77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java	0.2672612419124244	41	42	2	add	
