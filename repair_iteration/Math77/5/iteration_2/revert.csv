projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.value()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=this.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=current.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=current.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-max;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=this.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=current.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()/DEFAULT_ZERO_TOLERANCE*2;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=iter.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=iter.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLInfNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=(entries!=null)?entries.iterator():0;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size()-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.next()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.previous();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.min(max,entries.size());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size()+1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance()/1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance()*1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()+DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()/DEFAULT_ZERO_TOLERANCE+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.next()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(0,entries.size());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(getLInfNorm());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(max+1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.next()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Doublevalue=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()/1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).getNorm()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entry.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue()-1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.value()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance()/1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance()*1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue()*DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(this.value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(getNorm());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(0,max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getNorm()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503-=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()/max;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-delta;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()*max;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(this.value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(0,max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(getNorm());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=current.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entry.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).remove(0);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.getValue()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.getValue()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current==null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(this.value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(value,max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(getNorm());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).remove(0);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=(entries==null)?entries.iterator():0;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()*DEFAULT_ZERO_TOLERANCE*2;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()/DEFAULT_ZERO_TOLERANCE*4;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLInfNorm()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setLInfNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLInfNorm()-1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).value()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()<max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(value,max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(max+1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(getLInfNorm());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(0);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.advance()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(max-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(max+1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(newFloat(max));
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=Iter.valueOf(iter.value());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).getLen();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(max-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-max+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=allEntries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance().doubleValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLenfNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).getLInfNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entry.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.value()-1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(DEFAULT_ZERO_TOLERANCE);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(value/DEFAULT_ZERO_TOLERANCE);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entry.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).reset();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLenient();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size()*2);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(value-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503maximum-=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=(entrys==null)?entries.iterator():0;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=(entrys!=null)?entries.iterator():0;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();while(iter.hasNext()){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(max-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(DEFAULT_ZERO_TOLERANCE);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(DEFAULT_ZERO_TOLERANCE,max);
