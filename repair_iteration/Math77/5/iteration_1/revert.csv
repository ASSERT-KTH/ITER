projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.getValue()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.value()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.next();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator<Entry>)iter).remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).remove();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapSparseIterator)iter).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).value();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).getNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).advance()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=this.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=current.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iteratoriter=current.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-max;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=this.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=current.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()*DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.value()/DEFAULT_ZERO_TOLERANCE*2;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max-=iter.getValue();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()+1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.next()-1;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.advance();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=iter.entrySet().iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=iter.entries.iterator();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).getLInfNorm();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setValue(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setValue(value);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=current.doubleValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current!=null){max=newDouble(current.doubleValue());}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=null){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()>max){max=current.getValue();}
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503Iterator<Entry>iter=(entries!=null)?entries.iterator():0;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size());
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).advance();max=Math.max(max,entries.size()-1);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter).setNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503((OpenMapEntry)iter.next()).setNorm(max);
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503max+=iter.next()/DEFAULT_ZERO_TOLERANCE;
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503iter.previous();
projects/Math77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java503doublevalue=iter.value();
