bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int  j  =  0;  j  <  index;  ++j)  {	  for(int    j    =    0;    j    <    rank;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	15	None	replace
2	[BUG]  [BUGGY]  int  index[][]  b  =  matrix.getMatrix(i,  size);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  index[][]  b  =  matrix.getMatrix(i,  size);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  index[][]  b  =  matrix.getMatrix(i,  size);	      int    index[][]    b    =    matrix.getMatrix(i,    i);    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  index.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	add	for(int  j  =  0;  j  <  index.length;  ++j)  {	  for(int    j    =    0;    j    <    b.length;    ++j)    {    	compilable	  [FE]  OutOfRangeException  	5	2	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index.length;  ++j)  {  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  index.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int  j  =  0;  j  <  index.length;  ++j)  {	  for(int    j    =    0;    j    <    b.length;    ++j)    {    	compilable	  [FE]  OutOfRangeException  	5	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length  -  1;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	add	for(int  j  =  0;  j  <  b.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    b.length;    ++j)    {    	compilable	  [FE]  AssertionError  	5	3	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  b.length  -  1;  ++j)  {  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length  -  1;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int  j  =  0;  j  <  b.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    b.length;    ++j)    {    	compilable	  [FE]  AssertionError  	5	3	replace
7	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  scale);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  scale);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(i,  scale);	      b[i][i]    =    matrix.getMatrix(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
8	[BUG]  [BUGGY]  int[][]  b  =  matrix.getMatrix(i);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int[][]  b  =  matrix.getMatrix(i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int[][]  b  =  matrix.getMatrix(i);	      int    index[][]    b    =    matrix.getMatrix(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
9	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ii;  ++j)  {  [CE]  cannot  find  symbol  ii  [FE]    AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  ii;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int  j  =  0;  j  <  ii;  ++j)  {	  for(int    j    =    0;    j    <    i;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  ii	8	None	replace
10	[BUG]  [BUGGY]  int[][]  b  =  matrix.getMatrix(i,  i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int[][]  b  =  matrix.getMatrix(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int[][]  b  =  matrix.getMatrix(i,  i);	      int    index[][]    b    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
11	[BUG]  [BUGGY]  b[i][j]  =  matrix.getMatrix(i,  c);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getMatrix(i,  c);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getMatrix(i,  c);	      b[i][j]    =    matrix.getMatrix(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
12	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(i,  isi);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(i,  isi);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(i,  isi);	      b[i][j]    =    matrix.getEntry(i,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
13	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  c);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  c);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(i,  c);	      b[i][i]    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
14	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  r,  rank);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  r,  rank);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(i,  r,  rank);	      b[i][i]    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
15	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  for(int  j  =  0;  j  <  b.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  for(int  j  =  0;  j  <  b.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    b.length;    ++j)    {    for(int  j  =  0;  j  <  b.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  for(int  j  =  0;  j  <  b[i][j]);  ++j)  {  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  for(int  j  =  0;  j  <  b[i][j]);  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    b.length;    ++j)    {    for(int  j  =  0;  j  <  b[i][j]);  ++j)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  For(int  j  =  0;  j  <  b.length;  ++j)  {  [CE]  '.class'  expected  [FE]        OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  For(int  j  =  0;  j  <  b.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    b.length;    ++j)    {    For(int  j  =  0;  j  <  b.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	4	None	add
18	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(i  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(i  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(i  +  1);	      b[i][j]    =    matrix.getEntry(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  for(int  j  =  0;  j  <  rank;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  for(int  j  =  0;  j  <  rank;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    rank;    ++j)    {    for(int  j  =  0;  j  <  rank;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  For(int  j  =  0;  j  <  rank;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  For(int  j  =  0;  j  <  rank;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    rank;    ++j)    {    For(int  j  =  0;  j  <  rank;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	14	None	add
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  int  j  =  0;  j  <  rank;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rank;  ++j)  {  int  j  =  0;  j  <  rank;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    rank;    ++j)    {    int  j  =  0;  j  <  rank;  ++j)  {	  	non-compiled	[CE]  >  expected	14	None	add
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    for(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    For(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	7	None	add
25	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(index[i],  i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(index[i],  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(index[i],  i);	      b[i][j]    =    matrix.getEntry(i,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
26	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(index[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(index[i]);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(index[i]);	      b[i][j]    =    matrix.getEntry(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
27	[BUG]  [BUGGY]  int  r[][]  b  =  matrix.getMatrix(i,  r);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  r[][]  b  =  matrix.getMatrix(i,  r);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  r[][]  b  =  matrix.getMatrix(i,  r);	      int    index[][]    b    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  int  index[][]  b  =  matrix.getMatrix(index,  i);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  index[][]  b  =  matrix.getMatrix(index,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  index[][]  b  =  matrix.getMatrix(index,  i);	      int    index[][]    b    =    matrix.getMatrix(i,    i);    	non-compiled	[CE]  ';'  expected	10	None	replace
29	[BUG]  [BUGGY]  int  index[][]  b  =  matrix.getMatrix(i,  ii);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  index[][]  b  =  matrix.getMatrix(i,  ii);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  index[][]  b  =  matrix.getMatrix(i,  ii);	      int    index[][]    b    =    matrix.getMatrix(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  int  j  =  0;  j  <  b.length;  ++j)  {  [CE]  >  expected  [FE]    OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  b.length;  ++j)  {  int  j  =  0;  j  <  b.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int    j    =    0;    j    <    b.length;    ++j)    {    int  j  =  0;  j  <  b.length;  ++j)  {	  	non-compiled	[CE]  >  expected	4	None	add
31	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  i);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(i,  i);	      b[i][i]    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
32	[BUG]  [BUGGY]  b[i][j]  =  matrix.getMatrix(short);  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getMatrix(short);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getMatrix(short);	      b[i][j]    =    matrix.getMatrix(i);    	non-compiled	[CE]  '.class'  expected	2	None	replace
33	[BUG]  [BUGGY]  b[i][j]  =  matrix.getMatrix(i,  ii);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getMatrix(i,  ii);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getMatrix(i,  ii);	      b[i][j]    =    matrix.getMatrix(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
34	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(index,  i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(index,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(index,  i);	      b[i][j]    =    matrix.getEntry(i,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
35	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  list.length;  ++j)  {  [CE]  cannot  find  symbol  list  [FE]    OutOfRangeException    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  list.length;  ++j)  {  [BUGGY]    root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	for(int  j  =  0;  j  <  list.length;  ++j)  {	  for(int    j    =    0;    j    <    b.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  list	5	None	replace
36	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  ij);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(i,  ij);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(i,  ij);	      b[i][i]    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
37	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(loop,  i);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(loop,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(loop,  i);	      b[i][i]    =    matrix.getMatrix(i,    r);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
38	[BUG]  [BUGGY]  int  index[][]  b  =  matrix.getMatrix(root,  i);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  index[][]  b  =  matrix.getMatrix(root,  i);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  index[][]  b  =  matrix.getMatrix(root,  i);	      int    index[][]    b    =    matrix.getMatrix(i,    i);    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  int  index[][]  b  =  matrix.getMatrix(ii);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  int  index[][]  b  =  matrix.getMatrix(ii);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	int  index[][]  b  =  matrix.getMatrix(ii);	      int    index[][]    b    =    matrix.getMatrix(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  b[i][j]  =  matrix.getEntry(i,  rank);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][j]  =  matrix.getEntry(i,  rank);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][j]  =  matrix.getEntry(i,  rank);	      b[i][j]    =    matrix.getEntry(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
41	[BUG]  [BUGGY]  b[i][i]  =  matrix.getMatrix(loop);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      loop  =  ++r  <  order;  }  }  rank  =  r;  root  =  MatrixUtils.createRealMatrix(order,  r);  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  b[i][i]  =  matrix.getMatrix(loop);  [BUGGY]    for  (int  j  =  0;  j  <  r;  ++j)  {  root.setEntry(index[i],  j,  b[i][j]);  }  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	b[i][i]  =  matrix.getMatrix(loop);	      b[i][i]    =    matrix.getMatrix(i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
