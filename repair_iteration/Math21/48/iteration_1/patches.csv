bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
2	[BUG]  [BUGGY]  int  order  =  matrix.size()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  int  order  =  matrix.size()  -  1;  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.size()  -  1;	      int    order    =    matrix.size();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	11	None	replace
3	[BUG]  [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  size);  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  size);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  size);  }	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(sqrt,    0,    sqrt,    inverse,    size);    }    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  sqrt,  size);  [CE]  cannot  find  symbol  sqrt  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  System.arraycopy(c,  0,  b,  0,  sqrt,  size);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  sqrt,  size);	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(sqrt,    0,    sqrt,    inverse,    size);    }    	non-compiled	[CE]  cannot  find  symbol  sqrt	8	None	replace
5	[BUG]  [BUGGY]  int  order  =  matrix.length()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  int  order  =  matrix.length()  -  1;  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.length()  -  1;	      int    order    =    matrix.length();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
6	[BUG]  [BUGGY]  int  order  =  matrix.length()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  int  order  =  matrix.length()  +  1;  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.length()  +  1;	      int    order    =    matrix.length();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
7	[BUG]  [BUGGY]  int  order  =  matrix.getSamples()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  int  order  =  matrix.getSamples()  -  1;  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.getSamples()  -  1;	      int    order    =    matrix.getSamples();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	13	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    }    	non-compiled	[CE]  ')'  expected	7	None	replace
9	[BUG]  [BUGGY]  loop  =  true;  r  =  true;  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  r  =  true;  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    r  =  true;	  	non-compiled	[CE]  incompatible  types	4	None	add
10	[BUG]  [BUGGY]  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    }    else    {    System.arraycopy(c,    0,    r,    index[i]],    	non-compiled	[CE]  ')'  expected	9	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  r,  index[i]],  0,  size);	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    }    else    {    System.arraycopy(c,    0,    r,    index[i]],    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
15	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
16	[BUG]  [BUGGY]  tmp  =  true;  [CE]  cannot  find  symbol  tmp  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  tmp  =  true;  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	tmp  =  true;	  tmp    =    false;    	non-compiled	[CE]  cannot  find  symbol  tmp	6	None	replace
17	[BUG]  [BUGGY]  r  =  false;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  r  =  false;  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	r  =  false;	  tmp    =    false;    	non-compiled	[CE]  incompatible  types	6	None	replace
18	[BUG]  [BUGGY]  loop  =  new  Loop();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  new  Loop();  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  Loop();	  loop    =   "   ";    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  loop  =   "[ ";  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =   "[ ";  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =   "[ ";	  loop    =   "   ";    	non-compiled	[CE]  incompatible  types	10	None	replace
20	[BUG]  [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  	non-compiled	[CE]  ')'  expected	4	None	add
21	[BUG]  [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }	  	non-compiled	[CE]  cannot  find  symbol  i	4	None	add
22	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  sqrt,  inverse,  size);  [CE]  cannot  find  symbol  sqrt  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  System.arraycopy(c,  0,  b,  0,  sqrt,  inverse,  size);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  sqrt,  inverse,  size);	      if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(sqrt,    0,    sqrt,    inverse,    size);    }    	non-compiled	[CE]  cannot  find  symbol  sqrt	8	None	replace
23	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
24	[BUG]  [BUGGY]  loop  =  new  Double(str);  [CE]  cannot  find  symbol  str  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  new  Double(str);  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  Double(str);	  loop    =   "   ";    	non-compiled	[CE]  cannot  find  symbol  str	10	None	replace
25	[BUG]  [BUGGY]  loop  =  new  double[str.length];  [CE]  cannot  find  symbol  str  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  new  double[str.length];  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  double[str.length];	  loop    =   "   ";    	non-compiled	[CE]  cannot  find  symbol  str	10	None	replace
26	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
27	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
28	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  ==  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	      if(loop)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
29	[BUG]  [BUGGY]  loop  =  Small.valueOf(small);  [CE]  cannot  find  symbol  Small  [FE]        AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  Small.valueOf(small);  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  Small.valueOf(small);	  loop    =   "   ";    	non-compiled	[CE]  cannot  find  symbol  Small	10	None	replace
30	[BUG]  [BUGGY]  loop  =  Small.valueOf(str);  [CE]  cannot  find  symbol  str  [FE]          AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  Small.valueOf(str);  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  Small.valueOf(str);	  loop    =   "   ";    	non-compiled	[CE]  cannot  find  symbol  str	10	None	replace
31	[BUG]  [BUGGY]  double  order  =  matrix.getSamples();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  double  order  =  matrix.getSamples();  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	double  order  =  matrix.getSamples();	      int    order    =    matrix.getSamples();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	13	None	replace
32	[BUG]  [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	4	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	loop    =    true;    if(!loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	4	2	add
34	[BUG]  [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;    [BUGGY]  loop  =  true;  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop    =    true;    if(!loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	4	2	add
