bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }		non-compiled	[CE]  ')'  expected	97	None	add
2	[BUG]  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }		non-compiled	[CE]  ')'  expected	97	None	add
3	[BUG]  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }		non-compiled	[CE]  ')'  expected	97	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]  loop  =  true;  [BUGGY]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	loop  =  true;	loop  =  false;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	replace
5	[BUG]  [BUGGY]  loop  =  true;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]  loop  =  true;  [BUGGY]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  true;	loop  =  false;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	replace
6	[BUG]  [BUGGY]  tmp  =  false;  [CE]  cannot  find  symbol  tmp  [FE]      AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]  tmp  =  false;  [BUGGY]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	tmp  =  false;	loop  =  false;  	non-compiled	[CE]  cannot  find  symbol  tmp	96	None	replace
7	[BUG]  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }		non-compiled	[CE]  ')'  expected	97	None	add
8	[BUG]  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  inverse,  size);  }  [CE]  cannot  find  symbol  i  [FE]      AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  inverse,  size);  }  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(sqrt,  0,  sqrt,  inverse,  size);  }		non-compiled	[CE]  cannot  find  symbol  i	97	None	add
9	[BUG]  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    if(loop)  {  System.arraycopy(c,  0,  b,  0,  index[i]);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],		non-compiled	[CE]  ')'  expected	97	None	add
10	[BUG]  [BUGGY]  loop  = " ";  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]  loop  = " ";  [BUGGY]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  = " ";	loop  =  false;  	non-compiled	[CE]  incompatible  types	96	None	replace
11	[BUG]  [BUGGY]    int  order  =  matrix.size();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    int  order  =  matrix.size();  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    int  order  =  matrix.size();		non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	97	None	add
12	[BUG]  [BUGGY]    int  order  =  matrix.length();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    int  order  =  matrix.length();  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    int  order  =  matrix.length();		non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	97	None	add
13	[BUG]  [BUGGY]    int  order  =  matrix.getSamples();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError  [CONTEXT]  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;  [BUGGY]    int  order  =  matrix.getSamples();  [BUGGY]  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	    int  order  =  matrix.getSamples();		non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	97	None	add
