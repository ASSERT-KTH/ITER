bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  size);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  size);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  size);  }	  if(loop)    {    if(c[i][index[i]]!=    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
2	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  if(loop)    {    if(c[i][index[i]]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
3	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	32	None	replace
4	[BUG]  [BUGGY]  if(loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	32	None	replace
5	[BUG]  [BUGGY]  double  order  =  matrix.size();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  double  order  =  matrix.size();  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	double  order  =  matrix.size();	  int    order    =    matrix.size()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	replace
6	[BUG]  [BUGGY]  r  =  true;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  r  =  true;  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	r  =  true;	  r    =    false;    	non-compiled	[CE]  incompatible  types	17	None	replace
7	[BUG]  [BUGGY]  r  =  null;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  r  =  null;  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	r  =  null;	  r    =    false;    	non-compiled	[CE]  incompatible  types	17	None	replace
8	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -short)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -short)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -short)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	  if(loop)    {    if(c[i][index[i]]!=    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  '.class'  expected	23	None	replace
9	[BUG]  [BUGGY]  loop  =  BigInteger.valueOf(small);  [CE]  cannot  find  symbol  BigInteger  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  BigInteger.valueOf(small);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  BigInteger.valueOf(small);	  loop    =    Small.valueOf(small);    	non-compiled	[CE]  cannot  find  symbol  BigInteger	29	None	replace
10	[BUG]  [BUGGY]  loop  =  new  Double(small);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  new  Double(small);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  Double(small);	  loop    =    new    Double(str);    	non-compiled	[CE]  incompatible  types	24	None	replace
11	[BUG]  [BUGGY]  loop  =  new  Double(s);  [CE]  cannot  find  symbol  s  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  new  Double(s);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  Double(s);	  loop    =    new    Double(str);    	non-compiled	[CE]  cannot  find  symbol  s	24	None	replace
12	[BUG]  [BUGGY]  loop  =  Small.valueOf(s);  [CE]  cannot  find  symbol  s  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  Small.valueOf(s);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  Small.valueOf(s);	  loop    =    Small.valueOf(str);    	non-compiled	[CE]  cannot  find  symbol  s	30	None	replace
13	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small);  }  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[index[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
14	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  e);  }  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  e);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  e);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[index[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  inverse,  size);  [CE]  cannot  find  symbol  inverse  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  inverse,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  inverse,  size);	  System.arraycopy(c,    0,    b,    0,    sqrt,    inverse,    size);    	non-compiled	[CE]  cannot  find  symbol  inverse	22	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  size,  inverse);  [CE]  cannot  find  symbol  size  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  size,  inverse);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  size,  inverse);	  System.arraycopy(c,    0,    b,    0,    sqrt,    inverse,    size);    	non-compiled	[CE]  cannot  find  symbol  size	22	None	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	if(!loop)  {  throw  new  IllegalStateException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	2	replace
18	[BUG]  [BUGGY]  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  IllegalStateException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	2	replace
19	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	if(loop)  {  throw  new  IllegalStateException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	34	2	replace
20	[BUG]  [BUGGY]  if(loop)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  throw  new  IllegalStateException( " ");  }	  loop    =    true;    if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	34	2	replace
21	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c[i][i],    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c[i][i],    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	loop        =        true;        if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    if(!loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	33	2	add
24	[BUG]  [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(!loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop        =        true;        if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    if(!loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	33	2	add
25	[BUG]  [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  r  =  true;  if(!loop)  {  throw  new  IllegalStateException( "   ");  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  r  =  true;  if(!loop)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop        =        true;        if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    r  =  true;  if(!loop)  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  incompatible  types	33	None	add
26	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
27	[BUG]  [BUGGY]  if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  boolean  and  int  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  loop    =       "[   ";    	non-compiled	[CE]  incomparable  types:  boolean  and  int	19	None	replace
28	[BUG]  [BUGGY]  if(loop  ==  0)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  boolean  and  int  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop  ==  0)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop  ==  0)  {  loop  = "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  loop    =       "[   ";    	non-compiled	[CE]  incomparable  types:  boolean  and  int	19	None	replace
29	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  if(loop)    {    if(c[i][index[i]]    ==    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  size);  [CE]  cannot  find  symbol  size  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  size);	  System.arraycopy(c,    0,    b,    0,    sqrt,    size);    	non-compiled	[CE]  cannot  find  symbol  size	4	None	replace
31	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }	  if(loop)    {    if(c[i][index[i]]    <    -1)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
32	[BUG]  [BUGGY]  loop  =  new  double[small.length];  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  new  double[small.length];  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  new  double[small.length];	  loop    =    new    double[str.length];    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  index[i]],  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  index[i]],  0,  size);	  System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  ')'  expected	13	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b[index[i]],  0,  size);  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b[index[i]],  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b[index[i]],  0,  size);	  System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
35	[BUG]  [BUGGY]  Loop  loop  =  new  Loop();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  Loop  loop  =  new  Loop();  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	Loop  loop  =  new  Loop();	  loop    =    new    Loop();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
36	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c,    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  loop  =  true;  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c,    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  double  order  =  matrix.getSamples()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  double  order  =  matrix.getSamples()  -  1;  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	double  order  =  matrix.getSamples()  -  1;	  double    order    =    matrix.getSamples();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	31	None	replace
39	[BUG]  [BUGGY]  int  order  =  matrix.getSamples()  *  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  int  order  =  matrix.getSamples()  *  1;  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.getSamples()  *  1;	  int    order    =    matrix.getSamples()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	7	None	replace
40	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	loop        =        true;        if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    if(loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	33	2	add
41	[BUG]  [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(loop)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    AssertionError    [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop    =    true;    if(!loop)  {  throw  new  IllegalStateException(   "   ");  }  if(loop)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop        =        true;        if(!loop)    {    throw    new    IllegalStateException(   "   ");    }    if(loop)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	33	2	add
42	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  size);  }	  if(loop)    {    if(c[i][index[i]]!=    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
43	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  >=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  >=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  >=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  if(loop)    {    if(c[i][index[i]]    ==    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
44	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -switch)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -switch)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -switch)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	  if(loop)    {    if(c[i][index[i]]!=    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
45	[BUG]  [BUGGY]  if(loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
46	[BUG]  [BUGGY]  Loop  tmp  =  new  Loop();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  Loop  tmp  =  new  Loop();  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	Loop  tmp  =  new  Loop();	  loop    =    new    Loop();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(c,  0,  inverse,  0,  size);  [CE]  cannot  find  symbol  inverse  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  inverse,  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  inverse,  0,  size);	  System.arraycopy(c,    0,    b,    0,    sqrt,    inverse,    size);    	non-compiled	[CE]  cannot  find  symbol  inverse	22	None	replace
48	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,	  if(loop)    {    if(c[i][index[i]]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,	  if(loop)    {    if(c[i][index[i]]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
50	[BUG]  [BUGGY]  sqrt  =  true;  [CE]  cannot  find  symbol  sqrt  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  sqrt  =  true;  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	sqrt  =  true;	  tmp    =    true;    	non-compiled	[CE]  cannot  find  symbol  sqrt	16	None	replace
51	[BUG]  [BUGGY]  if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }	  loop    =       "[   ";    	non-compiled	[CE]  incompatible  types	19	None	replace
52	[BUG]  [BUGGY]  if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  loop  =   "[ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  loop    =       "[   ";    	non-compiled	[CE]  incompatible  types	19	None	replace
53	[BUG]  [BUGGY]  double  order  =  matrix.getSamples()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  double  order  =  matrix.getSamples()  +  1;  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	double  order  =  matrix.getSamples()  +  1;	  double    order    =    matrix.getSamples();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	31	None	replace
54	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  size,  small);  }  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  size,  small);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  size,  small);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[index[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  small);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  small);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  small);	  System.arraycopy(c,    0,    b,    0,    sqrt,    size);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	4	None	replace
56	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i],  i);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i],  i);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i],  i);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c,    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(c,  0,  l,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  l,  index[i]],  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  l,  index[i]],  0,  size);	  System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  ')'  expected	13	None	replace
58	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c[i][i],  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c[i][i],    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }	  if(loop)    {    if(c[i][index[i]]    <    -1)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
60	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  ==  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  size);  }	  if(loop)    {    if(c[i][index[i]]    <    -1)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    size);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
61	[BUG]  [BUGGY]  double  order  =  matrix.length();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  double  order  =  matrix.length();  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	double  order  =  matrix.length();	  int    order    =    matrix.length()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	5	None	replace
62	[BUG]  [BUGGY]  if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incomparable  types:  boolean  and  int  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop  ==  1)  {  loop  = "[ ";  }  else  {  throw  new  IllegalStateException( " ");  }	  loop    =       "[   ";    	non-compiled	[CE]  incomparable  types:  boolean  and  int	19	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  1,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  1,  index[i]],  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  1,  index[i]],  0,  size);	  System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  ')'  expected	8	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  index[i]);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  index[i]);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  index[i]);	  System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
65	[BUG]  [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  size);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  System.arraycopy(c,  0,  b,  0,  size);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  System.arraycopy(c,  0,  b,  0,  size);  System.arraycopy(c,  0,  r,  index[i]],  0,  size);  }  else  {  System.arraycopy(c,  0,  r,  index[i]],  }	  if(loop)    {    System.arraycopy(c,    0,    b,    0,    index[i]);    System.arraycopy(c,    0,    r,    index[i]],    0,    size);    }    else    {    System.arraycopy(c,    0,    r,    index[i]],    }    	non-compiled	[CE]  ')'  expected	12	None	replace
66	[BUG]  [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  r);  }  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  r);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  small,  r);  }	  loop    =    true;    if(!loop)    {    throw    new    NonPositiveDefiniteMatrixException(c[index[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
67	[BUG]  [BUGGY]  int  order  =  matrix.getSamples().length  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  int  order  =  matrix.getSamples().length  -  1;  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	int  order  =  matrix.getSamples().length  -  1;	  int    order    =    matrix.getSamples()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	7	None	replace
68	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(!loop)  {  for(int  i  =  0;  i  <  size();  ++i)  {  System.arraycopy(c,  0,  b[i][i]);  }	  loop    =    true;    if(loop)    {    for(int    i    =    0;    i    <    size();    ++i)    {    System.arraycopy(c,    0,    b[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  loop  =  BigDecimal.valueOf(small);  [CE]  cannot  find  symbol  BigDecimal  [FE]            AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  BigDecimal.valueOf(small);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  BigDecimal.valueOf(small);	  loop    =    Small.valueOf(small);    	non-compiled	[CE]  cannot  find  symbol  BigDecimal	29	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(c,  0,  d,  index[i]],  0,  size);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  d,  index[i]],  0,  size);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  d,  index[i]],  0,  size);	  System.arraycopy(c,    0,    r,    index[i]],    0,    size);    	non-compiled	[CE]  ')'  expected	13	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(c,  0,  b,  0,  inverse,  small);  [CE]  cannot  find  symbol  inverse  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  System.arraycopy(c,  0,  b,  0,  inverse,  small);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	System.arraycopy(c,  0,  b,  0,  inverse,  small);	  System.arraycopy(c,    0,    b,    0,    sqrt,    inverse,    size);    	non-compiled	[CE]  cannot  find  symbol  inverse	22	None	replace
72	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	  if(loop)    {    if(c[i][index[i]]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
73	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  return  true;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  small,  return  true;  }	  if(loop)    {    if(c[i][index[i]]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
74	[BUG]  [BUGGY]  loop  =  Small.valueOf(short);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  loop  =  Small.valueOf(short);  [BUGGY]        }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	loop  =  Small.valueOf(short);	  loop    =    Small.valueOf(str);    	non-compiled	[CE]  '.class'  expected	30	None	replace
75	[BUG]  [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }    ++r;      [BUGGY]  if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	if(loop)  {  if(c[i][index[i]]!=  -1)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  big);  }	  if(loop)    {    if(c[i][index[i]]!=    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    big);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
