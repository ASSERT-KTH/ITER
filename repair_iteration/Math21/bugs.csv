bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throws NonPositiveDefiniteMatrixException { [FE] AssertionError [CONTEXT] [BUGGY] throws NonPositiveDefiniteMatrixException { [BUGGY]  final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	63	63	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	63	63	2	add	
3	[BUG] [BUGGY] final int order = matrix.getRowDimension(); [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { [BUGGY] final int order = matrix.getRowDimension(); [BUGGY] final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	65	65	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { [BUGGY] [BUGGY] final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	65	65	2	add	
5	[BUG] [BUGGY] final double[][] c = matrix.getData(); [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); [BUGGY] final double[][] c = matrix.getData(); [BUGGY] final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	66	66	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); [BUGGY] [BUGGY] final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	66	66	2	add	
7	[BUG] [BUGGY] final double[][] b = new double[order][order]; [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); [BUGGY] final double[][] b = new double[order][order]; [BUGGY]  int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	67	67	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); [BUGGY] [BUGGY] final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	67	67	2	add	
9	[BUG] [BUGGY] int[] swap= new int[order]; [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; [BUGGY] int[] swap= new int[order]; [BUGGY] int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	69	69	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; [BUGGY] [BUGGY] int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	69	69	2	add	
11	[BUG] [BUGGY] int[] index = new int[order]; [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; [BUGGY] int[] index = new int[order]; [BUGGY] for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	70	70	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; [BUGGY] [BUGGY] int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	70	70	2	add	
13	[BUG] [BUGGY] for (int i = 0; i < order; ++i) { [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; [BUGGY] for (int i = 0; i < order; ++i) { [BUGGY] index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	71	71	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; [BUGGY] [BUGGY] for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	71	71	2	add	
15	[BUG] [BUGGY] index[i] = i; [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { [BUGGY] index[i] = i; [BUGGY] } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	72	72	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { [BUGGY] [BUGGY] index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	72	72	2	add	
17	[BUG] [BUGGY] int r = 0; [FE] AssertionError [CONTEXT] final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } [BUGGY] int r = 0; [BUGGY] for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	75	75	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } [BUGGY] [BUGGY] int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	75	75	2	add	
19	[BUG] [BUGGY] for (boolean loop = true; loop;) { [FE] AssertionError [CONTEXT] final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; [BUGGY] for (boolean loop = true; loop;) { [BUGGY]   swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	76	76	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; [BUGGY] [BUGGY] for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	76	76	2	add	
21	[BUG] [BUGGY] swap[r] = r; [FE] AssertionError [CONTEXT] int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  [BUGGY] swap[r] = r; [BUGGY] for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	79	79	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int[] swap= new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  [BUGGY] [BUGGY] swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	79	79	2	add	
23	[BUG] [BUGGY] for (int i = r + 1; i < order; ++i) { [FE] AssertionError [CONTEXT] int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; [BUGGY] for (int i = r + 1; i < order; ++i) { [BUGGY] int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; [BUGGY] [BUGGY] for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	
25	[BUG] [BUGGY] int ii= index[i]; [FE] AssertionError [CONTEXT] for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { [BUGGY] int ii= index[i]; [BUGGY] int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	81	81	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { [BUGGY] [BUGGY] int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	81	81	2	add	
27	[BUG] [BUGGY] int isi = index[swap[i]]; [FE] AssertionError [CONTEXT] index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; [BUGGY] int isi = index[swap[i]]; [BUGGY] if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	82	82	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] index[i] = i; } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; [BUGGY] [BUGGY] int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	82	82	2	add	
29	[BUG] [BUGGY] if (c[ii][ii] > c[isi][isi]) { [FE] AssertionError [CONTEXT] } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; [BUGGY] if (c[ii][ii] > c[isi][isi]) { [BUGGY] swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	83	83	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; [BUGGY] [BUGGY] if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	83	83	2	add	
31	[BUG] [BUGGY] swap[r] = i; [FE] AssertionError [CONTEXT] int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { [BUGGY] swap[r] = i; [BUGGY] } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	84	84	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int r = 0; for (boolean loop = true; loop;) {  swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { [BUGGY] [BUGGY] swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	84	84	2	add	
33	[BUG] [BUGGY] if (swap[r] != r) { [FE] AssertionError [CONTEXT] for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   [BUGGY] if (swap[r] != r) { [BUGGY] int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	90	90	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = r + 1; i < order; ++i) { int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   [BUGGY] [BUGGY] if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	90	90	2	add	
35	[BUG] [BUGGY] int tmp = index[r]; [FE] AssertionError [CONTEXT] int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { [BUGGY] int tmp = index[r]; [BUGGY] index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	91	91	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int ii= index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { [BUGGY] [BUGGY] int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	91	91	2	add	
37	[BUG] [BUGGY] index[r] = index[swap[r]]; [FE] AssertionError [CONTEXT] int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; [BUGGY] index[r] = index[swap[r]]; [BUGGY] index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	92	92	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; [BUGGY] [BUGGY] index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	92	92	2	add	
39	[BUG] [BUGGY] index[swap[r]] = tmp; [FE] AssertionError [CONTEXT] if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; [BUGGY] index[swap[r]] = tmp; [BUGGY] }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	93	93	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; [BUGGY] [BUGGY] index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	93	93	2	add	
41	[BUG] [BUGGY] int ir = index[r]; [FE] AssertionError [CONTEXT]   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  [BUGGY] int ir = index[r]; [BUGGY] if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	97	97	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  [BUGGY] [BUGGY] int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	97	97	2	add	
43	[BUG] [BUGGY] if (c[ir][ir] < small) { [FE] AssertionError [CONTEXT]  if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; [BUGGY] if (c[ir][ir] < small) { [BUGGY]  if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	98	98	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; [BUGGY] [BUGGY] if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	98	98	2	add	
45	[BUG] [BUGGY] final double sqrt = FastMath.sqrt(c[ir][ir]); [FE] AssertionError [CONTEXT] }   ++r; loop = false; } else {  [BUGGY] final double sqrt = FastMath.sqrt(c[ir][ir]); [BUGGY] b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }   ++r; loop = false; } else {  [BUGGY] [BUGGY] final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	add	
47	[BUG] [BUGGY] b[r][r] = sqrt; [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); [BUGGY] b[r][r] = sqrt; [BUGGY] final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); [BUGGY] [BUGGY] b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	
49	[BUG] [BUGGY] final double inverse= 1 / sqrt; [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; [BUGGY] final double inverse= 1 / sqrt; [BUGGY] for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	123	123	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; [BUGGY] [BUGGY] final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	123	123	2	add	
51	[BUG] [BUGGY] for (int i = r + 1; i < order; ++i) { [FE] AssertionError [CONTEXT]  ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; [BUGGY] for (int i = r + 1; i < order; ++i) { [BUGGY] final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; [BUGGY] [BUGGY] for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	
53	[BUG] [BUGGY] final int ii = index[i]; [FE] AssertionError [CONTEXT] ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { [BUGGY] final int ii = index[i]; [BUGGY] final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	125	125	2	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { [BUGGY] [BUGGY] final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	125	125	2	add	
55	[BUG] [BUGGY] final double e = inverse * c[ii][ir]; [FE] AssertionError [CONTEXT] loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; [BUGGY] final double e = inverse * c[ii][ir]; [BUGGY] b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; [BUGGY] [BUGGY] final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	
57	[BUG] [BUGGY] b[i][r] = e; [FE] AssertionError [CONTEXT] } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; [BUGGY] b[i][r] = e; [BUGGY] c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; [BUGGY] [BUGGY] b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }   [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	
59	[BUG] [BUGGY] c[ii][ii] -= e * e; [FE] AssertionError [CONTEXT] } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; [BUGGY] c[ii][ii] -= e * e; [BUGGY] for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; [BUGGY] [BUGGY] c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	
61	[BUG] [BUGGY] for (int j = r + 1; j < i; ++j) { [FE] AssertionError [CONTEXT]  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; [BUGGY] for (int j = r + 1; j < i; ++j) { [BUGGY] final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; [BUGGY] [BUGGY] for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	
63	[BUG] [BUGGY] final int ij = index[j]; [FE] AssertionError [CONTEXT]  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { [BUGGY] final int ij = index[j]; [BUGGY] final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	130	130	2	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { [BUGGY] [BUGGY] final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	130	130	2	add	
65	[BUG] [BUGGY] final double f = c[ii][ij] - e * b[j][r]; [FE] AssertionError [CONTEXT] final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; [BUGGY] final double f = c[ii][ij] - e * b[j][r]; [BUGGY] c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	131	131	2	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; [BUGGY] [BUGGY] final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	131	131	2	add	
67	[BUG] [BUGGY] c[ii][ij] = f; [FE] AssertionError [CONTEXT] b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; [BUGGY] c[ii][ij] = f; [BUGGY] c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	132	132	2	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; [BUGGY] [BUGGY] c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	132	132	2	add	
69	[BUG] [BUGGY] c[ij][ii] = f; [FE] AssertionError [CONTEXT] final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [BUGGY] c[ij][ii] = f; [BUGGY] } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	133	133	2	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [BUGGY] [BUGGY] c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	133	133	2	add	
71	[BUG] [BUGGY] loop = ++r < order; [FE] AssertionError [CONTEXT] c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  [BUGGY] loop = ++r < order; [BUGGY] } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	138	138	2	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  [BUGGY] [BUGGY] loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	138	138	2	add	
73	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	140	140	2	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } }  loop = ++r < order; } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	140	140	2	add	
75	[BUG] [BUGGY] rank = r; [FE] AssertionError [CONTEXT] c[ij][ii] = f; } }  loop = ++r < order; } }  [BUGGY] rank = r; [BUGGY] root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	143	143	2	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] c[ij][ii] = f; } }  loop = ++r < order; } }  [BUGGY] [BUGGY] rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	143	143	2	add	
77	[BUG] [BUGGY] root = MatrixUtils.createRealMatrix(order, r); [FE] AssertionError [CONTEXT] } }  loop = ++r < order; } }  rank = r; [BUGGY] root = MatrixUtils.createRealMatrix(order, r); [BUGGY] for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	144	144	2	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }  loop = ++r < order; } }  rank = r; [BUGGY] [BUGGY] root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	144	144	2	add	
79	[BUG] [BUGGY] for (int i = 0; i < order; ++i) { [FE] AssertionError [CONTEXT] }  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); [BUGGY] for (int i = 0; i < order; ++i) { [BUGGY] for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	145	145	2	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); [BUGGY] [BUGGY] for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	145	145	2	add	
81	[BUG] [BUGGY] for (int j = 0; j < r; ++j) { [FE] AssertionError [CONTEXT]  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { [BUGGY] for (int j = 0; j < r; ++j) { [BUGGY] root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { [BUGGY] [BUGGY] for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	146	146	2	add	
83	[BUG] [BUGGY] root.setEntry(index[i], j, b[i][j]); [FE] AssertionError [CONTEXT]  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { [BUGGY] root.setEntry(index[i], j, b[i][j]); [BUGGY] } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	147	147	2	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  loop = ++r < order; } }  rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { [BUGGY] [BUGGY] root.setEntry(index[i], j, b[i][j]); } } } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	147	147	2	add	
86	[BUG] [BUGGY] return root; [FE] AssertionError [CONTEXT] public RealMatrix getRootMatrix() { [BUGGY] return root; [BUGGY] } [CLASS] RectangularCholeskyDecomposition [METHOD] getRootMatrix [RETURN_TYPE] RealMatrix  [VARIABLES] RealMatrix matrix root int i ii ij ir isi j order r rank tmp boolean  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	160	160	2	replace	
87	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public RealMatrix getRootMatrix() { [BUGGY] [BUGGY] return root; } [CLASS] RectangularCholeskyDecomposition [METHOD] getRootMatrix [RETURN_TYPE] RealMatrix  [VARIABLES] RealMatrix matrix root int i ii ij ir isi j order r rank tmp boolean  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	160	160	2	add	
88	[BUG] [BUGGY] if (r == 0) { [FE] AssertionError [CONTEXT] if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { [BUGGY] if (r == 0) { [BUGGY] throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	100	100	2	replace	
89	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; }  int ir = index[r]; if (c[ir][ir] < small) { [BUGGY] [BUGGY] if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	100	100	2	add	
90	[BUG] [BUGGY] for (int i = r; i < order; ++i) { [FE] AssertionError [CONTEXT]  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  [BUGGY] for (int i = r; i < order; ++i) { [BUGGY] if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	105	105	2	replace	
91	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  [BUGGY] [BUGGY] for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	105	105	2	add	
92	[BUG] [BUGGY] if (c[index[i]][index[i]] < -small) { [FE] AssertionError [CONTEXT]  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { [BUGGY] if (c[index[i]][index[i]] < -small) { [BUGGY]   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; loop = false; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	106	106	2	replace	
93	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }  for (int i = r; i < order; ++i) { [BUGGY] [BUGGY] if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; loop = false; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	106	106	2	add	
94	[BUG] [BUGGY] ++r; [FE] AssertionError [CONTEXT] for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   [BUGGY] ++r; [BUGGY] loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	
95	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   [BUGGY] [BUGGY] ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	
96	[BUG] [BUGGY] loop = false; [FE] AssertionError [CONTEXT] if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; [BUGGY] loop = false; [BUGGY]  } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	replace	
97	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (c[index[i]][index[i]] < -small) {   throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } }   ++r; [BUGGY] [BUGGY] loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	116	116	2	add	
