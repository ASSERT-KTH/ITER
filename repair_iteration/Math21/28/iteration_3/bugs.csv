bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][r];  b[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][ir];    b[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	19	3	replace
2	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[ii][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][r];  b[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][ir];    b[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	19	3	replace
3	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][r];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  b[ii][r];	  final    double    e    =    inverse    *    b[ii][ij];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	21	3	replace
4	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][r];  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][r];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][r];	  final    double    e    =    inverse    *    b[ii][ij];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	21	3	replace
5	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][sqrt];  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][sqrt];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][sqrt];	  final    double    e    =    inverse    *    b[ii][ij];    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
6	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    final  double  e  =  inverse  *  sqrt  /  c[ii][ir];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	15	None	add
7	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  Final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [CE]  not  a  statement  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  Final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    Final  double  e  =  inverse  *  sqrt  /  c[ii][ir];	  	non-compiled	[CE]  not  a  statement	15	None	add
8	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	add
9	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][l];  b[i][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][l];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][l];  b[i][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	add
10	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  final  double  e  =  inverse  *  b[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  final  double  e  =  inverse  *  b[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    b[ii][ii];    final  double  e  =  inverse  *  b[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	17	None	add
11	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  Final  double  e  =  inverse  *  b[ii][ii];  [CE]  not  a  statement  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  Final  double  e  =  inverse  *  b[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    b[ii][ii];    Final  double  e  =  inverse  *  b[ii][ii];	  	non-compiled	[CE]  not  a  statement	17	None	add
12	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    final  double  e  =  inverse  *  sqrt  *  b[ii][ir];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	6	None	add
13	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  Final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  Final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    Final  double  e  =  inverse  *  sqrt  *  b[ii][ir];	  	non-compiled	[CE]  not  a  statement	6	None	add
14	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	8	None	add
15	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][l];  c[ii][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][l];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][l];  c[ii][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	8	None	add
16	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][s];  c[ii][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][s];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][s];  c[ii][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	8	None	add
17	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;	  final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    final    double    e    =    inverse    *    sqrt    *    c[ii][ir].;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
18	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].sqrt;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  c[ii][ir].sqrt;	  final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    final    double    e    =    inverse    *    sqrt    *    c[ii][ir].;    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
19	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ii];    final  double  e  =  inverse  *  sqrt  *  c[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	3	None	add
20	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  Final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  Final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ii];    Final  double  e  =  inverse  *  sqrt  *  c[ii][ii];	  	non-compiled	[CE]  not  a  statement	3	None	add
21	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  b[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  /  b[ii][ir];	  final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	7	3	replace
22	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  b[ii][ir];  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  b[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  /  b[ii][ir];	  final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	7	3	replace
23	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  1  *  sqrt  /  c[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  1  *  sqrt  /  c[ii][ir];	  final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
24	[BUG]  [BUGGY]  final  double  e  =  1  *  sqrt  /  c[ii][ir];  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  1  *  sqrt  /  c[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  1  *  sqrt  /  c[ii][ir];	  final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ii];	  final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	23	3	replace
26	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ii];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ii];	  final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	23	3	replace
27	[BUG]  [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii][ii];  [CE]  cannot  find  symbol  e  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	c[ii][ii]  -=  inverse  *  c[ii][ii];	  final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    	non-compiled	[CE]  cannot  find  symbol  e	23	None	replace
28	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	25	None	add
29	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][id];  b[i][ii]  -=  e  *  c[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][id];  b[i][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][id];  b[i][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	25	None	add
30	[BUG]  [BUGGY]  b[i][ii]  -=  inverse  *  c[ii][r];  [CE]  cannot  find  symbol  e  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  b[i][ii]  -=  inverse  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	b[i][ii]  -=  inverse  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    	non-compiled	[CE]  cannot  find  symbol  e	13	None	replace
31	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt[ii][ir];  [CE]  array  required,  but  double  found  [FE]        AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt[ii][ir];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt[ii][ir];	  final    double    e    =    inverse    *    b[ii][ir];    final    double    e    =    inverse    *    b[ii][ir];    	non-compiled	[CE]  array  required,  but  double  found	1	None	replace
32	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	22	None	add
33	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][id];  c[ii][ii]  -=  e  *  c[ii][ii];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][id];  c[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][id];  c[ii][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	22	None	add
34	[BUG]  [BUGGY]  b[i][ii]  -=  inverse  *  c[ii][ii];  [CE]  cannot  find  symbol  e  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  b[i][ii]  -=  inverse  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	b[i][ii]  -=  inverse  *  c[ii][ii];	  final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    	non-compiled	[CE]  cannot  find  symbol  e	26	None	replace
35	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ii];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  *  b[ii][ii];	  final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	7	3	replace
36	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ii];  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ii];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  b[ii][ii];	  final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	7	3	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii]  +  1;  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii]  +  1;	  final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	26	3	replace
38	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii]  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii]  +  1;  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii]  +  1;	  final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	26	3	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	13	3	replace
40	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	13	3	replace
41	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ij];  b[i][ii]  -=  e  *  c[ii][r];  [CE]  cannot  find  symbol  ij  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ij];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ij];  b[i][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    	non-compiled	[CE]  cannot  find  symbol  ij	13	None	replace
42	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;	  final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    final    double    e    =    inverse    *    sqrt    *    c[ii][ir].;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
43	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii]  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii]	  	non-compiled	[CE]  ';'  expected	22	None	add
44	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][s];  b[i][ii]  -=  e  *  c[ii][r];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  final  double  e  =  inverse  *  c[ii][s];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][r];    b[i][ii]    -=    e    *    c[ii][r];    final  double  e  =  inverse  *  c[ii][s];  b[i][ii]  -=  e  *  c[ii][r];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	add
45	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]                AssertionError      [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];	  final    double    e    =    inverse    *    c[ii][ir];    b[ii][ii]    -=    e    *    c[ii][ij];    	non-compiled	[CE]  cannot  find  symbol  ij	19	None	replace
46	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ii];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  /  c[ii][ii];	  final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
47	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ii];  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ii];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  /  c[ii][ii];	  final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
48	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ij];  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  /  c[ii][ij];	  final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    	non-compiled	[CE]  cannot  find  symbol  ij	16	None	replace
49	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir].;  b[i][ii]  -=  e  *  c[ii][ii];  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir].;  b[i][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][ir].;  b[i][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  <identifier>  expected	25	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	9	3	replace
51	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	9	3	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	9	3	replace
53	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][r];	  final    double    e    =    inverse    *    c[ii][r];    c[ii][ii]    -=    e    *    c[ii][r];    	compilable	  [FE]  AssertionError  	9	3	replace
54	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  final  double  e  =  inverse  *  sqrt  *  c[ii][ii].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  final  double  e  =  inverse  *  sqrt  *  c[ii][ii].;  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ii];    final  double  e  =  inverse  *  sqrt  *  c[ii][ii].;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
55	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  final  double  e  =  inverse  *  b[ii][ii].;  [CE]  <identifier>  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  final  double  e  =  inverse  *  b[ii][ii].;  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    b[ii][ii];    final  double  e  =  inverse  *  b[ii][ii].;	  	non-compiled	[CE]  <identifier>  expected	17	None	add
56	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir].;  c[ii][ii]  -=  e  *  c[ii][ii];  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  final  double  e  =  inverse  *  c[ii][ir].;  c[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]      final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ii];    final  double  e  =  inverse  *  c[ii][ir].;  c[ii][ii]  -=  e  *  c[ii][ii];	  	non-compiled	[CE]  <identifier>  expected	22	None	add
57	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  final  double  e  =  inverse  *  sqrt  /  c[ii][ir].;  [CE]  <identifier>  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  final  double  e  =  inverse  *  sqrt  /  c[ii][ir].;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    /    c[ii][ir];    final  double  e  =  inverse  *  sqrt  /  c[ii][ir].;	  	non-compiled	[CE]  <identifier>  expected	15	None	add
58	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];      [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    b[ii][ir];    final  double  e  =  inverse  *  sqrt  *  b[ii][ir].;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
