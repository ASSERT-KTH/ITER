bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  final  double  e  =  inverse  *  b[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  final  double  e  =  inverse  *  b[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    b[ii][ir];    final  double  e  =  inverse  *  b[ii][ir];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	6	None	add
2	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  Final  double  e  =  inverse  *  b[ii][ir];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  Final  double  e  =  inverse  *  b[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    b[ii][ir];    Final  double  e  =  inverse  *  b[ii][ir];	  	non-compiled	[CE]  not  a  statement	6	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	10	3	replace
4	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ii];    	compilable	  [FE]  AssertionError  	10	3	replace
5	[BUG]  [BUGGY]  final  double  inverse  =  inverse  *  sqrt  *  c[ii][ii];  [CE]  variable  inverse  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  inverse  =  inverse  *  sqrt  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  inverse  =  inverse  *  sqrt  *  c[ii][ii];	      final    double    inverse    =    inverse    *    c[ii][ii];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	9	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  *  b[ii][ir];	  final    double    e    =    inverse    *    b[ii][ir];    	compilable	  [FE]  AssertionError  	7	3	replace
7	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  b[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  *  b[ii][ir];	  final    double    e    =    inverse    *    b[ii][ir];    	compilable	  [FE]  AssertionError  	7	3	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];	      final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	3	3	replace
9	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][r];  c[ii][ii]  -=  e  *  c[ii][r];	      final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	3	3	replace
10	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    final  double  e  =  inverse  *  sqrt  *  c[ii][ir];	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	4	None	add
11	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  Final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  Final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    Final  double  e  =  inverse  *  sqrt  *  c[ii][ir];	  	non-compiled	[CE]  not  a  statement	4	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];	      final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	2	3	replace
13	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][r];  b[i][ii]  -=  e  *  c[ii][r];	      final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	2	3	replace
14	[BUG]  [BUGGY]  final  double  inverse  =  inverse  *  sqrt  *  c[ii][ir];  [CE]  variable  inverse  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  inverse  =  inverse  *  sqrt  *  c[ii][ir];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  inverse  =  inverse  *  sqrt  *  c[ii][ir];	      final    double    inverse    =    inverse    *    c[ii][ir];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	8	None	replace
15	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  sqrt  /  c[ii][ir];	  final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	replace
16	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  /  c[ii][ir];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  sqrt  /  c[ii][ir];	  final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	replace
17	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  b[ii][ii];	      final    double    e    =    inverse    *    c[ii][ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
18	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][ii];	      final    double    e    =    inverse    *    c[ii][ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
19	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]            AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[ii][ii]  -=  e  *  c[ii][ij];	      final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ij];    	non-compiled	[CE]  cannot  find  symbol  ij	3	None	replace
20	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  b[i][ii]  -=  e  *  c[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  b[i][ii]  -=  e  *  c[ii][ij];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][ir];  b[i][ii]  -=  e  *  c[ii][ij];	      final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ij];    	non-compiled	[CE]  cannot  find  symbol  ij	2	None	replace
21	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  b[ii][ij];  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  b[ii][ij];	  final    double    e    =    inverse    *    b[ii][ir];    	non-compiled	[CE]  cannot  find  symbol  ij	7	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	3	3	replace
23	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  c[ii][ii]  -=  e  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ir];    c[ii][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	3	3	replace
24	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;  [BUGGY]    b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final    double    e    =    inverse    *    sqrt    *    c[ii][ir];    final  double  e  =  inverse  *  sqrt  *  c[ii][ir].;	  	non-compiled	[CE]  <identifier>  expected	4	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	add	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	2	3	replace
26	[BUG]  [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];    [BUGGY]  final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];  [BUGGY]    final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	126	126	2	replace	final  double  e  =  inverse  *  c[ii][ir];  b[i][ii]  -=  e  *  c[ii][ii];	      final    double    e    =    inverse    *    c[ii][ir];    b[i][ii]    -=    e    *    c[ii][ij];    	compilable	  [FE]  AssertionError  	2	3	replace
