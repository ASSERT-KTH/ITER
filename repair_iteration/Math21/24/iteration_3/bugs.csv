bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  sqrt);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  sqrt);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  sqrt);	  b[r][r]    =    c    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	31	None	replace
2	[BUG]  [BUGGY]  b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  scale);  [CE]  cannot  find  symbol  scale  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  scale);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]  =  c  *  FastMath.sqrt(c[ir][ir],  scale);	  b[r][r]    =    c    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  cannot  find  symbol  scale	31	None	replace
3	[BUG]  [BUGGY]  final  double  b[r][r]  =  sqrt  +  1;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  b[r][r]  =  sqrt  +  1;	  b[r][r]    =    sqrt    +    1;    final    double    b[r][r]    =    sqrt    +    1;    	non-compiled	[CE]  ']'  expected	16	None	replace
4	[BUG]  [BUGGY]  final  double  b[r][r]  =  sqrt;  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  b[r][r]  =  sqrt;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  b[r][r]  =  sqrt;	  b[r][r]    =    sqrt    +    1;    final    double    b[r][r]    =    sqrt    +    1;    	non-compiled	[CE]  ']'  expected	16	None	replace
5	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  small);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	11	None	replace
6	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	11	None	replace
7	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  *  sqrt,  inverse);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  *  sqrt,  inverse);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]  *  sqrt,  inverse);	  final    double    order    =    FastMath.sqrt(c[ir][ir]    *    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	13	None	replace
8	[BUG]  [BUGGY]  if(sqrt  >  0)  {  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[i  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  if(sqrt  >  0)  {  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[i  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	if(sqrt  >  0)  {  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[i	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  ']'  expected	9	None	replace
9	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ii][ij]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ii][ij]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ii][ij]);	  double    order    =    FastMath.sqrt(c[ir][ij]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	23	None	replace
10	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ij]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ij]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ij]);	  double    order    =    FastMath.sqrt(c[ir][ij]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	23	None	replace
11	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(small);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(small);	          double    order    =    FastMath.sqrt(sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	18	None	replace
12	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  ==  0)  {  return  sqrt;  }  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  ==  0)  {  return  sqrt;  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  ==  0)  {  return  sqrt;  }	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    if(r    ==    0)    {    return    sqrt;    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	19	None	replace
13	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  <  0)  {  return  sqrt;  }  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                  AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  <  0)  {  return  sqrt;  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  <  0)  {  return  sqrt;  }	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    if(r    ==    0)    {    return    sqrt;    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	19	None	replace
14	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[i][ir]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[i][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[i][ir]);	  final    double    order    =    FastMath.sqrt(c[i][ir]);    if(order    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	4	2	add
16	[BUG]  [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	4	2	add
17	[BUG]  [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  final  double[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  final  double[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    final  double[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);	  	non-compiled	[CE]  ']'  expected	4	None	add
18	[BUG]  [BUGGY]  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir].);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
19	[BUG]  [BUGGY]  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].;	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir].);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
20	[BUG]  [BUGGY]  b[r][l]  =  sqrt  +  1;  [CE]  cannot  find  symbol  l  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][l]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][l]  =  sqrt  +  1;	  b[r][r]    =    sqrt    +    1;    b[r][l]    =    sqrt    +    1;    	non-compiled	[CE]  cannot  find  symbol  l	20	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;	  	compilable	  [FE]  AssertionError  	14	2	add
22	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;	  	compilable	  [FE]  AssertionError  	14	2	add
23	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  final  double[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  final  double[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    final  double[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;	  	non-compiled	[CE]  ']'  expected	14	None	add
24	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  [CE]  cannot  find  symbol  l  [FE]        AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][l]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  l	14	None	add
25	[BUG]  [BUGGY]  final  double[][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double[][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double[][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    final    double[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  ']'  expected	10	None	replace
26	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ir]);	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	25	None	replace
27	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[0][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                  AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[0][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[0][ir]);	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	25	None	replace
28	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  /  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  /  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]  /  small);	  final    double    order    =    FastMath.sqrt(c[ir][ir]    /    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
29	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c,  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c,  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c,  small);	  final    double    order    =    FastMath.sqrt(small);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	7	None	replace
30	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  inverse);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  inverse);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ir][ir],  inverse);	  double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	replace
31	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  sqrt,  inverse);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  sqrt,  inverse);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ir][ir],  sqrt,  inverse);	  double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	replace
32	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ii][ij]);	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	17	None	replace
33	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  -  small,  sqrt);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  -  small,  sqrt);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]  -  small,  sqrt);	  final    double    order    =    FastMath.sqrt(c[ir][ir]    -    small);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	30	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]        =        sqrt        *        FastMath.sqrt(c[ir][ir]);        b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	8	2	add
35	[BUG]  [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        *        FastMath.sqrt(c[ir][ir]);        b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	8	2	add
36	[BUG]  [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][i  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][i  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        *        FastMath.sqrt(c[ir][ir]);        b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][i	  	non-compiled	[CE]  ']'  expected	8	None	add
37	[BUG]  [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        *        FastMath.sqrt(c[ir][ir]);        b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][	  	non-compiled	[CE]  ']'  expected	8	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  +  2;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]  =  sqrt  +  2;	  b[r][r]    =    sqrt    +    1;    b[r][r]    =    sqrt    +    1;    	compilable	  [FE]  AssertionError  	15	3	replace
39	[BUG]  [BUGGY]  b[r][r]  =  sqrt  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  +  2;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]  =  sqrt  +  2;	  b[r][r]    =    sqrt    +    1;    b[r][r]    =    sqrt    +    1;    	compilable	  [FE]  AssertionError  	15	3	replace
40	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[i][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[i][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[i][ir]);	  final    double    order    =    FastMath.sqrt(c[i][ir]);    if(order    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	replace
41	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ij]);  if(r  ==  0)  {  return  sqrt;  }  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ij]);  if(r  ==  0)  {  return  sqrt;  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ij]);  if(r  ==  0)  {  return  sqrt;  }	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    if(r    ==    0)    {    return    sqrt;    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	19	None	replace
42	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ij]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ij]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ij]);	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	25	None	replace
43	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    if(order    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	24	None	replace
44	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  *  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]  *  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]  *  small);	  final    double    order    =    FastMath.sqrt(c[ir][ir]    -    small);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	30	None	replace
45	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  scale);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  scale);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ir][ir],  scale);	  double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	replace
46	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r],  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r],  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r],  sqrt  +  1;  b[r][r]  =  sqrt  +  1;	  	non-compiled	[CE]  not  a  statement	14	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  2;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  2;	  	compilable	  [FE]  AssertionError  	14	2	add
48	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  2;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  2;	  	compilable	  [FE]  AssertionError  	14	2	add
49	[BUG]  [BUGGY]  b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
50	[BUG]  [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  final  double  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  final  double  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    final  double  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);	  	non-compiled	[CE]  ']'  expected	4	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	4	2	add
52	[BUG]  [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  	compilable	  [FE]  AssertionError  	4	2	add
53	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[0][ir],  sqrt);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[0][ir],  sqrt);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[0][ir],  sqrt);	  double    order    =    FastMath.sqrt(c[0][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	28	None	replace
54	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  return  sqrt;  }  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  return  sqrt;  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ii][ij]);  if(order  ==  0)  {  return  sqrt;  }	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    if(order    ==    0)    {    return    sqrt;    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	26	None	replace
55	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ii][ij],  sqrt);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ii][ij],  sqrt);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ii][ij],  sqrt);	  double    order    =    FastMath.sqrt(c[ir][ij]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	23	None	replace
56	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(symbol);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(symbol);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(symbol);	          double    order    =    FastMath.sqrt(sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	18	None	replace
57	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[0][ir],  sqrt);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[0][ir],  sqrt);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[0][ir],  sqrt);	  final    double    order    =    FastMath.sqrt(c[0][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	29	None	replace
58	[BUG]  [BUGGY]  b[i][r]  =  c  *  FastMath.sqrt(c[ir][ir]);  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[i][r]  =  c  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[i][r]  =  c  *  FastMath.sqrt(c[ir][ir]);	  b[r][r]    =    c    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  cannot  find  symbol  i	31	None	replace
59	[BUG]  [BUGGY]  b[ir][r]  =  c  *  FastMath.sqrt(c[ir][ir]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[ir][r]  =  c  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[ir][r]  =  c  *  FastMath.sqrt(c[ir][ir]);	  b[r][r]    =    c    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
60	[BUG]  [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir].);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir].);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]    =    sqrt    /    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  /  FastMath.sqrt(c[ir][ir].);	  	non-compiled	[CE]  <identifier>  expected	4	None	add
61	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ir][ir],  small);	  double    order    =    FastMath.sqrt(c[ir][ir],    sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	replace
62	[BUG]  [BUGGY]  final  double  order  =  fastMath.sqrt(c[ii][ir]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  fastMath.sqrt(c[ii][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  fastMath.sqrt(c[ii][ir]);	          final    double    order    =    fastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	3	None	replace
63	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c,  sqrt);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c,  sqrt);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c,  sqrt);	          double    order    =    FastMath.sqrt(sqrt);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	18	None	replace
64	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[0][sqrt]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[0][sqrt]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[0][sqrt]);	  double    order    =    FastMath.sqrt(c[0][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	28	None	replace
65	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqlt  +  1;  b[r][r]  =  sqrt  +  1;  [CE]  cannot  find  symbol  sqlt  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][r]  =  sqlt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqlt  +  1;  b[r][r]  =  sqrt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  sqlt	14	None	add
66	[BUG]  [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [CE]  cannot  find  symbol  l  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    +    1;    b[r][r]  =  sqrt  +  1;  b[r][l]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        +        1;        b[r][r]    =    sqrt    +    1;    b[r][l]  =  sqrt  +  1;  b[r][r]  =  sqrt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  l	14	None	add
67	[BUG]  [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[r][r]        =        sqrt        *        FastMath.sqrt(c[ir][ir]);        b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]	  	non-compiled	[CE]  ')'  expected	8	None	add
68	[BUG]  [BUGGY]  final  double[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double[r][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir]);	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    final    double[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  ']'  expected	10	None	replace
69	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[i][ir]);  if(r  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[i][ir]);  if(r  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[i][ir]);  if(r  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  final    double    order    =    FastMath.sqrt(c[i][ir]);    if(order    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	replace
70	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  >=  0)  {  return  sqrt;  }  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  >=  0)  {  return  sqrt;  }  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  r  =  FastMath.sqrt(c[ii][ir]);  if(r  >=  0)  {  return  sqrt;  }	  final    double    r    =    FastMath.sqrt(c[ir][ir]);    if(r    ==    0)    {    return    sqrt;    }    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	19	None	replace
71	[BUG]  [BUGGY]  double  order  =  FastMath.sqrt(c[ii][0]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  double  order  =  FastMath.sqrt(c[ii][0]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	double  order  =  FastMath.sqrt(c[ii][0]);	  double    order    =    FastMath.sqrt(c[ii][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	27	None	replace
72	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(matrix);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(matrix);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(matrix);	  final    double    order    =    FastMath.sqrt(small);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	7	None	replace
73	[BUG]  [BUGGY]  b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);  [BUGGY]      final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	b[i][r]  =  sqrt  *  FastMath.sqrt(c[ir][ir].);	  b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir]);    b[r][r]    =    sqrt    *    FastMath.sqrt(c[ir][ir].);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
74	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][0]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][0]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	final  double  order  =  FastMath.sqrt(c[ii][0]);	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	17	None	replace
