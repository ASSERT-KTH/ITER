bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
47	[BUG] [BUGGY] b[r][r] = sqrt; [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); [BUGGY] b[r][r] = sqrt; [BUGGY] final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   ++r; loop = false; } else {  final double sqrt = FastMath.sqrt(c[ir][ir]); [BUGGY] [BUGGY] b[r][r] = sqrt; final double inverse= 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; [CLASS] RectangularCholeskyDecomposition [METHOD] <init> [RETURN_TYPE] RealMatrix,double)  RealMatrix matrix double small [VARIABLES] double[][] b c int[] index swap boolean loop RealMatrix matrix root int i ii ij ir isi j order r rank tmp double e f inverse small sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	122	122	2	add	
