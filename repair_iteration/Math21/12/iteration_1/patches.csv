bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
3	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
5	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
6	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
8	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  >  expected	6	None	add
9	[BUG]  [BUGGY]  int  c  =  index[swap[i]];  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  index[swap[i]];  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  index[swap[i]];	      int    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  double  c  =  matrix[swap[i]];  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  double  c  =  matrix[swap[i]];  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix[swap[i]];	      int    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  ']'  expected	3	None	replace
12	[BUG]  [BUGGY]  int  c  =  matrix.get(swap  +  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.get(swap  +  1);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(swap  +  1);	      int    c    =    matrix.get(swap);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  double  c  =  matrix.get(swap);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  double  c  =  matrix.get(swap);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix.get(swap);	      int    c    =    matrix.get(swap);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  r  +  1;  i!=  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
15	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i!=  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  r  +  1;  i  >=  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
17	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  >=  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
18	[BUG]  [BUGGY]  int  c  =  matrix.get(swap,  r  +  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.get(swap,  r  +  1);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(swap,  r  +  1);	      int    c    =    matrix.get(swap,    r);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  int  c  =  matrix.get(index,  r);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.get(index,  r);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(index,  r);	      int    c    =    matrix.get(swap,    r);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  int  c  =  matrix.getC(swap);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.getC(swap);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(swap);	      int    c    =    matrix.getC(r);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
21	[BUG]  [BUGGY]  int  c  =  matrix.getC(loop);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.getC(loop);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(loop);	      int    c    =    matrix.getC(r);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  int  c  =  matrix.getC()  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.getC()  +  1;  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC()  +  1;	      int    c    =    matrix.getC();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition();  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition();	      int    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(root);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(root);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(root);	      int    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	2	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    0;    ++i)    {    for(int  i  =  r  +  1;  i  <  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
27	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  For(int  i  =  r  +  1;  i  <  0;  ++i)  {  [CE]  '.class'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  For(int  i  =  r  +  1;  i  <  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    0;    ++i)    {    For(int  i  =  r  +  1;  i  <  0;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	4	None	add
28	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  i  =  r  +  1;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  i  =  r  +  1;  i  <  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int  i  =  r  +  1;  i  <  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
29	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	2	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  ']'  expected	3	None	replace
31	[BUG]  [BUGGY]  int  c  =  matrix.get(r,  swap);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.get(r,  swap);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(r,  swap);	      int    c    =    matrix.get(swap,    r);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  int  c  =  matrix.getC(root);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.getC(root);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(root);	      int    c    =    matrix.getC(r);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	1	None	replace
34	[BUG]  [BUGGY]  int  c  =  matrix[swap[i]]  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix[swap[i]]  +  1;  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix[swap[i]]  +  1;	      int    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  int  c  =  matrix.get(loop,  r);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.get(loop,  r);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(loop,  r);	      int    c    =    matrix.get(swap,    r);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
37	[BUG]  [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	7	2	replace
38	[BUG]  [BUGGY]  int  c  =  root.getC();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  root.getC();  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  root.getC();	      int    c    =    matrix.getC();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
39	[BUG]  [BUGGY]  double  c  =  matrix.calculateClone();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  double  c  =  matrix.calculateClone();  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix.calculateClone();	      int    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(small);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(small);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(small);	      int    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(root);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(root);  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getCholeskyDecomposition(root);	      int    c    =    matrix.getC(r);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  0;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  for(int  i  =  index  +  1;  i  <  0;  ++i)  {  [BUGGY]    int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  index  +  1;  i  <  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
43	[BUG]  [BUGGY]  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;    [BUGGY]  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]    for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	      for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	2	None	replace
