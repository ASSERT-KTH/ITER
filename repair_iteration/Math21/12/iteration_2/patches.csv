bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    	non-compiled	[CE]  ']'  expected	29	None	replace
2	[BUG]  [BUGGY]  int  i  =  r  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  i  =  r  +  1;  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  i  =  r  +  1;	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	For(int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    For(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    >=    0;    ++i)    {    for(int  i  =  r  +  1;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
5	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    >=    0;    ++i)    {    for(int  i  =  r  +  1;  i!=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
6	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >>  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >>  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    >=    0;    ++i)    {    for(int  i  =  r  +  1;  i  >>  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
7	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
8	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	2	None	add
9	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  >  expected	2	None	add
10	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(swap);	  int    c    =    matrix.calculateCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
11	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap,  root);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap,  root);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(swap,  root);	  int    c    =    matrix.calculateCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
12	[BUG]  [BUGGY]  int  c  =  matrix.get(r,  index);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(r,  index);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(r,  index);	  int    c    =    matrix.get(r,    swap);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  int  c  =  matrix.get(index,  swap);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(index,  swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(index,  swap);	  int    c    =    matrix.get(r,    swap);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  ']'  expected	30	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
16	[BUG]  [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  For(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  For(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    For(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	36	None	add
17	[BUG]  [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  int  i  =  0  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    int  i  =  0  +  1;  i  <  swap.length;  ++i)  {	  	non-compiled	[CE]  >  expected	36	None	add
18	[BUG]  [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r.length  -  2;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r.length  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  swap.length  +  1;  i  <  r.length  -  2;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  0;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  0;  i  <  swap.length;  ++i)  {	  for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	37	3	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  swap.length;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  0;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  0;  i  <  swap.length;  ++i)  {	  for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  AssertionError  	37	3	replace
21	[BUG]  [BUGGY]  int  i  =  r  +  1;  i  <  0;  ++i)  {  [CE]  illegal  start  of  type  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  i  =  r  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  i  =  r  +  1;  i  <  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    i    =    r    +    1;    i    <    0;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
22	[BUG]  [BUGGY]  int  i  =  r  +  1;  ++i)  {  [CE]  ';'  expected  [FE]              NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  i  =  r  +  1;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  i  =  r  +  1;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    i    =    r    +    1;    i    <    0;    ++i)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
23	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  +  1;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  swap.length  +  1;  i  <  r  +  1;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
24	[BUG]  [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  +  1;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  +  1;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  swap.length  +  1;  i  <  r  +  1;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
25	[BUG]  [BUGGY]  if(loop)  {  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
26	[BUG]  [BUGGY]  int  c  =  matrix.get(index,  r  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(index,  r  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(index,  r  +  1);	  int    c    =    matrix.get(swap,    r    +    1);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  int  c  =  index[swap[i]]  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  index[swap[i]]  +  1;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  index[swap[i]]  +  1;	  int    c    =    index[swap[i]];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  int  c  =  index[swap[i]]  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  index[swap[i]]  -  1;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  index[swap[i]]  -  1;	  int    c    =    index[swap[i]];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  swap.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	26	3	replace
30	[BUG]  [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  0;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  swap.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    for(int    i    =    r    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	26	3	replace
31	[BUG]  [BUGGY]  int  c  =  matrix.getC(swap,  r);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getC(swap,  r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(swap,  r);	  int    c    =    matrix.getC(swap);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
32	[BUG]  [BUGGY]  int  c  =  matrix.getC(swap  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getC(swap  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(swap  +  1);	  int    c    =    matrix.getC(swap);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
33	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(r);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(r);	  int    c    =    matrix.calculateCholeskyDecomposition(small);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
34	[BUG]  [BUGGY]  int  c[i][i]  =  b[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c[i][i]  =  b[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c[i][i]  =  b[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	  int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	43	None	replace
35	[BUG]  [BUGGY]  int  c[i][i]  =  c[i];  if(c[i]  <  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c[i][i]  =  c[i];  if(c[i]  <  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c[i][i]  =  c[i];  if(c[i]  <  c[i][i])  {  swap[r]  =  i;  }	  int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	43	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i!=    0;    ++i)    {    for(int  i  =  r  +  1;  i!=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
37	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >=  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i!=    0;    ++i)    {    for(int  i  =  r  +  1;  i  >=  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
38	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >>  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i!=  0;  ++i)  {  for(int  i  =  r  +  1;  i  >>  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i!=    0;    ++i)    {    for(int  i  =  r  +  1;  i  >>  0;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
39	[BUG]  [BUGGY]  For(int  i  =  r  +  1;  i  <  0;  ++i)  {  [CE]  '.class'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  For(int  i  =  r  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	For(int  i  =  r  +  1;  i  <  0;  ++i)  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    For(int    i    =    r    +    1;    i    <    0;    ++i)    {    	non-compiled	[CE]  '.class'  expected	27	None	replace
40	[BUG]  [BUGGY]  double  c  =  matrix.get(swap  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  matrix.get(swap  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix.get(swap  +  1);	  double    c    =    matrix.get(swap);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
41	[BUG]  [BUGGY]  double  c  =  index[swap[i]];  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  index[swap[i]];  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  index[swap[i]];	  double    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  double  c  =  size[swap[i]];  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  size[swap[i]];  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  size[swap[i]];	  double    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  int  c  =  matrix[swap[i]]  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix[swap[i]]  -  1;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix[swap[i]]  -  1;	  int    c    =    matrix[swap[i]]    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
44	[BUG]  [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(swap);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getCholeskyDecomposition(swap);	  int    c    =    matrix.getCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
45	[BUG]  [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(r);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getCholeskyDecomposition(r);	  int    c    =    matrix.getCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
46	[BUG]  [BUGGY]  int  c  =  matrix.get(index  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(index  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(index  +  1);	  int    c    =    matrix.get(swap    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  double  c  =  matrix.calculateClone(root);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  matrix.calculateClone(root);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix.calculateClone(root);	  double    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
48	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	25	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  order  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	33	None	replace
50	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    index    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	42	3	replace
51	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    index    +    1;    i    <    0;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	42	3	replace
52	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  r.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index  +  1;  i  <  r.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  index  +  1;  i  <  r.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
54	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	1	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
56	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  For(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  For(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    For(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	4	None	add
57	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length  -  2);  ++i)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  for(int  i  =  r  +  1;  i  <  swap.length  -  2);  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    for(int  i  =  r  +  1;  i  <  swap.length  -  2);  ++i)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
58	[BUG]  [BUGGY]  int  c  =  matrix.get(r,  loop);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(r,  loop);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(r,  loop);	  int    c    =    matrix.get(loop,    r);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
59	[BUG]  [BUGGY]  int  c  =  matrix.get(loop,  swap);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(loop,  swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(loop,  swap);	  int    c    =    matrix.get(loop,    r);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
60	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  i;  }	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    i;    }    	non-compiled	[CE]  ']'  expected	1	None	replace
61	[BUG]  [BUGGY]  int  c  =  matrix.getC(root  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getC(root  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(root  +  1);	  int    c    =    matrix.getC(root);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
62	[BUG]  [BUGGY]  int  c  =  matrix.getC(root,  r);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getC(root,  r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getC(root,  r);	  int    c    =    matrix.getC(root);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
63	[BUG]  [BUGGY]  double  c  =  matrix.get(root);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  matrix.get(root);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix.get(root);	  double    c    =    matrix.get(swap);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  int  c  =  matrix.get(r,  swap  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.get(r,  swap  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.get(r,  swap  +  1);	  int    c    =    matrix.get(r,    swap);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
65	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    	non-compiled	[CE]  ']'  expected	29	None	replace
66	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  swap.length  +  1;  i  <  r  -  2;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	replace
67	[BUG]  [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  -  2;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  swap.length  +  1;  i  <  r  -  2;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	replace
68	[BUG]  [BUGGY]  int  c  =  index[swap[0]];  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  index[swap[0]];  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  index[swap[0]];	  int    c    =    index[swap[i]];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	add	for(int  i  =  index.length  +  1;  i  <  r;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	3	3	replace
70	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  index.length  +  1;  i  <  r;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	3	3	replace
71	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    int  i  =  r  +  1;  i  <  swap.length  -  2;  ++i)  {	  	non-compiled	[CE]  >  expected	4	None	add
72	[BUG]  [BUGGY]  if(!loop)  {  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(!loop)  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(!loop)  {	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
73	[BUG]  [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(root  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(root  +  1);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getCholeskyDecomposition(root  +  1);	  int    c    =    matrix.getCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
74	[BUG]  [BUGGY]  double  c  =  matrix[swap[i]]  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  matrix[swap[i]]  +  1;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  matrix[swap[i]]  +  1;	  double    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	non-compiled	[CE]  >  expected	8	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  r  +  1;  i  <  0;  ++i)  {  int  i  =  r  +  1;  i  <  swap.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    int    i    =    r    +    1;    i    <    swap.length;    ++i)    {    	non-compiled	[CE]  >  expected	8	None	replace
77	[BUG]  [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(small);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.getCholeskyDecomposition(small);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.getCholeskyDecomposition(small);	  int    c    =    matrix.getCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
78	[BUG]  [BUGGY]  int  c  =  index[swap[i]  +  1];  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  index[swap[i]  +  1];  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  index[swap[i]  +  1];	  int    c    =    index[swap[i]];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i][i]  =  c[i];  if(c[i]  >  c[i][i])  {  swap[r]  =	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i][i]    =    c[i];    if(c[i]    >    c[i][i])    {    swap[r]    =    	non-compiled	[CE]  ']'  expected	29	None	replace
80	[BUG]  [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap,  r);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  matrix.calculateCholeskyDecomposition(swap,  r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  matrix.calculateCholeskyDecomposition(swap,  r);	  int    c    =    matrix.calculateCholeskyDecomposition(root);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
81	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  ']'  expected	11	None	replace
82	[BUG]  [BUGGY]  double  c  =  root.get(swap);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  root.get(swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  root.get(swap);	  double    c    =    matrix.get(swap);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  for(int  i  =  swap.length  +  1;  i  <  r.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	for(int  i  =  swap.length  +  1;  i  <  r.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    swap.length    -    2;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  swap.length;  ++i)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  For(int  i  =  0;  i  <  swap.length;  ++i)  {  [BUGGY]      int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	For(int  i  =  0;  i  <  swap.length;  ++i)  {	  for(int    i    =    0    +    1;    i    <    swap.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	37	None	replace
85	[BUG]  [BUGGY]  double  c  =  root[swap[i]];  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  root[swap[i]];  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  root[swap[i]];	  double    c    =    matrix[swap[i]];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
86	[BUG]  [BUGGY]  int  c  =  root.get(index,  r);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  root.get(index,  r);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  root.get(index,  r);	  int    c    =    matrix.get(index,    r);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
87	[BUG]  [BUGGY]  double  c  =  root.calculateClone();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  double  c  =  root.calculateClone();  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	double  c  =  root.calculateClone();	  double    c    =    matrix.calculateClone();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
88	[BUG]  [BUGGY]  int  c  =  root.calculateCholeskyDecomposition();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c  =  root.calculateCholeskyDecomposition();  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c  =  root.calculateCholeskyDecomposition();	  int    c    =    matrix.calculateCholeskyDecomposition();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
89	[BUG]  [BUGGY]  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      int[]  index  =  new  int[order];  for  (int  i  =  0;  i  <  order;  ++i)  {  index[i]  =  i;  }  int  r  =  0;  for  (boolean  loop  =  true;  loop;)  {  swap[r]  =  r;      [BUGGY]  int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  int  ii=  index[i];  int  isi  =  index[swap[i]];  if  (c[ii][ii]  >  c[isi][isi])  {  swap[r]  =  i;  }  }    if  (swap[r]  !=  r)  {  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	80	80	2	replace	int  c[i]  =  c[i];  if(c[i]  >  c[i][i])  {	  for(int    i    =    r    +    1;    i    <    0;    ++i)    {    int    c[i]    =    c[i];    if(c[i]    >    c[i][i])    {    	non-compiled	[CE]  ']'  expected	30	None	replace
