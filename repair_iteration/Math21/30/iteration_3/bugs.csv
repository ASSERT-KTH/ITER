bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];	  c[ii][ii]    -=    e    *    sqrt;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  int  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  int  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	int  c[ii][ii]  -=  e  *  sqrt;	  c[ii][ii]    -=    e    *    sqrt;    int    c[ii][ii]    -=    e    *    sqrt;    	non-compiled	[CE]  ']'  expected	18	None	replace
3	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]    -=    e    *    sqrt    +    1;    c[ii][ii]  -=  e  *  sqrt  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	13	3	add
4	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  c[ii][ii]  -=  e  *  sqrt  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt    +    1;    c[ii][ii]  -=  e  *  sqrt  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	13	3	add
5	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  C[ii][ii]  -=  e  *  sqrt  +  1;  [CE]  cannot  find  symbol  C  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  C[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt    +    1;    C[ii][ii]  -=  e  *  sqrt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  C	13	None	add
6	[BUG]  [BUGGY]  final  double  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  final  double  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	final  double  c[ii][ii]  -=  e  *  sqrt;	  c[ii][ii]    -=    e    *    sqrt;    final    double    c[ii][ii]    -=    e    *    sqrt;    	non-compiled	[CE]  ']'  expected	17	None	replace
7	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  if(e!=  sqrt)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	if(e!=  sqrt)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
8	[BUG]  [BUGGY]  if(e!=  sqrt)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  if(e!=  sqrt)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	if(e!=  sqrt)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
9	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
10	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
11	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  c[ii];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[ii][ii]  -=  e  *  c[ii];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[ii][ii]  -=  e  *  c[ii];	  c[ii][ii]    -=    e    *    b[ii];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
12	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e.toString();  [CE]  double  cannot  be  dereferenced  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  e.toString();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  e.toString();	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e.toString();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
13	[BUG]  [BUGGY]  c[ii][ii],  -=  e  *  e;  [CE]  not  a  statement  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii],  -=  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii],  -=  e  *  e;	          c[ii][ii]    -=    e    *    e;    c[ii][ii],    -=    e    *    e;    	non-compiled	[CE]  not  a  statement	21	None	replace
14	[BUG]  [BUGGY]  c[ii][ii],  -=  e  *  sqrt;  [CE]  not  a  statement  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii],  -=  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii],  -=  e  *  sqrt;	          c[ii][ii]    -=    e    *    e;    c[ii][ii],    -=    e    *    e;    	non-compiled	[CE]  not  a  statement	21	None	replace
15	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][i  [CE]  ';'  expected  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][i  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][i	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ii]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
16	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ii]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
17	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  }	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir]    	non-compiled	[CE]  ';'  expected	19	None	replace
18	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    c[ii];    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	add
20	[BUG]  [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	add
21	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  l  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  l  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  l  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b[ii][r];    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
22	[BUG]  [BUGGY]  b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
23	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
24	[BUG]  [BUGGY]  for(int  ii][ii]  -=  e  *  sqrt;  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  for(int  ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	for(int  ii][ii]  -=  e  *  sqrt;	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    	non-compiled	[CE]  ';'  expected	8	None	replace
25	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
26	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[    	non-compiled	[CE]  ']'  expected	28	None	replace
27	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  2;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  e  *  sqrt  +  2;	  c[ii][ii]    -=    e    *    sqrt    +    1;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	14	3	replace
28	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  2;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  2;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt  +  2;	  c[ii][ii]    -=    e    *    sqrt    +    1;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	14	3	replace
29	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	29	3	add
30	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	29	3	add
31	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii]  -=  sqrt  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	add
32	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii]  -=  sqrt  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	add
33	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e);  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e);  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii]  -=  sqrt  *  e);	  	non-compiled	[CE]  ';'  expected	23	None	add
34	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  sqrt  *  e.doubleValue();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii]  -=  sqrt  *  e.doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	add
35	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ij]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
37	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqr  [CE]  ';'  expected  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqr  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqr	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ij]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
38	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sq  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sq  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sq	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ij]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
39	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  [CE]  ';'  expected  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ij]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
40	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;	  	non-compiled	[CE]  not  a  statement	29	None	add
41	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;	  	non-compiled	[CE]  <identifier>  expected	29	None	add
42	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    sqrt;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  ']'  expected	11	None	replace
43	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sq  [CE]  ';'  expected  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sq  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sq	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ii]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
44	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b;  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  ']'  expected	20	None	replace
45	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][    	non-compiled	[CE]  ']'  expected	27	None	replace
46	[BUG]  [BUGGY]  b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	b[i][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][i	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][    	non-compiled	[CE]  ']'  expected	27	None	replace
47	[BUG]  [BUGGY]  c[ii][ii]  -=  inverse  *  b[ii][ir;  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  inverse  *  b[ii][ir;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  inverse  *  b[ii][ir;	  c[ii][ii]    -=    inverse    *    c;    	non-compiled	[CE]  ']'  expected	26	None	replace
48	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii][ir];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  inverse  *  c[ii][ir];	  c[ii][ii]    -=    inverse    *    c[ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
49	[BUG]  [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii][ir];  [FE]  NonPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii][ir];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  inverse  *  c[ii][ir];	  c[ii][ii]    -=    inverse    *    c[ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	16	3	replace
50	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii],  -=  sqrt  *  e;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii],  -=  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii],  -=  sqrt  *  e;	  	non-compiled	[CE]  not  a  statement	23	None	add
51	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii].  -=  sqrt  *  e;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii].  -=  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii].  -=  sqrt  *  e;	  	non-compiled	[CE]  <identifier>  expected	23	None	add
52	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  final  double  c[ii][ii]  -=  e  *  sqrt  +  1;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  final  double  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt    +    1;    final  double  c[ii][ii]  -=  e  *  sqrt  +  1;	  	non-compiled	[CE]  ']'  expected	13	None	add
53	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  int  c[ii][ii]  -=  e  *  sqrt  +  1;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  int  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt    +    1;    int  c[ii][ii]  -=  e  *  sqrt  +  1;	  	non-compiled	[CE]  ']'  expected	13	None	add
54	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  e  *  e  +  1;	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e    +    1;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	30	3	replace
55	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  e  +  1;	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e    +    1;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	30	3	replace
56	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ij];  [CE]  cannot  find  symbol  ij  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ij];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][ij];	  c[ii][ii]    -=    e    *    b[ii];    	non-compiled	[CE]  cannot  find  symbol  ij	15	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ir];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  e  *  b[ii][ir];	  c[ii][ii]    -=    e    *    b[ii];    	compilable	  [FE]  AssertionError  	15	3	replace
58	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ir];  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ir];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][ir];	  c[ii][ii]    -=    e    *    b[ii];    	compilable	  [FE]  AssertionError  	15	3	replace
59	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  index[j  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b[ii][r];    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  ']'  expected	31	None	replace
60	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  for(int  ii][ii]  -=  e  *  sqrt;  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  for(int  ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt  +  1;  for(int  ii][ii]  -=  e  *  sqrt;	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	add
62	[BUG]  [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	add
63	[BUG]  [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt	  	non-compiled	[CE]  ';'  expected	6	None	add
64	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  not  a  statement	1	None	add
65	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii].  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
66	[BUG]  [BUGGY]  c[ii][ij]  -=  sqrt  *  e;  [CE]  cannot  find  symbol  ij  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ij]  -=  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ij]  -=  sqrt  *  e;	  c[ii][ij]    -=    e    *    sqrt;    	non-compiled	[CE]  cannot  find  symbol  ij	5	None	replace
67	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  squarert  *  e;  [CE]  cannot  find  symbol  squarert  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  c[ii][ii]  -=  squarert  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    sqrt    *    e;    c[ii][ii]  -=  squarert  *  e;	  	non-compiled	[CE]  cannot  find  symbol  squarert	23	None	add
68	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  e;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  e;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =	  c[ii][ii]    -=    e    *    sqrt;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  for(int  ii][ii]  -=  e  *  sqrt  +  1;  [CE]  ';'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  for(int  ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt    +    1;    for(int  ii][ii]  -=  e  *  sqrt  +  1;	  	non-compiled	[CE]  ';'  expected	13	None	add
70	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b[ii][r];    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
71	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  >>  '  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  >>  '	  c[ii][ii]    -=    e    *    c[ii][ir];    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir]    	non-compiled	[CE]  illegal  line  end  in  character  literal	19	None	replace
72	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  l  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  l  +  1;  j  <  i;  ++j)  {  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b;  for(int  j  =  l  +  1;  j  <  i;  ++j)  {	  c[ii][ii]    -=    e    *    b;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
73	[BUG]  [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii],  e  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;  c[ii][ii],  e  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]        -=        e        *        sqrt;        c[ii][ii]    -=    e    *    sqrt;    c[ii][ii],  e  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  not  a  statement	6	None	add
74	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt  [CE]  ';'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt	  c[ii][ii]    -=    e    *    sqrt;    for(int    ii][ii]    -=    e    *    sqrt;    i    <    i;    ++i)    {    final    double    c[ii][ij]    -=    e    *    sqrt;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  if(e!=  e)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	if(e!=  e)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e);    	compilable	  [FE]  AssertionError  	3	3	replace
76	[BUG]  [BUGGY]  if(e!=  e)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [FE]  AssertionError  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  if(e!=  e)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	if(e!=  e)  {  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  }	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e);    	compilable	  [FE]  AssertionError  	3	3	replace
77	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ii];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  e  *  b[ii][ii];	  c[ii][ii]    -=    e    *    b[ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	3	replace
78	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ii];  [FE]  NonPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;      [BUGGY]  c[ii][ii]  -=  e  *  b[ii][ii];  [BUGGY]      for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][ii];	  c[ii][ii]    -=    e    *    b[ii];    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	3	replace
