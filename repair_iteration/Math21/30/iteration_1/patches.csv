bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
2	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
3	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e);  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e);  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e);	  	non-compiled	[CE]  ';'  expected	1	None	add
4	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e.toString();  [CE]  double  cannot  be  dereferenced  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e.toString();  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e.toString();	  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	add
5	[BUG]  [BUGGY]  c[ii][ij]  -=  e  *  sqrt;  [CE]  cannot  find  symbol  ij  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ij]  -=  e  *  sqrt;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ij]  -=  e  *  sqrt;	      c[ii][ij]    -=    e    *    e;    	non-compiled	[CE]  cannot  find  symbol  ij	10	None	replace
6	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	add
7	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	5	3	add
8	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    for(int  ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ';'  expected	5	None	add
9	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	final  double  e  =  inverse  *  sqrt  *  c[ii][ir];	      final    double    e    =    inverse    *    c[ii][ir];    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	9	None	replace
10	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][r]  =	      c[ii][ii]    -=    e    *    e;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    e;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	      c[ii][ii]    -=    e    *    e;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  c[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	      c[ii][ii]    -=    e    *    e;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  e  *  sqrt  +  1;	  c[ii][ii]    -=    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
14	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  sqrt  +  1;	  c[ii][ii]    -=    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
15	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  b[ii];  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii];	  c[ii][ii]    -=    e    *    c[ii];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
16	[BUG]  [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  inverse  *  c[ii];  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  inverse  *  c[ii];	  c[ii][ii]    -=    e    *    c[ii];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
17	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    final  double  c[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	5	None	add
18	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  int  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  int  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    int  c[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	5	None	add
19	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir]	      c[ii][ii]    -=    e    *    e;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    e;    	non-compiled	[CE]  ';'  expected	4	None	replace
20	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b;  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	      c[ii][ii]    -=    e    *    e;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii],  -=  e  *  e;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii],  -=  e  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii],  -=  e  *  e;	  	non-compiled	[CE]  not  a  statement	1	None	add
22	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii].  -=  e  *  e;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii].  -=  e  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii].  -=  e  *  e;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
23	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	c[ii][ii]  -=  sqrt  *  e;	      c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
24	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  sqrt  *  e;	      c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
25	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	final  double  e  =  inverse  *  b[ii][ir];	      final    double    e    =    inverse    *    c[ii][ir];    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	9	None	replace
26	[BUG]  [BUGGY]  c[ii][ii]  -=  inverse  *  c;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  inverse  *  c;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  inverse  *  c;	  c[ii][ii]    -=    e    *    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
27	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[i][	      c[ii][ii]    -=    e    *    e;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    e;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  c[ii][ir];  for(int  j  =  i  +  1;  j  <  i;  ++j)  {  final  double  e  =  inverse  *  c[i][ir];  b[	      c[ii][ii]    -=    e    *    e;    for(int    j    =    i    +    1;    j    <    i;    ++j)    {    final    double    e    =    inverse    *    c[i][ir];    b[i][r]    =    e;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	add	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
30	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
31	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {  [BUGGY]    c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]  -=  e  *  b[ii][r];  for(int  j  =  r  +  1;  j  <  i;  ++j)  {	      c[ii][ii]    -=    e    *    e;    for(int    j    =    r    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sqrt;  }  [CE]  ';'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sqrt;  }  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ii]  -=  e  *  sqrt;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
33	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt;  }  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]    }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt;  }  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	128	128	2	replace	c[ii][ii]    -=    e    *    sqrt;    for(int  ii][ii]  -=  e  *  sqrt;  i  <  i;  ++i)  {  final  double  c[ii][ij]  -=  e  *  sqrt;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
