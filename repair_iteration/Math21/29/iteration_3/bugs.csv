bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  b[i][i]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]    =    sqrt;    b[i][i]  =  sqrt;	  	compilable	  [FE]  AssertionError  	32	2	add
2	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  b[i][i]  =  sqrt;  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  b[i][i]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    b[i][i]  =  sqrt;	  	compilable	  [FE]  AssertionError  	32	2	add
3	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  final  double[i][i]  =  sqrt;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  final  double[i][i]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    final  double[i][i]  =  sqrt;	  	non-compiled	[CE]  ']'  expected	32	None	add
4	[BUG]  [BUGGY]  int  c[ii][ii]  -=  e  *  e;  [CE]  ']'  expected  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  int  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	int  c[ii][ii]  -=  e  *  e;	          c[ii][ii]    -=    e    *    e;    int    c[ii][ii]    -=    e    *    e;    	non-compiled	[CE]  ']'  expected	27	None	replace
5	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[ii][ii]  -=  e  *  e;	          c[ii][ii]    -=    e    *    e;    int    c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	27	3	replace
6	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[ii][ii]  -=  e  *  e;	          c[ii][ii]    -=    e    *    e;    int    c[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	27	3	replace
7	[BUG]  [BUGGY]  b[i][r]  =  sqrt.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  sqrt.doubleValue();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  sqrt.doubleValue();	  b[i][r]    =    sqrt;    for(int    i    =    ii;    i    <    b.length;    ++i)    {    b[i][r]    =    sqrt;    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
8	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	                c[ii][ii]        -=        e        *        e;        b[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	35	3	add
9	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        b[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	35	3	add
10	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	                c[ii][ii]        -=        e        *        e;        b[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	35	3	add
11	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        b[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  b[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	35	3	add
12	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]  =  e  *  sqrt;	  b[i][i]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	replace
13	[BUG]  [BUGGY]  b[i][i]  =  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  e  *  sqrt;	  b[i][i]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	replace
14	[BUG]  [BUGGY]  final  double  e  =  FastMath.sqrt(c[i][i]);  b[i][r]  =  sqrt;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]          AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  e  =  FastMath.sqrt(c[i][i]);  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  e  =  FastMath.sqrt(c[i][i]);  b[i][r]  =  sqrt;	  b[i][r]    =    sqrt;    final    double    e    =    FastMath.sqrt(c[i][i]);    b[i][r]    =    sqrt;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	51	None	replace
15	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	add
16	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    sqrt;    c[ii][ii]  -=  e  *  sqrt;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	add
17	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    sqrt;    final  double[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	8	None	add
18	[BUG]  [BUGGY]  if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][i]  =  e;  }  [CE]  illegal  start  of  expression  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][i]  =  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][i]  =  e;  }	  b[i][i]    =    e;    for(int    i    =    ii;    i    <    b.length;    ++i)    {    b[i][i]    =    e;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
20	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  c[i][r];  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][r]  =  e  *  c[i][r];  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
22	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  c[i][r];  c[i][r]  =  e  *  e;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][r]  =  e  *  c[i][r];  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][r]  =  e  *  c[i][r];  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
23	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  c[i][r]  =  e  *  e;  [CE]  cannot  find  symbol  l  [FE]        AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][l]  =  e  *  e;  c[i][r]  =  e  *  e;	  	non-compiled	[CE]  cannot  find  symbol  l	38	None	add
24	[BUG]  [BUGGY]  final  double[i][i]  =  e;  [CE]  ']'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double[i][i]  =  e;	  b[i][i]    =    e;    final    double[i][i]    =    e;    	non-compiled	[CE]  ']'  expected	4	None	replace
25	[BUG]  [BUGGY]  final  double[][i]  =  e;  [CE]  ']'  expected  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double[][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double[][i]  =  e;	  b[i][i]    =    e;    final    double[i][i]    =    e;    	non-compiled	[CE]  ']'  expected	4	None	replace
26	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[ii][ii]  -=  e  *  sqrt  +  1;	  c[ii][ii]    -=    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	9	3	replace
27	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]  -=  e  *  sqrt  +  1;	  c[ii][ii]    -=    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	9	3	replace
28	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[i][r]  =  e  *  e;	  b[i][r]    =    e    *    e;    c[i][r]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	39	3	replace
29	[BUG]  [BUGGY]  c[i][r]  =  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[i][r]  =  e  *  e;	  b[i][r]    =    e    *    e;    c[i][r]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	39	3	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]    =    e    *    e;    b[i][i]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	22	2	add
31	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e;  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    b[i][i]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	22	2	add
32	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  final  double[i][i]  =  e  *  e;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  final  double[i][i]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    final  double[i][i]  =  e  *  e;	  	non-compiled	[CE]  ']'  expected	22	None	add
33	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e);  [CE]  ';'  expected  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e);  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    b[i][i]  =  e  *  e);	  	non-compiled	[CE]  ';'  expected	22	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    c[i][i]  =  e;  b[i][i]  =  e;  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]        =        e;        c[i][i]    =    e;    b[i][i]  =  e;  c[i][i]  =  e;	  	compilable	  [FE]  AssertionError  	47	3	add
35	[BUG]  [BUGGY]  b[i][i]    =    e;    c[i][i]  =  e;  b[i][i]  =  e;  c[i][i]  =  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    c[i][i]  =  e;  b[i][i]  =  e;  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        c[i][i]    =    e;    b[i][i]  =  e;  c[i][i]  =  e;	  	compilable	  [FE]  AssertionError  	47	3	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  b[i][r]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]    =    e    *    sqrt;    b[i][r]  =  e  *  sqrt;	  	compilable	  [FE]  AssertionError  	14	2	add
37	[BUG]  [BUGGY]  b[i][r]  =  e  *  sqrt;  b[i][r]  =  e  *  sqrt;  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  b[i][r]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    e    *    sqrt;    b[i][r]  =  e  *  sqrt;	  	compilable	  [FE]  AssertionError  	14	2	add
38	[BUG]  [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double[i][r]  =  e  *  sqrt;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double[i][r]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    e    *    sqrt;    final  double[i][r]  =  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	14	None	add
39	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e.doubleValue();  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]  -=  e  *  e.doubleValue();	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
40	[BUG]  [BUGGY]  b[i][r]  =  e  *  c[ii];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  c[ii];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  e  *  c[ii];	  b[i][r]    =    e    *    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
41	[BUG]  [BUGGY]  final  double[i][r]  =  e  *  e;  [CE]  ']'  expected  [FE]            NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double[i][r]  =  e  *  e;	  b[i][r]    =    e    *    e;    final    double[i][r]    =    e    *    e;    	non-compiled	[CE]  ']'  expected	13	None	replace
42	[BUG]  [BUGGY]  final  double  e  =  e  *  e;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  e  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  e  =  e  *  e;	  b[i][r]    =    e    *    e;    final    double    e    =    e    *    e;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	34	None	replace
43	[BUG]  [BUGGY]  final  double  e  =  e  *  b;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  e  =  e  *  b;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  e  =  e  *  b;	  b[i][r]    =    e    *    e;    final    double    e    =    e    *    e;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	34	None	replace
44	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[ii][ii]  -=  e  *  sqrt;	          c[ii][ii]    -=    e    *    e;    b[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	36	3	replace
45	[BUG]  [BUGGY]  b[ii][ii]  -=  e  *  sqrt;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[ii][ii]  -=  e  *  sqrt;	          c[ii][ii]    -=    e    *    e;    b[ii][ii]    -=    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	36	3	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]  =  sqrt;  c[i][i]  =  e;	  b[i][i]    =    e;    c[i][i]    =    e;    	compilable	  [FE]  AssertionError  	48	3	replace
47	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  c[i][i]  =  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  sqrt;  c[i][i]  =  e;	  b[i][i]    =    e;    c[i][i]    =    e;    	compilable	  [FE]  AssertionError  	48	3	replace
48	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	40	3	add
49	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	40	3	add
50	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  2;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e  +  2;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	40	3	add
51	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  2;  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  c[ii][ii]  -=  e  *  e  +  2;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    e    +    1;    c[ii][ii]  -=  e  *  e  +  2;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	40	3	add
52	[BUG]  [BUGGY]  final  double  c[ii][ii]  -=  e  *  e;  [CE]  ']'  expected  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  c[ii][ii]  -=  e  *  e;	          c[ii][ii]    -=    e    *    e;    final    double    c[ii][ii]    -=    e    *    e;    	non-compiled	[CE]  ']'  expected	28	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  b[i][i]  =  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]    =    inverse;    b[i][i]  =  inverse;	  	compilable	  [FE]  AssertionError  	42	2	add
54	[BUG]  [BUGGY]  b[i][i]  =  inverse;  b[i][i]  =  inverse;  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  b[i][i]  =  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    b[i][i]  =  inverse;	  	compilable	  [FE]  AssertionError  	42	2	add
55	[BUG]  [BUGGY]  b[i][i]  =  inverse;  final  double[i][i]  =  inverse;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  final  double[i][i]  =  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    final  double[i][i]  =  inverse;	  	non-compiled	[CE]  ']'  expected	42	None	add
56	[BUG]  [BUGGY]  final  double  e  =  FastMath.sqrt(c[i][ir]);  b[i][r]  =  sqrt;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  e  =  FastMath.sqrt(c[i][ir]);  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  e  =  FastMath.sqrt(c[i][ir]);  b[i][r]  =  sqrt;	  b[i][r]    =    sqrt;    final    double    e    =    FastMath.sqrt(c[i][ir]);    b[i][r]    =    sqrt;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	50	None	replace
57	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	18	3	add
58	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	18	3	add
59	[BUG]  [BUGGY]  if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  e;  }  [CE]  illegal  start  of  expression  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	if(e!=  null)  {  b[i][i]  =  e;  for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  e;  }	  b[i][i]    =    e;    for(int    i    =    i;    i    <    i;    ++i)    {    b[i][i]    =    e;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
60	[BUG]  [BUGGY]  b[i][i]  =  e.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e.doubleValue();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  e.doubleValue();	  b[i][i]    =    e;    b[i][i]    =    e.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
61	[BUG]  [BUGGY]  final  double[i][r]  =  sqrt;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double[i][r]  =  sqrt;	  b[i][r]    =    sqrt;    final    double[i][r]    =    sqrt;    	non-compiled	[CE]  ']'  expected	7	None	replace
62	[BUG]  [BUGGY]  b[i][r]  =  sqrt;  final  double[i][r]  =  e;  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  sqrt;  final  double[i][r]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  sqrt;  final  double[i][r]  =  e;	  b[i][r]    =    sqrt;    final    double[i][r]    =    sqrt;    	non-compiled	[CE]  ']'  expected	7	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        sqrt;        b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r]  =  sqrt;	  	compilable	  [FE]  AssertionError  	5	2	add
64	[BUG]  [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        sqrt;        b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r]  =  sqrt;	  	compilable	  [FE]  AssertionError  	5	2	add
65	[BUG]  [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][l]  =  sqrt;  b[i][r]  =  sqrt;  [CE]  cannot  find  symbol  l  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][l]  =  sqrt;  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        sqrt;        b[i][r]    =    sqrt;    b[i][l]  =  sqrt;  b[i][r]  =  sqrt;	  	non-compiled	[CE]  cannot  find  symbol  l	5	None	add
66	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]  =  sqrt  *  e;	  b[i][r]    =    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	3	replace
67	[BUG]  [BUGGY]  b[i][r]  =  sqrt  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  sqrt  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  sqrt  *  e;	  b[i][r]    =    e    *    sqrt;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	3	replace
68	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e.toString();  [CE]  double  cannot  be  dereferenced  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e.toString();  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]  -=  e  *  e.toString();	          c[ii][ii]    -=    e    *    e;    c[ii][ii]    -=    e    *    e.toString();    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	10	2	add
70	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	10	2	add
71	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  b[i][r]  =  e  *  e;  [CE]  cannot  find  symbol  l  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][l]  =  e  *  e;  b[i][r]  =  e  *  e;	  	non-compiled	[CE]  cannot  find  symbol  l	10	None	add
72	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][n]  =  e  *  e;  b[i][r]  =  e  *  e;  [CE]  cannot  find  symbol  n  [FE]        AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][n]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][n]  =  e  *  e;  b[i][r]  =  e  *  e;	  	non-compiled	[CE]  cannot  find  symbol  n	10	None	add
73	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]  =  e  *  inverse;	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	45	3	replace
74	[BUG]  [BUGGY]  b[i][r]  =  e  *  inverse;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  e  *  inverse;	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	45	3	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  c[ii][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]  =  inverse  *  c[ii][ir];	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  AssertionError  	45	2	replace
76	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  c[ii][ir];  [FE]  AssertionError  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  c[ii][ir];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  inverse  *  c[ii][ir];	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  AssertionError  	45	2	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  b[i][r]  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]    =    inverse    *    e;    b[i][r]  =  inverse  *  e;	  	compilable	  [FE]  AssertionError  	44	2	add
78	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  b[i][r]  =  inverse  *  e;  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  b[i][r]  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    b[i][r]  =  inverse  *  e;	  	compilable	  [FE]  AssertionError  	44	2	add
79	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  final  double[i][r]  =  inverse  *  e;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  final  double[i][r]  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    final  double[i][r]  =  inverse  *  e;	  	non-compiled	[CE]  ']'  expected	44	None	add
80	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  b[i][r]  =  inverse  *  e);  [CE]  ';'  expected  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  b[i][r]  =  inverse  *  e);  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    b[i][r]  =  inverse  *  e);	  	non-compiled	[CE]  ';'  expected	44	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  b[i][i]  =  e;  b[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]        =        e;        b[i][i]    =    e;    b[i][i]  =  e;  b[i][i]  =  e;	  	compilable	  [FE]  AssertionError  	2	2	add
82	[BUG]  [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  b[i][i]  =  e;  b[i][i]  =  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  b[i][i]  =  e;  b[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        b[i][i]    =    e;    b[i][i]  =  e;  b[i][i]  =  e;	  	compilable	  [FE]  AssertionError  	2	2	add
83	[BUG]  [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  for(int  i][i]  =  e;  b[i][i]  =  e;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  for(int  i][i]  =  e;  b[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        b[i][i]    =    e;    for(int  i][i]  =  e;  b[i][i]  =  e;	  	non-compiled	[CE]  ';'  expected	2	None	add
84	[BUG]  [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  final  double[i][i]  =  e;  b[i][i]  =  e;  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  final  double[i][i]  =  e;  b[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        b[i][i]    =    e;    final  double[i][i]  =  e;  b[i][i]  =  e;	  	non-compiled	[CE]  ']'  expected	2	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  c[ii][r];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]  =  inverse  *  c[ii][r];	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  AssertionError  	45	3	replace
86	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  c[ii][r];  [FE]  AssertionError  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  c[ii][r];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  inverse  *  c[ii][r];	  b[i][r]    =    inverse    *    e;    	compilable	  [FE]  AssertionError  	45	3	replace
87	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r],  e  *  e;  b[i][r]  =  e  *  e;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][r],  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][r],  e  *  e;  b[i][r]  =  e  *  e;	  	non-compiled	[CE]  not  a  statement	10	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][0]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][0]  =  sqrt;	  b[i][r]    =    sqrt;    for(int    i    =    ii;    i    <    b.length;    ++i)    {    b[i][r]    =    sqrt;    }    	compilable	  [FE]  AssertionError  	24	3	replace
89	[BUG]  [BUGGY]  b[i][0]  =  sqrt;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][0]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][0]  =  sqrt;	  b[i][r]    =    sqrt;    for(int    i    =    ii;    i    <    b.length;    ++i)    {    b[i][r]    =    sqrt;    }    	compilable	  [FE]  AssertionError  	24	3	replace
90	[BUG]  [BUGGY]  b[i][i]  =  sqrt.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt.doubleValue();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  sqrt.doubleValue();	  b[i][i]    =    e;    b[i][i]    =    e.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
91	[BUG]  [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double  e  =  e  *  e;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double  e  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  e  *  sqrt;  final  double  e  =  e  *  e;	  b[i][r]    =    e    *    e;    final    double    e    =    e    *    e;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	34	None	replace
92	[BUG]  [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double  b[i][r]  =  e  *  sqrt;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  final  double  b[i][r]  =  e  *  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    e    *    sqrt;    final  double  b[i][r]  =  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	14	None	add
93	[BUG]  [BUGGY]  b[i][r]  =  e  *  sqrt;  b[i][r]  =  e  *  sqrt.;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  sqrt;  b[i][r]  =  e  *  sqrt.;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    e    *    sqrt;    b[i][r]  =  e  *  sqrt.;	  	non-compiled	[CE]  <identifier>  expected	14	None	add
94	[BUG]  [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r],  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  b[i][r],  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        sqrt;        b[i][r]    =    sqrt;    b[i][r],  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;	  	non-compiled	[CE]  not  a  statement	5	None	add
95	[BUG]  [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  final  double  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    sqrt;    b[i][r]  =  sqrt;  final  double  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        sqrt;        b[i][r]    =    sqrt;    final  double  b[i][r]  =  sqrt;  b[i][r]  =  sqrt;	  	non-compiled	[CE]  ']'  expected	5	None	add
96	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  final  double  c[ii][ii]  -=  e  *  e  +  1;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  final  double  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    e    +    1;    final  double  c[ii][ii]  -=  e  *  e  +  1;	  	non-compiled	[CE]  ']'  expected	40	None	add
97	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  int  c[ii][ii]  -=  e  *  e  +  1;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  e  +  1;  int  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    e    +    1;    int  c[ii][ii]  -=  e  *  e  +  1;	  	non-compiled	[CE]  ']'  expected	40	None	add
98	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  for(int  i  =  i;  i  <  b.length;  ++i)  {  b[i][i]  =  sqrt;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  for(int  i  =  i;  i  <  b.length;  ++i)  {  b[i][i]  =  sqrt;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    for(int  i  =  i;  i  <  b.length;  ++i)  {  b[i][i]  =  sqrt;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	32	None	add
99	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  sqrt;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  sqrt;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    for(int  i  =  i;  i  <  i;  ++i)  {  b[i][i]  =  sqrt;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	32	None	add
100	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    b[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  b[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        b[ii][ii]    -=    e    *    e;    c[ii][ii],  e  -=  e  *  e;  b[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  not  a  statement	35	None	add
101	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  final  double  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    sqrt;    final  double  c[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	8	None	add
102	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  int  c[ii][ii]  -=  e  *  sqrt;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  int  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    sqrt;    int  c[ii][ii]  -=  e  *  sqrt;	  	non-compiled	[CE]  ']'  expected	8	None	add
103	[BUG]  [BUGGY]  b[i][r]  =  c  *  e;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  c  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  c  *  e;	  b[i][r]    =    e    *    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
104	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  c[i][l]  =  e  *  e;  [CE]  cannot  find  symbol  l  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  b[i][l]  =  e  *  e;  c[i][l]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    b[i][l]  =  e  *  e;  c[i][l]  =  e  *  e;	  	non-compiled	[CE]  cannot  find  symbol  l	38	None	add
105	[BUG]  [BUGGY]  b[i][i]  =  inverse;  final  double  b[i][i]  =  inverse;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  final  double  b[i][i]  =  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    final  double  b[i][i]  =  inverse;	  	non-compiled	[CE]  ']'  expected	42	None	add
106	[BUG]  [BUGGY]  b[i][i]  =  inverse;  for(int  i][i]  =  inverse;  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  for(int  i][i]  =  inverse;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    for(int  i][i]  =  inverse;	  	non-compiled	[CE]  ';'  expected	42	None	add
107	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][r]  =  inverse  *  e;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][r]  =  inverse  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    for(int  i  =  ii;  i  <  b.length;  ++i)  {  b[i][r]  =  inverse  *  e;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	44	None	add
108	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  for(int  i  =  ii;  i  <  i;  ++i)  {  b[i][r]  =  inverse  *  e;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  for(int  i  =  ii;  i  <  i;  ++i)  {  b[i][r]  =  inverse  *  e;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    for(int  i  =  ii;  i  <  i;  ++i)  {  b[i][r]  =  inverse  *  e;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	44	None	add
109	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  final  double  b[i][i]  =  e  *  e;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  final  double  b[i][i]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    final  double  b[i][i]  =  e  *  e;	  	non-compiled	[CE]  ']'  expected	22	None	add
110	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  for(int  i][i]  =  e  *  e;  [CE]  ';'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  for(int  i][i]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    for(int  i][i]  =  e  *  e;	  	non-compiled	[CE]  ';'  expected	22	None	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][0]  =  sqrt;  b[i][0]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][0]  =  sqrt;  b[i][0]  =  sqrt;	  b[i][r]    =    sqrt;    b[i][r]    =    sqrt;    	compilable	  [FE]  AssertionError  	6	3	replace
112	[BUG]  [BUGGY]  b[i][0]  =  sqrt;  b[i][0]  =  sqrt;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][0]  =  sqrt;  b[i][0]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][0]  =  sqrt;  b[i][0]  =  sqrt;	  b[i][r]    =    sqrt;    b[i][r]    =    sqrt;    	compilable	  [FE]  AssertionError  	6	3	replace
113	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    c[ii][ii],  e  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  not  a  statement	18	None	add
114	[BUG]  [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  int  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [CE]  ']'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]          c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;  int  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	                c[ii][ii]        -=        e        *        e;        c[ii][ii]    -=    e    *    e;    int  c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  ']'  expected	18	None	add
115	[BUG]  [BUGGY]  final  double  e  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  sqrt;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  final  double  e  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	final  double  e  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  sqrt;	  b[i][r]    =    sqrt;    final    double    e    =    FastMath.sqrt(c[i][ir]);    b[i][r]    =    sqrt;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	50	None	replace
116	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]  =  inverse  *  e;	  b[i][i]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	replace
117	[BUG]  [BUGGY]  b[i][i]  =  inverse  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  inverse  *  e;	  b[i][i]    =    e    *    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	23	3	replace
118	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]  =  e  *  e  +  1;	  b[i][r]    =    e    *    e;    b[i][r]    =    e    *    e);    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	12	3	replace
119	[BUG]  [BUGGY]  b[i][r]  =  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  e  *  e  +  1;	  b[i][r]    =    e    *    e;    b[i][r]    =    e    *    e);    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	12	3	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
121	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        c[i][r]    =    e    *    e;    c[i][r]  =  e  *  e;  c[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	38	2	add
122	[BUG]  [BUGGY]  b[i][i]    =    e;    c[i][i]  =  e;  b[i][i];  c[i][i]  =  e;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    c[i][i]  =  e;  b[i][i];  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        c[i][i]    =    e;    b[i][i];  c[i][i]  =  e;	  	non-compiled	[CE]  not  a  statement	47	None	add
123	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][i]  =  e  +  1;	  b[i][i]    =    e;    b[i][i]    =    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	3	3	replace
124	[BUG]  [BUGGY]  b[i][i]  =  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  +  1;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  e  +  1;	  b[i][i]    =    e;    b[i][i]    =    e;    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	3	3	replace
125	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  final  double  b[i][i]  =  sqrt;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  final  double  b[i][i]  =  sqrt;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    final  double  b[i][i]  =  sqrt;	  	non-compiled	[CE]  ']'  expected	32	None	add
126	[BUG]  [BUGGY]  b[i][i]  =  sqrt;  b[i][i]  =  squarert;  [CE]  cannot  find  symbol  squarert  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  sqrt;  b[i][i]  =  squarert;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    sqrt;    b[i][i]  =  squarert;	  	non-compiled	[CE]  cannot  find  symbol  squarert	32	None	add
127	[BUG]  [BUGGY]  b[i][i]  =  inverse;  for(int  i  =  i  +  1;  i  <  order;  ++i)  {  b[i][i]  =  inverse;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  for(int  i  =  i  +  1;  i  <  order;  ++i)  {  b[i][i]  =  inverse;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    for(int  i  =  i  +  1;  i  <  order;  ++i)  {  b[i][i]  =  inverse;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	42	None	add
128	[BUG]  [BUGGY]  b[i][i]  =  inverse;  for(int  i  =  i  +  1;  i  <  size;  ++i)  {  b[i][i]  =  inverse;  }  [CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  inverse;  for(int  i  =  i  +  1;  i  <  size;  ++i)  {  b[i][i]  =  inverse;  }  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    inverse;    for(int  i  =  i  +  1;  i  <  size;  ++i)  {  b[i][i]  =  inverse;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	42	None	add
129	[BUG]  [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  b[i][i];  b[i][i]  =  e;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]    =    e;    b[i][i]  =  e;  b[i][i];  b[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]        =        e;        b[i][i]    =    e;    b[i][i];  b[i][i]  =  e;	  	non-compiled	[CE]  not  a  statement	2	None	add
130	[BUG]  [BUGGY]  b[i][r]  =  inverse  *  e;  final  double  e  =  inverse  *  e;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  inverse  *  e;  final  double  e  =  inverse  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]    =    inverse    *    e;    final  double  e  =  inverse  *  e;	  	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	44	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][0]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][0]  =  e  *  e;  b[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	10	3	add
132	[BUG]  [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][0]  =  e  *  e;  b[i][r]  =  e  *  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]    =    e    *    e;    b[i][r]  =  e  *  e;  b[i][0]  =  e  *  e;  b[i][r]  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]        =        e        *        e;        b[i][r]    =    e    *    e;    b[i][0]  =  e  *  e;  b[i][r]  =  e  *  e;	  	compilable	  [FE]  AssertionError  	10	3	add
133	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii],  e  -=  e  *  sqrt;  [CE]  not  a  statement  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  c[ii][ii],  e  -=  e  *  sqrt;  [BUGGY]      b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[ii][ii]    -=    e    *    sqrt;    c[ii][ii],  e  -=  e  *  sqrt;	  	non-compiled	[CE]  not  a  statement	8	None	add
134	[BUG]  [BUGGY]  b[i][r]  =  e  *  inverse;  final  double  e  =  e  *  e;  [CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][r]  =  e  *  inverse;  final  double  e  =  e  *  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][r]  =  e  *  inverse;  final  double  e  =  e  *  e;	  b[i][r]    =    e    *    e;    final    double    e    =    e    *    e;    	non-compiled	[CE]  variable  e  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	34	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	add	c[i][i]  =  e;	  b[i][i]    =    e;    c[i][i]    =    e;    	compilable	  [FE]  AssertionError  	48	3	replace
136	[BUG]  [BUGGY]  c[i][i]  =  e;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  c[i][i]  =  e;  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	c[i][i]  =  e;	  b[i][i]    =    e;    c[i][i]    =    e;    	compilable	  [FE]  AssertionError  	48	3	replace
137	[BUG]  [BUGGY]  b[i][i]  =  e  *  c[ii];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NonPositiveDefiniteMatrixException      [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  c[ii];  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]  =  e  *  c[ii];	  b[i][r]    =    e    *    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
138	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e.toString();  [CE]  double  cannot  be  dereferenced  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e.toString();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    b[i][i]  =  e  *  e.toString();	  	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	add
139	[BUG]  [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];      [BUGGY]  b[i][i]  =  e  *  e;  b[i][i]  =  e  *  e.doubleValue();  [BUGGY]      c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }    [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	127	127	2	replace	b[i][i]    =    e    *    e;    b[i][i]  =  e  *  e.doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	add
