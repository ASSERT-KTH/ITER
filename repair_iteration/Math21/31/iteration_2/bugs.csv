bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  i  +  1;  j  <  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	replace
2	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	replace
3	[BUG]  [BUGGY]  for(int  j  =  r  +  1;  j  <  =  order;  ++j)  {  [CE]  illegal  start  of  expression  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  r  +  1;  j  <  =  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  r  +  1;  j  <  =  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	final  double  f  =  c[ii][ij]  -  e  *  b[i][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[i][    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  [CE]  <identifier>  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  c[ii][ii]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	c[ii][ii]  -=  e  *  sqrt;	      c[ii][ii]    -=    e    *    e;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  [CE]  <identifier>  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  c[ii][ii]  -=  sqrt  *  e;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	c[ii][ii]  -=  sqrt  *  e;	      c[ii][ii]    -=    e    *    e;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  -  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  index.length  -  1;  j  <  i;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
8	[BUG]  [BUGGY]  for(int  j  =  index.length  -  1;  j  <  i;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  -  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index.length  -  1;  j  <  i;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
9	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  index.length;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  i  +  1;  j  <  index.length;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
10	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  index.length;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  index.length;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  i  +  1;  j  <  index.length;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
11	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    i    +    1;    j    <    r;    ++j)    {    for(int  j  =  i  +  1;  j  <  r;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
12	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  For(int  j  =  i  +  1;  j  <  r;  ++j)  {  [CE]  '.class'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  For(int  j  =  i  +  1;  j  <  r;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    i    +    1;    j    <    r;    ++j)    {    For(int  j  =  i  +  1;  j  <  r;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
13	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  for(int  j  =  i  +  1;  j  <  r);  ++j)  {  [CE]  ';'  expected  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  for(int  j  =  i  +  1;  j  <  r);  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    i    +    1;    j    <    r;    ++j)    {    for(int  j  =  i  +  1;  j  <  r);  ++j)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
14	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
15	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
16	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
17	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e  +  1;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e  +  1;	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	3	add
18	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii]  -=  e  *  e.doubleValue();  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii]  -=  e  *  e.doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	add
19	[BUG]  [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    r    +    1;    j    <    order;    ++j)    {    for(int  j  =  r  +  1;  j  <  order;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
20	[BUG]  [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  For(int  j  =  r  +  1;  j  <  order;  ++j)  {  [CE]  '.class'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  For(int  j  =  r  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    r    +    1;    j    <    order;    ++j)    {    For(int  j  =  r  +  1;  j  <  order;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
21	[BUG]  [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  int  j  =  r  +  1;  j  <  order;  ++j)  {  [CE]  >  expected  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  int  j  =  r  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    r    +    1;    j    <    order;    ++j)    {    int  j  =  r  +  1;  j  <  order;  ++j)  {	  	non-compiled	[CE]  >  expected	7	None	add
22	[BUG]  [BUGGY]  c[ii][ij]  -=  e  *  sqrt;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  c[ii][ij]  -=  e  *  sqrt;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	c[ii][ij]  -=  e  *  sqrt;	      c[ii][ij]    -=    e    *    e;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[ii][i  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[ii][i  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	final  double  f  =  c[ii][ij]  -  e  *  b[ii][i	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[ii][i    	non-compiled	[CE]  ']'  expected	13	None	replace
24	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[ii][i    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    r;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
26	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    r;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	6	3	replace
27	[BUG]  [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	final  double  f  =  c[ii][ij]  -  e  *  b[i][i	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[i][i    	non-compiled	[CE]  ']'  expected	11	None	replace
28	[BUG]  [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  final  double  e  =  inverse  *  sqrt  *  c[ii][ir];  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	final  double  e  =  inverse  *  sqrt  *  c[ii][ir];	      final    double    e    =    inverse    *    c[ii][ir];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  if(loop  ==  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  ==  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  ==  0)  {  for(int  i  =  r  +  1;  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[i];    final    double    f    =    c[ii][ij]    -    e    *    b[i][i    	non-compiled	[CE]  ']'  expected	15	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  index  +  1;  j  <  0;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index  +  1;  j  <  0;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index  +  1;  j  <  0;  ++j)  {	  for(int    j    =    index    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
31	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
32	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  For(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  For(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    For(int  j  =  index.length  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	9	None	add
33	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  for(int  i  =  index.length  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  for(int  i  =  index.length  +  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    for(int  i  =  index.length  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
34	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  0;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  index.length  +  1;  j  <  0;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
35	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  0;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  0;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index.length  +  1;  j  <  0;  ++j)  {	  for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	10	3	replace
36	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[i];    final    double    f    =    c[ii][ij]    -    e    *    b[i][    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  int  c[ii][ii]  -=  e  *  e;  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  int  c[ii][ii]  -=  e  *  e;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	        c[ii][ii]    -=    e    *    e;    int  c[ii][ii]  -=  e  *  e;	  	non-compiled	[CE]  ']'  expected	1	None	add
38	[BUG]  [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii],  -=  e  *  e;  [CE]  not  a  statement  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]      c[ii][ii]  -=  e  *  e;  c[ii][ii],  -=  e  *  e;  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	        c[ii][ii]    -=    e    *    e;    c[ii][ii],  -=  e  *  e;	  	non-compiled	[CE]  not  a  statement	1	None	add
39	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  final  int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  final  int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    final  int  j  =  index.length  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	9	None	add
40	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  i;  ++j)  {  int  j  =  index.length  +  1;  j  <  i;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    index.length    +    1;    j    <    i;    ++j)    {    int  j  =  index.length  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	9	None	add
41	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[i];  final  double  f  =  c[ii][ij]  -  e  *  b[i][i	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[i];    final    double    f    =    c[ii][ij]    -    e    *    b[i][i    	non-compiled	[CE]  ']'  expected	15	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  final  int  j  =  i  +  1;  j  <  r;  ++j)  {  [CE]  >  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  final  int  j  =  i  +  1;  j  <  r;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    i    +    1;    j    <    r;    ++j)    {    final  int  j  =  i  +  1;  j  <  r;  ++j)  {	  	non-compiled	[CE]  >  expected	5	None	add
43	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  int  j  =  i  +  1;  j  <  r;  ++j)  {  [CE]  >  expected  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  i  +  1;  j  <  r;  ++j)  {  int  j  =  i  +  1;  j  <  r;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    i    +    1;    j    <    r;    ++j)    {    int  j  =  i  +  1;  j  <  r;  ++j)  {	  	non-compiled	[CE]  >  expected	5	None	add
44	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[i][i    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[i][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[i][i    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  final  double  e  =  inverse  *  b[ii][ir];  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	final  double  e  =  inverse  *  b[ii][ir];	      final    double    e    =    inverse    *    c[ii][ir];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[j];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[ii][i    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	add	for(int  j  =  index.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	replace
49	[BUG]  [BUGGY]  for(int  j  =  index.length  +  1;  j  <  order;  ++j)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index.length  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	3	replace
50	[BUG]  [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  final  int  j  =  r  +  1;  j  <  order;  ++j)  {  [CE]  >  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  r  +  1;  j  <  order;  ++j)  {  final  int  j  =  r  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int    j    =    r    +    1;    j    <    order;    ++j)    {    final  int  j  =  r  +  1;  j  <  order;  ++j)  {	  	non-compiled	[CE]  >  expected	7	None	add
51	[BUG]  [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][  [BUGGY]    for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	if(loop  >  0)  {  for(int  i  =  index[i];  i  <  i;  ++i)  {  final  int  j  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[ii][	      if(loop    >    0)    {    for(int    i    =    r    +    1;    i    <    i;    ++i)    {    final    int    j    =    index[j];    final    double    f    =    c[ii][ij]    -    e    *    b[ii][i    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  index  +  1;  j  <  order;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index  +  1;  j  <  order;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index  +  1;  j  <  order;  ++j)  {	  for(int    j    =    r    +    1;    j    <    order;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
53	[BUG]  [BUGGY]  for(int  j  =  index  +  1;  j  <  ii;  ++j)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;    [BUGGY]  for(int  j  =  index  +  1;  j  <  ii;  ++j)  {  [BUGGY]    final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  }  loop  =  ++r  <  order;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	129	129	2	replace	for(int  j  =  index  +  1;  j  <  ii;  ++j)  {	  for(int    j    =    index    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
