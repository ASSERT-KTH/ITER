increase failing tests,71,replace, [FE] AssertionError testMath789, final  double[][]  r  =  matrix.getSmallVariableDecomposition();  ,for(int i = 0; i < small - 1; ++i) {
increase failing tests,71,replace, [FE] NonPositiveDefiniteMatrixException testMath789, final  double[][]  r  =  matrix.getSmallVariableDecomposition();  ,for(int i = 0; i < order - 1; ++i) {
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[1][order];  final  double[][]  b  =  new  double[0][order];  ,final double[][] b = new double[1][order]; final double[][] d = new double[0][order];
increase failing tests,66,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[256][1];  ,final double[][] c = new double[256][1];
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testMath789, int  r  =(order  >  0)?  0  :  b.length;  ,int r =(order == 0)? 0 : b.length;
increase failing tests,72,replace, [FE] AssertionError testMath789, b[i]  =  small.incrementIntSize();  ,final double[][] r = new double[0][i];
increase failing tests,72,replace, [FE] AssertionError testMath789, b[i]  =  small.incrementIntSize();  ,final double[][] s = new double[0][i];
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testMath789, int  r  =(b.length  >=  0)?  0  :  b.length;  ,int r =(b.length == 0)? 0 : b.length;
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testMath789, int  r  =(b.length  >=  0)?  0  :  b.length;  ,int r =(b.length < 2)? 0 : b.length;
increase failing tests,72,replace, [FE] AssertionError testMath789, double  r  =(value  <  0)?  -1  :  value;  ,double r =(i < 0)? -1 : i;
increase failing tests,72,replace, [FE] AssertionError testMath789, double  r  =(value  <  0)?  -1  :  value;  ,double r =(i < 0)? -1 : small;
increase failing tests,65,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  String  order  =  matrix.getColumnDimension()  +  1;  ,final Integer order = matrix.getColumnDimension() + 1;
increase failing tests,65,replace, [FE] MatrixDimensionMismatchException testMath789, final  double  order  =  matrix.getOrnMask();  ,final int order = matrix.getColumnDimension() - 1;
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[1][order];  final  double[][]  c  =  new  double[256][order];  ,final double[][] b = new double[1][order]; final double[][] h = new double[256][order];
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[1][order];  final  double[][]  c  =  new  double[256][order];  ,final double[][] b = new double[1][order]; final double[][] d = new double[256][order];
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[256][order  /  1];  ,final double[][] b = new double[256][order / 2];
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[256][order  /  1];  ,final double[][] b = new double[256][order / 4];
increase failing tests,67,replace, [FE] ArrayIndexOutOfBoundsException testMath789, final  double[][]  b  =  new  double[256][order  /  1];  ,final double[][] b = new double[256][order % 2];
increase failing tests,72,replace, [FE] AssertionError testMath789, int[]  c  =  new  double[order],  b,  order;  ,if(swap == null) { throw new IllegalStateException(""); }
increase failing tests,72,replace, [FE] AssertionError testMath789, setSmallIndex(matric.getStandardDecomposition()  -  1);  ,final double[][] d = new double[128][order + 1]; final double[][] e = new double[128][order + 1];
increase failing tests,72,replace, [FE] AssertionError testMath789, this(c,  matrix.getSmallDecomposition(),  0,  matrix.getRawClass());  ,int[] r = new int[6];
increase failing tests,72,replace, [FE] AssertionError testMath789, this(c,  matrix.getSmallDecomposition(),  0,  matrix.getRawClass());  ,int[] r = new int[0];
increase failing tests,72,replace, [FE] AssertionError testMath789, this(c,  matrix.getSmallDecomposition(),  0,  matrix.getRawClass());  ,int[] r = new int[2];
increase failing tests,72,replace, [FE] AssertionError testMath789, this(c,  matrix.getSmallDecomposition(),  0,  matrix.getRawClass());  ,int[] r = new int[7];
increase failing tests,72,replace, [FE] AssertionError testMath789, int  i  =  matrix.getIntValue(i)-  1;  ,final double[][] r = new double[2][i];
increase failing tests,72,replace, [FE] AssertionError testMath789, int  i  =  matrix.getIntValue(i)-  1;  ,final double[][] s = new double[2][i];
increase failing tests,72,replace, [FE] ArrayStoreException testMath789, final  int  rank  =  matrix.getLowerBound()  +  1;  ,System.arraycopy(c, 0, swap, 0, c.length);
increase failing tests,72,replace, [FE] ArrayStoreException testMath789, final  int  rank  =  matrix.getLowerBound()  +  1;  ,System.arraycopy(c, 0, swap, 1, c.length);
