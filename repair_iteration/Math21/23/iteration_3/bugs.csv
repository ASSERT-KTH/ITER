bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][short]);  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][short]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[0][short]);	  final    double    sqrt    =    FastMath.sqrt(c[0][l]);    	non-compiled	[CE]  '.class'  expected	3	None	replace
2	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  scale;  ++i)  {  c[i][ir]  =  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  scale;  ++i)  {  c[i][ir]  =  1;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  scale;  ++i)  {  c[i][ir]  =  1;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    c[i][ir]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(small,  matrix);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(small,  matrix);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(small,  matrix);	  final    double    order    =    FastMath.sqrt(matrix);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	11	None	replace
4	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(root,  matrix);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(root,  matrix);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(root,  matrix);	  final    double    order    =    FastMath.sqrt(matrix,    root);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
5	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                  AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  small);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(matrix,  small);	  final    double    order    =    FastMath.sqrt(matrix,    root);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
6	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  [CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    final  double  sqrt  =  FastMath.sqrt(c[1][ir]);	  	non-compiled	[CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	add
7	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  final  double  sqrt  =  FastMath.sqrt(c[2][ir]);  [CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][ir]);  final  double  sqrt  =  FastMath.sqrt(c[2][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    final  double  sqrt  =  FastMath.sqrt(c[2][ir]);	  	non-compiled	[CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	1	None	add
8	[BUG]  [BUGGY]  double  order  =  matrix.size();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  double  order  =  matrix.size();  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	double  order  =  matrix.size();	  int    order    =    matrix.size()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	4	None	replace
9	[BUG]  [BUGGY]  sqrt  =  Math.sqrt(c[ii][ir]  +  1);  [CE]  cannot  find  symbol  sqrt  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  sqrt  =  Math.sqrt(c[ii][ir]  +  1);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	sqrt  =  Math.sqrt(c[ii][ir]  +  1);	  sqrt    =    Math.sqrt(c[ii][ir]);    	non-compiled	[CE]  cannot  find  symbol  sqrt	6	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][0]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	add	final  double  sqrt  =  FastMath.sqrt(c[1][0]);	  final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    	compilable	  [FE]  AssertionError  	2	3	replace
11	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[1][0]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[1][0]);	  final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    	compilable	  [FE]  AssertionError  	2	3	replace
12	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[i][l]);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[i][l]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[i][l]);	  final    double    sqrt    =    FastMath.sqrt(c[ii][l]);    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
13	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  small);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  small);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	5	None	replace
14	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  scale);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  scale);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  scale);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	5	None	replace
15	[BUG]  [BUGGY]  int  order  =  matrix.length  /  2;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                  AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  int  order  =  matrix.length  /  2;  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	int  order  =  matrix.length  /  2;	  int    order    =    matrix.length    -    2;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	10	None	replace
16	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][switch]);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][switch]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[0][switch]);	  final    double    sqrt    =    FastMath.sqrt(c[0][ij]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
17	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][ir]  =  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][ir]  =  1;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][ir]  =  1;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    b[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]  double  order  =  matrix.length  -  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  double  order  =  matrix.length  -  1;  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	double  order  =  matrix.length  -  1;	  double    order    =    matrix.length;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	29	None	replace
19	[BUG]  [BUGGY]  double  order  =  matrix.length  -  small;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                  AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  double  order  =  matrix.length  -  small;  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	double  order  =  matrix.length  -  small;	  double    order    =    matrix.length;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	29	None	replace
20	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  1);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  1);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  1);	  final    double    sqrt    =    FastMath.sqrt(c[ii][short]);    	non-compiled	[CE]  '.class'  expected	15	None	replace
21	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  /  size);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  /  size);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][short]  /  size);	  final    double    sqrt    =    FastMath.sqrt(c[ii][short]);    	non-compiled	[CE]  '.class'  expected	15	None	replace
22	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  [CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final    double    sqrt    =    FastMath.sqrt(b[0][ir]);    final  double  sqrt  =  FastMath.sqrt(b[0][ir]);	  	non-compiled	[CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	27	None	add
23	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  sqrt  =  FastMath.sqrt(b[1][ir]);  [CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  sqrt  =  FastMath.sqrt(b[1][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final    double    sqrt    =    FastMath.sqrt(b[0][ir]);    final  double  sqrt  =  FastMath.sqrt(b[1][ir]);	  	non-compiled	[CE]  variable  sqrt  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	27	None	add
24	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[i][small]);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[i][small]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[i][small]);	  final    double    sqrt    =    FastMath.sqrt(c[ii][small]);    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
25	[BUG]  [BUGGY]  final  int  sqrt  =  FastMath.sqrt(c[0][sqrt]);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  int  sqrt  =  FastMath.sqrt(c[0][sqrt]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  int  sqrt  =  FastMath.sqrt(c[0][sqrt]);	  final    double    sqrt    =    FastMath.sqrt(c[0][sqrt]);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
26	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][sqrt],  small);  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][sqrt],  small);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[0][sqrt],  small);	  final    double    sqrt    =    FastMath.sqrt(c[0][sqrt]);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
27	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(matrix[0][ir]);  [CE]  array  required,  but  RealMatrix  found  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(matrix[0][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(matrix[0][ir]);	  final    double    sqrt    =    FastMath.sqrt(b[0][ir]);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	28	None	replace
28	[BUG]  [BUGGY]  double  order  =  matrix.length();  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  double  order  =  matrix.length();  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	double  order  =  matrix.length();	  int    order    =    matrix.length()    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	16	None	replace
29	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][i]  =  1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][i]  =  1;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  b[i][i]  =  1;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    b[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
30	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  c[i][i]  =  2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  c[i][i]  =  2;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  size;  ++i)  {  c[i][i]  =  2;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    c[i][i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][j]);  [CE]  cannot  find  symbol  ii  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][j]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][j]);	  final    double    sqrt    =    FastMath.sqrt(c[ii][ij]);    	non-compiled	[CE]  cannot  find  symbol  ii	30	None	replace
32	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][ir],  c[1][ir]);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][ir],  c[1][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[0][ir],  c[1][ir]);	  final    double    sqrt    =    FastMath.sqrt(c[0][ir]);    final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	8	None	replace
33	[BUG]  [BUGGY]  int  order  =  matrix.length  /  1;  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  int  order  =  matrix.length  /  1;  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	int  order  =  matrix.length  /  1;	  int    order    =    matrix.length    -    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	9	None	replace
34	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][small]);  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[0][small]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[0][small]);	  final    double    sqrt    =    FastMath.sqrt(c[0][l]);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
35	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  size);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  size);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][short]  +  size);	  final    double    sqrt    =    FastMath.sqrt(c[ii][short]);    	non-compiled	[CE]  '.class'  expected	15	None	replace
36	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  inverse);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  inverse);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(matrix,  inverse);	  final    double    order    =    FastMath.sqrt(matrix,    root);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
37	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[1][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	add	final  double  sqrt  =  FastMath.sqrt(b[1][ir]);	  final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
38	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[1][ir]);  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[1][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(b[1][ir]);	  final    double    sqrt    =    FastMath.sqrt(c[1][ir]);    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
39	[BUG]  [BUGGY]  sqrt  =  Math.sqrt(b[ii][ir]);  [CE]  cannot  find  symbol  sqrt  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  sqrt  =  Math.sqrt(b[ii][ir]);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	sqrt  =  Math.sqrt(b[ii][ir]);	  sqrt    =    Math.sqrt(c[ii][ir]);    	non-compiled	[CE]  cannot  find  symbol  sqrt	6	None	replace
40	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][null]);  [CE]  cannot  find  symbol  ii  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][null]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][null]);	  final    double    sqrt    =    FastMath.sqrt(c[ii][small]);    	non-compiled	[CE]  cannot  find  symbol  ii	21	None	replace
41	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  b[i][ir]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  b[i][ir]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  b[i][ir]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    b[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
42	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][ir]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][ir]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][ir]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
43	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][ir]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][ir]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][ir]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  final  int  order  =  FastMath.sqrt(c[0][sqrt]);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  int  order  =  FastMath.sqrt(c[0][sqrt]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  int  order  =  FastMath.sqrt(c[0][sqrt]);	  final    double    sqrt    =    FastMath.sqrt(c[0][sqrt]);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	26	None	replace
45	[BUG]  [BUGGY]  final  double  r  =  FastMath.sqrt(c[ir][ir]);  if(r  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  r  =  FastMath.sqrt(c[ir][ir]);  if(r  ==  0)  {  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  r  =  FastMath.sqrt(c[ir][ir]);  if(r  ==  0)  {	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    if(order    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
46	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][i]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  index.length;  ++i)  {  c[i][i]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
47	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][i]  =  1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][i]  =  1;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][i]  =  1;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    c[i][i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(b[ir][ir]);  if(order  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(b[ir][ir]);  if(order  ==  0)  {  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(b[ir][ir]);  if(order  ==  0)  {	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    if(order    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
49	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][ir]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][ir]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][ir]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    b[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
50	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][i]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  b[i][i]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    b[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
51	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][ir]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][ir]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][ir]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][ir]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
52	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][i]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  c[i][i]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
53	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][i]  =  0;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  index;  ++i)  {  c[i][i]  =  0;  }	  if(loop)    {    for(int    i    =    0;    i    <    order;    ++i)    {    c[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
54	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  matrix);  [CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]                AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  order  =  FastMath.sqrt(matrix,  matrix);  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  order  =  FastMath.sqrt(matrix,  matrix);	  final    double    order    =    FastMath.sqrt(matrix,    root);    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	12	None	replace
55	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  r  =  FastMath.sqrt(b[0][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][ir]);  final  double  r  =  FastMath.sqrt(b[0][ir]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final    double    sqrt    =    FastMath.sqrt(b[0][ir]);    final  double  r  =  FastMath.sqrt(b[0][ir]);	  	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	27	None	add
56	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][sqrt]);  [CE]  possible  loss  of  precision  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(b[0][sqrt]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(b[0][sqrt]);	  final    double    sqrt    =    FastMath.sqrt(b[0][ir]);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
57	[BUG]  [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][l],  c[ii][l]);  [CE]  cannot  find  symbol  ii  [FE]            AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  final  double  sqrt  =  FastMath.sqrt(c[ii][l],  c[ii][l]);  [BUGGY]      b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	final  double  sqrt  =  FastMath.sqrt(c[ii][l],  c[ii][l]);	  final    double    sqrt    =    FastMath.sqrt(c[ii][l]);    	non-compiled	[CE]  cannot  find  symbol  ii	14	None	replace
58	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][ir]  =  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }    ++r;  loop  =  false;  }  else  {        [BUGGY]  if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][ir]  =  1;  }  [BUGGY]      final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	121	121	2	replace	if(loop)  {  for(int  i  =  0;  i  <  order;  ++i)  {  c[i][ir]  =  1;  }	  if(loop)    {    for(int    i    =    0;    i    <    size;    ++i)    {    c[i][ir]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
