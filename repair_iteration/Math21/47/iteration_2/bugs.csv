bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++r;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  if(loop)    {    ++r;    }    else    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  ')'  expected	1	None	replace
2	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	6	None	replace
3	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]]    	non-compiled	[CE]  ')'  expected	14	None	replace
4	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	13	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)    {    ++r;    }    if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	add
6	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)    {    ++r;    }    if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	add
7	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  If(loop)  {  ++r;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  If(loop)  {  ++r;  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)    {    ++r;    }    If(loop)  {  ++r;  }	  	non-compiled	[CE]  ';'  expected	2	None	add
8	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	11	None	replace
9	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	10	None	replace
10	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	9	None	replace
11	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	7	None	replace
12	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i][index[    	non-compiled	[CE]  ']'  expected	8	None	replace
13	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++i;  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }	  if(loop)    {    ++r;    }    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
14	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  AssertionError  r  =  new  AssertionError(c[ir][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  AssertionError  r  =  new  AssertionError(c[ir][ir]);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)    {    ++r;    }    AssertionError  r  =  new  AssertionError(c[ir][ir]);	  	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	add
15	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  AssertionError  r  =  new  AssertionError(loop);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++r;  }  AssertionError  r  =  new  AssertionError(loop);  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)    {    ++r;    }    AssertionError  r  =  new  AssertionError(loop);	  	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	2	None	add
16	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  if(loop)    {    ++r;    }    else    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
17	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
18	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
19	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	6	None	replace
20	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	6	None	replace
21	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	11	None	replace
22	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	11	None	replace
23	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ']'  expected	9	None	replace
24	[BUG]  [BUGGY]      if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]      if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]  [BUGGY]    loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	        if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]	  	non-compiled	[CE]  ')'  expected	4	None	add
25	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	7	None	replace
26	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	13	None	replace
27	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	13	None	replace
28	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]]    	non-compiled	[CE]  ')'  expected	14	None	replace
29	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	10	None	replace
30	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	10	None	replace
31	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i][index[    	non-compiled	[CE]  ']'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
33	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	11	None	replace
34	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	11	None	replace
35	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }      [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]    ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	      if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	13	None	replace
