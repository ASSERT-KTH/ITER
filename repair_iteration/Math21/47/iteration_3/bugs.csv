bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AssertionError  r  =  new  AssertionError(c[ir][ir]);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  AssertionError  r  =  new  AssertionError(c[ir][ir]);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	AssertionError  r  =  new  AssertionError(c[ir][ir]);	  if(loop)    {    ++r;    }    AssertionError    r    =    new    AssertionError(c[ir][ir]);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	14	None	replace
2	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][    	non-compiled	[CE]  ')'  expected	8	None	replace
3	[BUG]  [BUGGY]  if(loop)  {  if(switch  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  if(switch  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  if(switch  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(loop)    {    ++r;    }    if(loop)    {    ++r;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(loop)  {  if(switch  >  0)  {  throw  new  NonPositiveDefiniteMatrixException(switch[i][i]);  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  if(switch  >  0)  {  throw  new  NonPositiveDefiniteMatrixException(switch[i][i]);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  if(switch  >  0)  {  throw  new  NonPositiveDefiniteMatrixException(switch[i][i]);  }	  if(loop)    {    ++r;    }    if(loop)    {    ++r;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]]    	non-compiled	[CE]  ')'  expected	28	None	replace
6	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ')'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c	  if(loop)    {    for(int    i    =    r    +    1;    i    <    0;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ')'  expected	30	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++r;  }  else  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)  {  ++r;  }  else  if(loop)  {  ++r;  }	  if(loop)    {    ++r;    }    If(loop)    {    ++r;    }    	compilable	  [FE]  AssertionError  	7	2	replace
9	[BUG]  [BUGGY]  if(loop)  {  ++r;  }  else  if(loop)  {  ++r;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++r;  }  else  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++r;  }  else  if(loop)  {  ++r;  }	  if(loop)    {    ++r;    }    If(loop)    {    ++r;    }    	compilable	  [FE]  AssertionError  	7	2	replace
10	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  else  if(loop)  {  ++i;  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++i;  }  else  if(loop)  {  ++i;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }  else  if(loop)  {  ++i;  }	  if(loop)    {    ++r;    }    If(loop)    {    ++r;    }    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
11	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
12	[BUG]  [BUGGY]  AssertionError  r  =  new  AssertionError(small);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  AssertionError  r  =  new  AssertionError(small);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	AssertionError  r  =  new  AssertionError(small);	  if(loop)    {    ++r;    }    AssertionError    r    =    new    AssertionError(loop);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	15	None	replace
13	[BUG]  [BUGGY]  AssertionError  r  =  new  AssertionError(loop);  [CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  AssertionError  r  =  new  AssertionError(loop);  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	AssertionError  r  =  new  AssertionError(loop);	  if(loop)    {    ++r;    }    AssertionError    r    =    new    AssertionError(loop);    	non-compiled	[CE]  variable  r  is  already  defined  in  constructor  RectangularCholeskyDecomposition(RealMatrix,double)	15	None	replace
14	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  }  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  }	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	2	None	replace
15	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[    	non-compiled	[CE]  ']'  expected	35	None	replace
16	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    0;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	27	None	replace
17	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	26	None	replace
18	[BUG]  [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	20	None	replace
19	[BUG]  [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	25	None	replace
20	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i][index[    	non-compiled	[CE]  ']'  expected	12	None	replace
21	[BUG]  [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	29	None	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
23	[BUG]  [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
25	[BUG]  [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
26	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	11	None	replace
27	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  i,  small);  }	  if(loop)    {    ++r;    }    else    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    i,    small);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++small;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)  {  ++small;  }	  if(loop)    {    ++i;    }    	compilable	  [FE]  AssertionError  	13	2	replace
29	[BUG]  [BUGGY]  if(loop)  {  ++small;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++small;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++small;  }	  if(loop)    {    ++i;    }    	compilable	  [FE]  AssertionError  	13	2	replace
30	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	23	None	replace
31	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	4	None	replace
32	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  order;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(!loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  ')'  expected	32	None	replace
33	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[ir][ir]);  }  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[ir][ir]);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[ir][ir]);  }	  if(loop)    {    ++r;    }    AssertionError    r    =    new    AssertionError(c[ir][ir]);    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
34	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(	  if(!loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  ')'  expected	32	None	replace
35	[BUG]  [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( "  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(!loop)  {  for(int  i  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( "	  if(!loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	32	None	replace
36	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  'else'  without  'if'  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
37	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[i]],	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	26	None	replace
38	[BUG]  [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
39	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
40	[BUG]  [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][ir]);  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][ir]);  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++i;  }  else  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][ir]);  }	  if(loop)    {    ++r;    }    If(loop)    {    ++r;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
42	[BUG]  [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
43	[BUG]  [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)        {        ++r;        }        if(loop)    {    ++r;    }    if(loop)  {  ++r;  }  if(loop)  {  ++r;  }  if(loop)  {  ++r;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
44	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  >=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  >=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  >=  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	2	None	replace
45	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  scale;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  scale;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  scale;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	11	None	replace
46	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ')'  expected	9	None	replace
47	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[    	non-compiled	[CE]  ')'  expected	35	None	replace
48	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(	  if(loop)    {    for(int    i    =    r    +    1;    i    <    0;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ')'  expected	30	None	replace
49	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  0;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	34	None	replace
50	[BUG]  [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i][index[    	non-compiled	[CE]  ']'  expected	31	None	replace
51	[BUG]  [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	20	None	replace
52	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  size  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  r  +  1;  i  <  size;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    order;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	34	None	replace
54	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	11	None	replace
55	[BUG]  [BUGGY]  if(loop)  {  ++ij;  }  [CE]  cannot  find  symbol  ij  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++ij;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++ij;  }	  if(loop)    {    ++i;    }    	non-compiled	[CE]  cannot  find  symbol  ij	13	None	replace
56	[BUG]  [BUGGY]  if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  i  =  index  +  1;  i  <  size;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    size;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	9	None	replace
57	[BUG]  [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[i][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[i][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	25	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(!loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	add	if(!loop)  {  ++r;  }	  if(loop)    {    ++r;    }    if(loop)    {    ++r;    }    	compilable	  [FE]  AssertionError  	6	2	replace
59	[BUG]  [BUGGY]  if(!loop)  {  ++r;  }  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(!loop)  {  ++r;  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(!loop)  {  ++r;  }	  if(loop)    {    ++r;    }    if(loop)    {    ++r;    }    	compilable	  [FE]  AssertionError  	6	2	replace
60	[BUG]  [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(inverse!=  null)  {  for(int  i  =  r  +  1;  i  <  inverse;  ++i)  {  if(c[index[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    inverse;    ++i)    {    if(c[index[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[    	non-compiled	[CE]  ']'  expected	29	None	replace
61	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i]][index[i]]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i]][index[i]]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
62	[BUG]  [BUGGY]  if(loop)  {  ++sqrt;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  cannot  find  symbol  sqrt  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  ++sqrt;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]      loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  ++sqrt;  }  else  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	  if(loop)    {    ++i;    }    else    {    throw    new    NonPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  sqrt	16	None	replace
63	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]]	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	26	None	replace
64	[BUG]  [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  r;  i  <  order;  ++i)  {  if  (c[index[i]][index[i]]  <  -small)  {    throw  new  NonPositiveDefiniteMatrixException(c[index[i]][index[i]],  i,  small);  }  }        [BUGGY]  if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[  [BUGGY]      ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;  for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.7071067811865475	115	115	2	replace	if(loop)  {  for(int  ij  =  r  +  1;  i  <  ij;  ++i)  {  if(c[i][i]  <  -small)  {  throw  new  NonPositiveDefiniteMatrixException(c[i]][index[	  if(loop)    {    for(int    i    =    r    +    1;    i    <    ij;    ++i)    {    if(c[i][i]    <    -small)    {    throw    new    NonPositiveDefiniteMatrixException(c[i]][index[i]],    	non-compiled	[CE]  ')'  expected	26	None	replace
