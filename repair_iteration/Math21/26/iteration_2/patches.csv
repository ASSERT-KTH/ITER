bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c,  inverse);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c,  inverse);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c,  inverse);	  final    double    order    =    FastMath.sqrt(c,    sqrt);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  0;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  0;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  0;  ++i)  {	  for(int    i    =    index    +    1;    i    <    r;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
3	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c,  swap);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c,  swap);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c,  swap);	  final    double    order    =    FastMath.sqrt(switch);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
4	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  scale);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  scale);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  scale);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  inverse;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  inverse;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  FastMath.sqrt(c[ir][ir]);  b[i][r]  =  inverse;	  if(inverse!=    null)    {    final    double    order    =    FastMath.sqrt(c[ir][ir]);    b[i][r]    =    inverse;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
7	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    int  i  =  index.length  +  1;  i  <  order;  ++i)  {	  	non-compiled	[CE]  >  expected	1	None	add
8	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  For(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  For(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    For(int  i  =  index.length  +  1;  i  <  order;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
9	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  0;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  0;	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    inverse    =    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  b[i][r]  =  sqrt;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  b[i][r]  =  sqrt;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	b[i][r]  =  sqrt;	  b[i][r]    =    inverse;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  ir;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	for(int  i  =  index.length  +  1;  i  <  ir;  ++i)  {	  for(int    i    =    index    +    1;    i    <    ir;    ++i)    {    	compilable	  [FE]  AssertionError  	25	3	replace
12	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  ir;  ++i)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  ir;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index.length  +  1;  i  <  ir;  ++i)  {	  for(int    i    =    index    +    1;    i    <    ir;    ++i)    {    	compilable	  [FE]  AssertionError  	25	3	replace
13	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  -  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	for(int  i  =  index.length  -  1;  i  <  order;  ++i)  {	  for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
14	[BUG]  [BUGGY]  for(int  i  =  index.length  -  1;  i  <  order;  ++i)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  -  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index.length  -  1;  i  <  order;  ++i)  {	  for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	2	3	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    	compilable	  [FE]  AssertionError  	2	3	replace
16	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index.length  +  1;  i  <  0;  ++i)  {	  for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    	compilable	  [FE]  AssertionError  	2	3	replace
17	[BUG]  [BUGGY]  final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  scale);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  scale);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  scale);	  final    double    order    =    Math.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[0][ir]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[0][ir]);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  FastMath.sqrt(c[0][ir]);	  final    double    inverse    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  inverse.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  inverse.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  inverse.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    inverse;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	20	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  inverse;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	for(int  i  =  index.length  +  1;  i  <  inverse;  ++i)  {	  for(int    i    =    index    +    1;    i    <    inverse;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	3	replace
21	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  inverse;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  inverse;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index.length  +  1;  i  <  inverse;  ++i)  {	  for(int    i    =    index    +    1;    i    <    inverse;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	3	replace
22	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
23	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    For(int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
24	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  >  expected	16	None	add
25	[BUG]  [BUGGY]  for(int  i  =  order.length  +  1;  i  <  index.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  order.length  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  order.length  +  1;  i  <  index.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
26	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ir],  inverse);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ii][ir],  inverse);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ii][ir],  inverse);	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
27	[BUG]  [BUGGY]  final  double  inverse  =  1  *  sqrt.doubleValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  1  *  sqrt.doubleValue();  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  1  *  sqrt.doubleValue();	  final    double    inverse    =    1    /    sqrt.doubleValue();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  size  +  1;  i  <  index;  ++i)  {  [CE]  cannot  find  symbol  size  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  size  +  1;  i  <  index;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  size  +  1;  i  <  index;  ++i)  {	  for(int    i    =    index    +    1;    i    <    size;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  size	3	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  sqrt.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  sqrt.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  sqrt.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    r.length;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index.length  +  1;  i  <  r.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  sqrt.length;  ++i)  {  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  sqrt.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  r  +  1;  i  <  sqrt.length;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
32	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  1  *  inverse;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  1  *  inverse;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  1  *  inverse;	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    inverse    =    1    *    sqrt;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(matrix);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(matrix);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(matrix);	  final    double    order    =    FastMath.sqrt(small);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
34	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2;	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    inverse    =    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  final  int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index.length  +  1;  i  <  order;  ++i)  {  final  int  i  =  index.length  +  1;  i  <  order;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    index.length    +    1;    i    <    order;    ++i)    {    final  int  i  =  index.length  +  1;  i  <  order;  ++i)  {	  	non-compiled	[CE]  >  expected	1	None	add
36	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  final  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length;  ++i)  {  final  int  i  =  r  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    final  int  i  =  r  +  1;  i  <  index.length;  ++i)  {	  	non-compiled	[CE]  >  expected	16	None	add
37	[BUG]  [BUGGY]  final  double  inverse  =  FastMath.sqrt(b[ir][ir]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  FastMath.sqrt(b[ir][ir]);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  FastMath.sqrt(b[ir][ir]);	  final    double    inverse    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  inverses.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  inverses.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  inverses.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    inverse;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	20	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  r  +  1;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  r  +  1;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  r  +  1;  ++i)  {	  for(int    i    =    index    +    1;    i    <    r;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
40	[BUG]  [BUGGY]  final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  sqrt);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  sqrt);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  Math.sqrt(c[ir][ir],  inverse,  sqrt);	  final    double    order    =    Math.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  sqrt);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  sqrt);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir],  inverse,  sqrt);	  final    double    order    =    FastMath.sqrt(c[ir][ir],    inverse);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(b[ii][ir]);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(b[ii][ir]);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(b[ii][ir]);	  final    double    order    =    FastMath.sqrt(c[ii][ir]);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
43	[BUG]  [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2  *  sqrt;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2  *  sqrt;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  order  =  FastMath.sqrt(c[ir][ir]);  inverse  =  2  *  sqrt;	  final    double    order    =    FastMath.sqrt(c[ir][ir]);    inverse    =    1    *    sqrt;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  index.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  index.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  index.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
45	[BUG]  [BUGGY]  final  double  inverse  =  1  %  sqrt;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  1  %  sqrt;  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  1  %  sqrt;	  final    double    inverse    =    1    *    sqrt;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  s.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  s.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  s.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    r;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
47	[BUG]  [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[ii][ir]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  final  double  inverse  =  FastMath.sqrt(c[ii][ir]);  [BUGGY]      for  (int  i  =  r  +  1;  i  <  order;  ++i)  {  final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	final  double  inverse  =  FastMath.sqrt(c[ii][ir]);	  final    double    inverse    =    FastMath.sqrt(c[ir][ir]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  index  +  1;  i  <  ir.length;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  index  +  1;  i  <  ir.length;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  index  +  1;  i  <  ir.length;  ++i)  {	  for(int    i    =    index    +    1;    i    <    ir;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	25	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length  -  1;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	add	for(int  i  =  r  +  1;  i  <  index.length  -  1;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	compilable	  [FE]  AssertionError  	17	3	replace
50	[BUG]  [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length  -  1;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ++r;  loop  =  false;  }  else  {  final  double  sqrt  =  FastMath.sqrt(c[ir][ir]);  b[r][r]  =  sqrt;  final  double  inverse=  1  /  sqrt;      [BUGGY]  for(int  i  =  r  +  1;  i  <  index.length  -  1;  ++i)  {  [BUGGY]      final  int  ii  =  index[i];  final  double  e  =  inverse  *  c[ii][ir];  b[i][r]  =  e;  c[ii][ii]  -=  e  *  e;  for  (int  j  =  r  +  1;  j  <  i;  ++j)  {  final  int  ij  =  index[j];  final  double  f  =  c[ii][ij]  -  e  *  b[j][r];  c[ii][ij]  =  f;  c[ij][ii]  =  f;  }  [CLASS]  RectangularCholeskyDecomposition  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double)  RealMatrix  matrix  double  small  [VARIABLES]  double[][]  b  c  int[]  index  swap  boolean  loop  RealMatrix  matrix  root  int  i  ii  ij  ir  isi  j  order  r  rank  tmp  double  e  f  inverse  small  sqrt  	projects/Math21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java	0.8164965809277261	124	124	2	replace	for(int  i  =  r  +  1;  i  <  index.length  -  1;  ++i)  {	  for(int    i    =    r    +    1;    i    <    index.length;    ++i)    {    	compilable	  [FE]  AssertionError  	17	3	replace
