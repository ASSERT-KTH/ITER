bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(objType  ==  null)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType  ==  null)  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null)  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.hasProperty(prop))  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
4	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  ||  constraintObjType.isRecordType())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isRecordType())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
5	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isRecordType())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
6	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.hasProperty(prop))  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  [FE]                AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]    [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	  	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.isRecordType())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isRecordType())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
10	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.isUnknownType())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isUnknownType())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.hasProperty(prop))  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.isConstructor())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]  if(objType!=  null  &&  objType.isInstanceType())  {  [BUGGY]  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isInstanceType())  {	if  (objType  !=  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
