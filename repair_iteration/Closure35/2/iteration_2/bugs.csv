bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  &&  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(strObjType!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isRecordType())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isRecordType())  {	  if(objType!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
8	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  objType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isRecordType())  {	  if(objType!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
9	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isRecordType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isRecordType())  {	  if(objType!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObj);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  constraintObj);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObj);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
11	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraint);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  constraint);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraint);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
12	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraintObj);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(type,  constraintObj);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
13	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraint);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraint);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(type,  constraint);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
14	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  null);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObj,  null);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraint,  null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  constraint,  null);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraint,  null);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  type);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
18	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
20	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
21	[BUG]  [BUGGY]  if(strObjType!=  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(strObjType!=  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.hasProperty(prop))  {	  if(objType!=    null    &&    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
23	[BUG]  [BUGGY]  if(objType!=  null  &&  type.hasProperty(objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.hasProperty(objType))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.hasProperty(objType))  {	  if(objType!=    null    &&    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  if(objType!=  null  &&  type.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.hasProperty(prop))  {	  if(objType!=    null    &&    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  if(objType!=  null  &&  constraints.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraints.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraints.hasProperty(prop))  {	  if(objType!=    null    &&    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
27	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
28	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
29	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
30	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  objType.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
31	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  &&  constraintObj.isInstanceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isInstanceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
32	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
33	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
34	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
35	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(objType))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
36	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
37	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
38	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {	  if(objType    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
39	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {	  if(objType    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
40	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
42	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
43	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
44	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  objType.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
45	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  &&  constraintObj.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
46	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObj.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
47	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
48	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraint.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
49	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  objType.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
50	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  type.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
51	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  &&  constraintObj.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
52	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
53	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
54	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObjType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
55	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
56	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
57	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
58	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
59	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
60	[BUG]  [BUGGY]  if(strObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(strObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
61	[BUG]  [BUGGY]  if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
62	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  &&  objType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
63	[BUG]  [BUGGY]  if(straintObj!=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(straintObj!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
64	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
65	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
66	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
67	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  if(strObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(strObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType  ==  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
69	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
70	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObj.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
71	[BUG]  [BUGGY]  if(objType!=  null  &&  prop.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  prop.isPropertyTypeDeclared(objType))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  prop.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
72	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  ObjectType  propType  =  objType.getPropertyType(prop);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getPropertyType(prop);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
73	[BUG]  [BUGGY]  ObjectType  propType  =  objType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  ObjectType  propType  =  objType.restrictByNotNullOrUndefined();  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
74	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  constraintObj);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(objType,  constraintObj);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
75	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(prop);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getOwnPropertyType(prop);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
76	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.defineInferredProperty(prop,  objType);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
77	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.hasPropertyType(prop))  {	  if(objType    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
78	[BUG]  [BUGGY]  if(straintObjType!=  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(straintObjType!=  null  ||  constraintObjType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  ||  constraintObjType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
79	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraint))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraint))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraint))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
80	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyType())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isPropertyType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyType())  {	  if(objType!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isRecordType())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isRecordType())  {	  if(objType    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isUnknownType())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintObjType.isUnknownType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isUnknownType())  {	  if(objType    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  objType.hasProperty(prop))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType  ==  null  ||  objType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  objType.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintstObj.hasProperty(prop))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType  ==  null  ||  constraintstObj.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintstObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  objType.isRecordType())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  objType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  objType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  objType.isRecordType())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  ||  objType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  objType.isRecordType())  {	  if(objType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  objType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  objType);  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(prop,  objType);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  if(straintObj!=  null  &&  objType.isRecordType())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(straintObj!=  null  &&  objType.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  objType.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
93	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isRecordType())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  constraintstObj.isRecordType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isRecordType())  {	  if(objType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObj!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
96	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(constraintObjType!=  null  ||  objType.hasProperty(prop))  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  objType.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
97	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isInterfaceType())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
98	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  objType.isInterface())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
99	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());    [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]    for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
