bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
2	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
3	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
4	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
5	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObjType.isRecordType())  {	  if(objType    ==    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
7	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
8	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
9	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
10	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  type.isInterface())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  type.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  type.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
11	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
12	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(strObjType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
13	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObj.hasProperty(prop))  {	  if(constraintObj    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
14	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObj.hasProperty(prop))  {	  if(constraintObj    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
15	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraintObj);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(prop,  constraintObj);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
16	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(type,  objType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(type,  objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(type,  objType);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
17	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraintObjType);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraintObjType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(prop,  constraintObjType);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
18	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraint);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(prop,  constraint);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
19	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  type);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(prop,  type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(prop,  type);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
20	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
21	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
22	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
23	[BUG]  [BUGGY]  if(strObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
24	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyType())  {	  if(straintObj!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
25	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObjType.isRecordType())  {	  if(straintObj!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
26	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
27	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraint.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraint.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraint.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
28	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
29	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
30	[BUG]  [BUGGY]  if(type!=  null  &&  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.hasProperty(prop))  {	  if(objType!=    null    &&    type.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
31	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
32	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
33	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.hasProperty(prop))  {	  if(constraintObjType!=    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
34	[BUG]  [BUGGY]  if(objType!=  null  ||  constraints.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraints.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraints.hasProperty(prop))  {	  if(constraintObjType!=    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
35	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.hasProperty(prop))  {	  if(constraintObjType!=    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
36	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraint.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraint.hasProperty(prop))  {	  if(constraintObjType!=    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
37	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(strObjType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
38	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
39	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
40	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
41	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
42	[BUG]  [BUGGY]  if(strObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  ||  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
43	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
44	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
45	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
46	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
47	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
48	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
49	[BUG]  [BUGGY]  if(objectType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objectType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objectType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
50	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  inferPropertyTypesToMatchConstraint(type,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(type,  constraintObj);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
51	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(constraintObj,  objType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  inferPropertyTypesToMatchConstraint(constraintObj,  objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(constraintObj,  objType);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
52	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(type,  objType);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  inferPropertyTypesToMatchConstraint(type,  objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(type,  objType);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
53	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  type);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(objType,  type);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
54	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintstObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
55	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintstObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintstObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintstObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintstObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
56	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintstObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
57	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintstObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
58	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(prop);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
59	[BUG]  [BUGGY]  ObjectType  propType  =  type.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  type.getPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  type.getPropertyType(prop);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
60	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraint.getPropertyType(prop);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
61	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(objType);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
62	[BUG]  [BUGGY]  ObjectType  propType  =  type.getPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  type.getPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  type.getPropertyType(objType);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
63	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isInstanceType())  {	  if(objType!=    null    &&    type.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
64	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    type.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
65	[BUG]  [BUGGY]  if(objType!=  null  ||  type.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  type.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  type.isInstanceType())  {	  if(objType!=    null    &&    type.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
66	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isUnknownType())  {	  if(objType!=    null    &&    constraint.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
67	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.isUnknownType())  {	  if(objType!=    null    &&    constraint.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
68	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isUnknownType())  {	  if(objType!=    null    &&    constraint.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
69	[BUG]  [BUGGY]  if(type  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type  ==  null  ||  constraintObjType.hasProperty(prop))  {	  if(strObjType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
70	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
71	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
72	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
73	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
74	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObjType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
75	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isUnknownType())  {	  if(objType!=    null    &&    type.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
76	[BUG]  [BUGGY]  if(objType!=  null  ||  type.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  type.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  type.isUnknownType())  {	  if(objType!=    null    &&    type.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
77	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    type.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
78	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObjType);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  constraintObjType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObjType);	  objType.defineInferredProperty(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
79	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(constraintObj,  type);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(constraintObj,  type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(constraintObj,  type);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
80	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(constraintObj,  constraint);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(constraintObj,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(constraintObj,  constraint);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
81	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(prop,  constraintObj);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(prop,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(prop,  constraintObj);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
82	[BUG]  [BUGGY]  ObjType.inferPropertyTypesToMatchConstraint(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjType.inferPropertyTypesToMatchConstraint(type,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjType.inferPropertyTypesToMatchConstraint(type,  constraintObj);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
83	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(scope,  constraintObj);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(scope,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(scope,  constraintObj);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
84	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
85	[BUG]  [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
86	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
87	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
88	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
89	[BUG]  [BUGGY]  For(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  For(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	For(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
90	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
91	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
92	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
93	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
94	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    type.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
95	[BUG]  [BUGGY]  if(objType!=  null  ||  type.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  type.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  type.isConstructor())  {	  if(objType!=    null    &&    type.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
96	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObj.isRecordType())  {	  if(constraintObj    ==    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
97	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.isRecordType())  {	  if(constraintObj!=    null    &&    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
98	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isRecordType())  {	  if(constraintObj!=    null    ||    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
99	[BUG]  [BUGGY]  if(objType  >=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  >=  null  &&  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  >=  null  &&  constraintObj.isRecordType())  {	  if(constraintObj!=    null    &&    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
100	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isRecordType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isRecordType())  {	  if(objType!=    null    &&    constraint.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
101	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.isRecordType())  {	  if(objType!=    null    &&    constraint.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
102	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraint.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraint.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraint.isRecordType())  {	  if(objType!=    null    &&    constraint.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
103	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraint.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraint.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraint.isRecordType())  {	  if(objType!=    null    &&    constraint.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
104	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type,  null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  type,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
105	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  typeToInfer,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  typeToInfer,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
106	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  null,  constraintObj);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  null,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  null,  constraintObj);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
107	[BUG]  [BUGGY]  objType.defineInferredProperty(type,  constraint,  null);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(type,  constraint,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(type,  constraint,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
108	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop))  {	  if(constraintObjType!=    null    ||    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
109	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  type);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObj,  type);	  objType.defineInferredProperty(prop,    constraintObj,    null);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
110	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  type,  null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  type,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObj,  type,  null);	  objType.defineInferredProperty(prop,    constraintObj,    null);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
111	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  typeToInfer);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  constraintObj,  typeToInfer);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  constraintObj,  typeToInfer);	  objType.defineInferredProperty(prop,    constraintObj,    null);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
112	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(constraintObjType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
113	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
114	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
115	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
116	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
117	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
118	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isPropertyType())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
119	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isPropertyType())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
120	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isPropertyType())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
121	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isPropertyType())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
122	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyType()  ||  constraintObjType.isRecordType())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
123	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type,  constraintObj);	  objType.defineInferredProperty(prop,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
124	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isInstanceType())  {	  if(objType    ==    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
125	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.isInstanceType())  {	  if(objType    ==    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
126	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObjType.isInstanceType())  {	  if(objType    ==    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
127	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
128	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
129	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
130	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  typeToInfer))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  typeToInfer))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  typeToInfer))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
131	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
132	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    prop.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
133	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    prop.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
134	[BUG]  [BUGGY]  if(objType!=  null  &&  prop.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  prop.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  prop.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    prop.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
135	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    prop.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
136	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraints.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraints.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraints.hasProperty(prop))  {	  if(objType!=    null    &&    constraints.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
137	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraints.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraints.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraints.hasProperty(prop))  {	  if(objType!=    null    &&    constraints.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
138	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraint.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraint.hasProperty(prop))  {	  if(objType!=    null    &&    constraints.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
139	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
140	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
141	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
142	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
143	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
144	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
145	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
146	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
147	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
148	[BUG]  [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
149	[BUG]  [BUGGY]  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
150	[BUG]  [BUGGY]  For(JSType  objType  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  For(JSType  objType  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	For(JSType  objType  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
151	[BUG]  [BUGGY]  if(objType!=  null)  {  for(JSType  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(JSType  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(JSType  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
152	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraint.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
153	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
154	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
155	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
156	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraint.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
157	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
158	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObjType.isRecordType())  {	  if(constraintObjType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
159	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObj.isRecordType())  {	  if(constraintObjType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
160	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.hasProperty(prop))  {	  if(objType!=    null    &&    constraint.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
161	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.hasProperty(objType))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.hasProperty(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.hasProperty(objType))  {	  if(objType!=    null    &&    constraint.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
162	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.hasProperty(prop))  {	  if(objType!=    null    &&    constraint.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
163	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraint.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraint.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraint.hasProperty(prop))  {	  if(objType!=    null    &&    constraint.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
164	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
165	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
166	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
167	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
168	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
169	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObj.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
170	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
171	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
172	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
173	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
174	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
175	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isConstructor()  ||  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isConstructor()  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isConstructor()  ||  objType.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
176	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
177	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
178	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
179	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj.getOwnPropertyType(prop);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
180	[BUG]  [BUGGY]  ObjectType  propType  =  type.getOwnPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  type.getOwnPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  type.getOwnPropertyType(prop);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
181	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj.getOwnPropertyType(objType);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
182	[BUG]  [BUGGY]  ObjectType  propType  =  type.getOwnPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  type.getOwnPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  type.getOwnPropertyType(objType);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
183	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraint.getOwnPropertyType(prop);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
184	[BUG]  [BUGGY]  if(strObjType!=  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  ||  constraintObj.hasProperty(prop))  {	  if(objType!=    null    ||    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
185	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isRecordType())  {	  if(objType!=    null    ||    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
186	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
187	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
188	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
189	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
190	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type,  constraint);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  type,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type,  constraint);	  objType.defineInferredProperty(prop,    constraint);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
191	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
192	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
193	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
194	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
195	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
196	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
197	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
198	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
199	[BUG]  [BUGGY]  if(objType!=  null  &&  type.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(objType))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
200	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(objType))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
201	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(objType))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
202	[BUG]  [BUGGY]  if(type!=  null  &&  objType.hasProperty(type))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.hasProperty(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.hasProperty(type))  {	  if(objType!=    null    &&    type.hasProperty(objType))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
203	[BUG]  [BUGGY]  if(strObj!=  null  &&  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObj!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObj!=  null  &&  constraintObj.isRecordType())  {	  if(constraintObj!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
204	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraint.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraint.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraint.isInstanceType())  {	  if(objType!=    null    &&    constraint.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
205	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintType.isInstanceType())  {	  if(objType!=    null    &&    constraint.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
206	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraint.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraint.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraint.isInstanceType())  {	  if(objType!=    null    &&    constraint.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
207	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObjType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
208	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
209	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isPropertyTypeDeclared(type))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
210	[BUG]  [BUGGY]  if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
211	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObj.isRecordType())  {	  if(objType!=    null    ||    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
212	[BUG]  [BUGGY]  if(straintObj!=  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  constraintObjType.isRecordType())  {	  if(straintObj!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
213	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(constraintObj!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
214	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isUnknownType()  ||  constraintObjType.isInterface())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isUnknownType()  ||  constraintObjType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isUnknownType()  ||  constraintObjType.isInterface())  {	  if(objType    ==    null    ||    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
215	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
216	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
217	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(type,  prop))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(type,  prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(type,  prop))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
218	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop)||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop)||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop)||  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
219	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint.getOwnPropertyNames()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint.getOwnPropertyNames()))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraint.getOwnPropertyNames()))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
220	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
221	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
222	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraint.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraint.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
223	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  type.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
224	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
225	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
226	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
227	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
228	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
229	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
230	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
231	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
232	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
233	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObjType.isRecordType())  {	  if(constraintObj!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
234	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObj.isInstanceType())  {	  if(objType!=    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
235	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObjType.isUnknownType())  {	  if(objType    ==    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
236	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  objType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(type,  objType);	  objType.inferPropertyTypesToMatchConstraint(type,    constraint);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
237	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraints);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraints);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(type,  constraints);	  objType.inferPropertyTypesToMatchConstraint(type,    constraint);    	non-compiled	[CE]  ';'  expected	13	None	replace
238	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isRecordType())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    constraintObjType.isRecordType())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
239	[BUG]  [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isRecordType())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  constraintObjType.isRecordType())  {	  if(objType!=    null    &&    constraintObjType.isRecordType())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
240	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
241	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  objType))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
242	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  constraint))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  constraint))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintObj.isPropertyTypeDeclared(prop,  constraint))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
243	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  constraint))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  constraint))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  constraint))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
244	[BUG]  [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  constraint))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  constraint))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraint.isPropertyTypeDeclared(prop,  constraint))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
245	[BUG]  [BUGGY]  if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
246	[BUG]  [BUGGY]  if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop,  objType))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraint.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  ';'  expected	79	None	replace
247	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
248	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraint.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
249	[BUG]  [BUGGY]  ObjectType  propType  =  type.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  type.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  type.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
250	[BUG]  [BUGGY]  ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
251	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj,  constraint.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraintObj,  constraint.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraintObj,  constraint.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
252	[BUG]  [BUGGY]  ObjectType  typeType  =  constraintObj.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  typeType  =  constraintObj.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  typeType  =  constraintObj.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	73	None	replace
253	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isPropertyType())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObj.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isPropertyType())  {	  if(objType    ==    null    ||    constraintObj.isRecordType())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
254	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isUnknownType())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isUnknownType())  {	  if(objType!=    null    ||    objType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	49	None	replace
255	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObj.isUnknownType())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObj.isUnknownType())  {	  if(objType!=    null    ||    objType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	49	None	replace
256	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  ';'  expected	36	None	replace
257	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isConstructor())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.isConstructor())  {	  if(objType    ==    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
258	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isConstructor())  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObjType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObjType.isConstructor())  {	  if(objType    ==    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
259	[BUG]  [BUGGY]  if(type!=  null  &&  objType.isRecordType())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  objType.isRecordType())  {	  if(objType!=    null    &&    type.isRecordType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
260	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObjType.isRecordType())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObjType.isRecordType())  {	  if(objType!=    null    &&    type.isRecordType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
261	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObj.isRecordType())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObj.isRecordType())  {	  if(objType!=    null    &&    type.isRecordType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
262	[BUG]  [BUGGY]  if(objType!=  null  ||  constraints.isPropertyTypeDeclared(prop))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraints.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraints.isPropertyTypeDeclared(prop))  {	  if(constraintObj!=    null    ||    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
263	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  typeToInfer);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  typeToInfer);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  typeToInfer);	  objType.defineInferredProperty(prop,    type);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
264	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObjType);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObjType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type,  constraintObjType);	  objType.defineInferredProperty(prop,    type);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
265	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {	  if(constraintObj!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
266	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isInterface())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isInterface())  {	  if(objType    ==    null    ||    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
267	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
268	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
269	[BUG]  [BUGGY]  ObjType.defineInferredProperty(prop,  constraintObj,  null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjType.defineInferredProperty(prop,  constraintObj,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjType.defineInferredProperty(prop,  constraintObj,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
270	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObj,  null);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  type,  constraintObj,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  type,  constraintObj,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
271	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
272	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
273	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  objType.isRecordType())  {	  if(objType    ==    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
274	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  objType.isUnknownType())  {	  if(objType    ==    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
275	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.isRecordType())  {	  if(objType!=    null    ||    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
276	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.isUnknownType())  {	  if(objType!=    null    ||    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
277	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  objType.isInstanceType())  {	  if(objType    ==    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
278	[BUG]  [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null)  {  for(String  prop  :  objType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
279	[BUG]  [BUGGY]  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
280	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObjType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObjType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObjType.getOwnPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
281	[BUG]  [BUGGY]  if(straintObj!=  null  &&  constraintObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  constraintObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  constraintObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
282	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObj.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintObj.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObj.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
283	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
284	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObj.isRecordType())  {	  if(objType    ==    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
285	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getPropertyType(type);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  objType.getPropertyType(type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getPropertyType(type);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
286	[BUG]  [BUGGY]  ObjectType  propType  =  property.getPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  property.getPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  property.getPropertyType(objType);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
287	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  type.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  type.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  type.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
288	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop,  objType))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
289	[BUG]  [BUGGY]  if(objType!=  null  &&  constraints.isPropertyTypeDeclared(prop,  objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraints.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraints.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
290	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
291	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  constraintObj.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  constraintObj.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
292	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
293	[BUG]  [BUGGY]  if(straintObj!=  null  &&  constraintObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  constraintObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  constraintObj.isInstanceType())  {	  if(objType!=    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
294	[BUG]  [BUGGY]  if(objectType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objectType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objectType!=  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(strObjType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
295	[BUG]  [BUGGY]  if(strObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
296	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
297	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObj.hasPropertyType(prop))  {	  if(objType    ==    null    ||    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
298	[BUG]  [BUGGY]  if(strObjType  ==  null  ||  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType  ==  null  ||  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType  ==  null  ||  constraintObj.hasProperty(prop))  {	  if(objType    ==    null    ||    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
299	[BUG]  [BUGGY]  if(type!=  null  &&  constraintObj.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(type!=  null  &&  constraintObj.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(type!=  null  &&  constraintObj.hasProperty(prop))  {	  if(objType!=    null    &&    type.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
300	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
301	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
302	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  constraintObjType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
303	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObjType))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObjType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObjType))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
304	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObj))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObj))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  constraintObj))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
305	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  constraintObjType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  constraintObjType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
306	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObj.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObj.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
307	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  objType.isConstructor())  {	  if(objType    ==    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
308	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
309	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
310	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
311	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  constraintObjType.isPropertyTypeDeclared(objType))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
312	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(propType))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(propType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObjType.isPropertyTypeDeclared(propType))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
313	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.isPropertyTypeDeclared(prop))  {	  if(constraintObj!=    null    ||    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
314	[BUG]  [BUGGY]  if(straintObj!=  null  &&  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  constraintObj.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
315	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintstObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintstObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintstObjType.hasProperty(prop))  {	  if(constraintObjType    ==    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
316	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
317	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  constraintObjType.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
318	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
319	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraintObj))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraintObj))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  constraintObj))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
320	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  propType))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  propType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  propType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
321	[BUG]  [BUGGY]  if(straintObj!=  null  ||  constraintObj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  ||  constraintObj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  ||  constraintObj.isRecordType())  {	  if(objType!=    null    ||    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
322	[BUG]  [BUGGY]  objType.definePropertyTypesToMatchConstraint(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypesToMatchConstraint(type,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypesToMatchConstraint(type,  constraintObj);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
323	[BUG]  [BUGGY]  objType.definePropertyTypeToMatchConstraint(prop,  constraintObj);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.definePropertyTypeToMatchConstraint(prop,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.definePropertyTypeToMatchConstraint(prop,  constraintObj);	  objType.definePropertyTypesToMatchConstraint(prop,    objType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
324	[BUG]  [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  &&  constraintObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
325	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isConstructor()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
326	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(type);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getOwnPropertyType(type);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
327	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(objType);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  constraint.getOwnPropertyType(objType);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
328	[BUG]  [BUGGY]  if(constraintObjType!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  &&  objType.isRecordType())  {	  if(objType!=    null    &&    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
329	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintObj.isPropertyType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintObj.isPropertyType())  {	  if(objType    ==    null    ||    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
330	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObj.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
331	[BUG]  [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
332	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  constraintObj.hasProperty(objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  constraintObj.hasProperty(objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  constraintObj.hasProperty(objType))  {	  if(objType!=    null    &&    constraintObj.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
333	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    ||    constraintObj.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
334	[BUG]  [BUGGY]  ObjectType  propType  =  obj.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  obj.restrictByNotNullOrUndefined();  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  obj.restrictByNotNullOrUndefined();	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
335	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getPropertyType(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  objType.getPropertyType(type.restrictByNotNullOrUndefined());  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getPropertyType(type.restrictByNotNullOrUndefined());	  ObjectType    propType    =    objType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
336	[BUG]  [BUGGY]  if(constraintObjType  ==  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  &&  objType.isUnknownType())  {	  if(objType    ==    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
337	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(propType,  constraintObj);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(propType,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(propType,  constraintObj);	  objType.inferPropertyTypesToMatchConstraint(type,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
338	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.getOwnPropertyNames())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.getOwnPropertyNames())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.getOwnPropertyNames())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
339	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.hasOwnPropertyNames())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.hasOwnPropertyNames())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyType()  &&  constraintObj.hasOwnPropertyNames())  {	  if(objType!=    null    &&    objType.isPropertyType())    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
340	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isConstructor())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
341	[BUG]  [BUGGY]  if(straintObj!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  objType.isInstanceType())  {	  if(objType!=    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
342	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isInstanceType())  {	  if(objType!=    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
343	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  objType.hasProperty(prop))  {	  if(constraintObj    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
344	[BUG]  [BUGGY]  if(constraintObj!=  null  ||  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  ||  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  ||  objType.hasProperty(prop))  {	  if(constraintObj    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
345	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  obj.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  obj.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  obj.isRecordType())  {	  if(constraintObj    ==    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
346	[BUG]  [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraintstObj);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.inferPropertyTypesToMatchConstraint(type,  constraintstObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.inferPropertyTypesToMatchConstraint(type,  constraintstObj);	  objType.inferPropertyTypesToMatchConstraint(type,    constraint);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
347	[BUG]  [BUGGY]  objType  =  inferPropertyTypesToMatchConstraint(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType  =  inferPropertyTypesToMatchConstraint(type,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType  =  inferPropertyTypesToMatchConstraint(type,  constraintObj);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
348	[BUG]  [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  objType);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  inferPropertyTypesToMatchConstraint(objType,  objType);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	inferPropertyTypesToMatchConstraint(objType,  objType);	  inferPropertyTypesToMatchConstraint(objType,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
349	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	  if(constraintObj!=    null    ||    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
350	[BUG]  [BUGGY]  if(straintObj!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  objType.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
351	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isUnknownType())  {	  if(objType!=    null    &&    constraintObj.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
352	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getPropertyType(prop,  constraint);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  objType.getPropertyType(prop,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getPropertyType(prop,  constraint);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
353	[BUG]  [BUGGY]  ObjectType  propType  =  obj.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  obj.getPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  obj.getPropertyType(prop);	  ObjectType    propType    =    objType.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
354	[BUG]  [BUGGY]  if(objType  ==  null  ||  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  objType.hasProperty(prop))  {	  if(constraintObjType    ==    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
355	[BUG]  [BUGGY]  if(constraintObjType  ==  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  &&  objType.isRecordType())  {	  if(objType    ==    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
356	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.isInstanceType())  {	  if(objType!=    null    &&    constraintObjType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
357	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
358	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  objType.isPropertyTypeDeclared(prop))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
359	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop,  objType))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isPropertyTypeDeclared(prop,  objType))  {	  if(objType    ==    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
360	[BUG]  [BUGGY]  if(strObjType!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(strObjType!=  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(strObjType!=  null  &&  objType.isRecordType())  {	  if(strObjType!=    null    &&    constraintObj.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
361	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObjType.hasProperty(prop))  {	  if(strObjType!=    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
362	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    constraintObjType.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
363	[BUG]  [BUGGY]  if(objType!=  null  &&!objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&!objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&!objType.isInstanceType())  {	  if(objType!=    null    &&    type.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
364	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isInterfaceType()  ||  objType.isInterfaceType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isInterfaceType()  ||  objType.isInterfaceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isInterfaceType()  ||  objType.isInterfaceType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
365	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPrototypeType())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPrototypeType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPrototypeType())  {	  if(objType!=    null    &&    objType.isInterfaceType())    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
366	[BUG]  [BUGGY]  if(constraintObj!=  null  &&  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj!=  null  &&  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj!=  null  &&  objType.hasProperty(prop))  {	  if(objType!=    null    &&    constraint.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
367	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.hasOwnPropertyNames())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.hasOwnPropertyNames())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.hasOwnPropertyNames())  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
368	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)||  constraintObj.hasOwnPropertyNames())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)||  constraintObj.hasOwnPropertyNames())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)||  constraintObj.hasOwnPropertyNames())  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
369	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructorTypeDeclared(prop,  type))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructorTypeDeclared(prop,  type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructorTypeDeclared(prop,  type))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
370	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.getOwnPropertyNames().length  >  0)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.getOwnPropertyNames().length  >  0)  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(prop,  type)&&  constraintObj.getOwnPropertyNames().length  >  0)  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    type))    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
371	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.isUnknownType())  {	  if(objType!=    null    &&    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
372	[BUG]  [BUGGY]  if(straintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraint.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
373	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType,  null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  objType,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
374	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  null);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  null);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  null);	  objType.defineInferredProperty(prop,    constraint,    null);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
375	[BUG]  [BUGGY]  if(objType  ==  null  ||  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  objType.isRecordType())  {	  if(objType!=    null    ||    objType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
376	[BUG]  [BUGGY]  if(objType  ==  null  ||  objType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  objType.isUnknownType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  objType.isUnknownType())  {	  if(objType!=    null    ||    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
377	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.hasProperty(prop))  {	  if(objType!=    null    ||    objType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
378	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  objType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  objType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  objType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
379	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.hasPropertyType(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.hasPropertyType(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.hasPropertyType(prop))  {	  if(objType!=    null    ||    constraintObjType.hasPropertyType(prop))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
380	[BUG]  [BUGGY]  if(objType  ==  null  ||  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  objType.isInstanceType())  {	  if(objType!=    null    ||    objType.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
381	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType,  constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  objType,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType,  constraintObj);	  objType.defineInferredProperty(prop,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
382	[BUG]  [BUGGY]  ObjType  propType  =  objType.defineInferredProperty(prop,  constraintObj);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjType  propType  =  objType.defineInferredProperty(prop,  constraintObj);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjType  propType  =  objType.defineInferredProperty(prop,  constraintObj);	  objType.defineInferredProperty(prop,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
383	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(propType))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(propType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(propType))  {	  if(objType!=    null    &&    type.isPropertyTypeDeclared(objType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
384	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  constraintObjType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  constraintObjType.isRecordType())  {	  if(straintObjType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
385	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.isRecordType())  {	  if(straintObjType!=    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
386	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType,  type);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  objType,  type);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType,  type);	  objType.defineInferredProperty(prop,    constraintObj,    null);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
387	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType,  typeToInfer);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  objType,  typeToInfer);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType,  typeToInfer);	  objType.defineInferredProperty(prop,    constraintObj,    null);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
388	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isRecordType())  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isRecordType())  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isRecordType())  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
389	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
390	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.hasProperty(prop))  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
391	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getReferenceNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getReferenceNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getReferenceNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
392	[BUG]  [BUGGY]  if(constraint!=  null  &&  objType.isRecordType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraint!=  null  &&  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraint!=  null  &&  objType.isRecordType())  {	  if(objType!=    null    &&    constraint.isRecordType())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
393	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  objType.isPropertyTypeDeclared(prop))  {	  if(constraintObjType!=    null    ||    objType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
394	[BUG]  [BUGGY]  objType.defineInferredProperty(prop,  objType,  constraint);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  objType.defineInferredProperty(prop,  objType,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	objType.defineInferredProperty(prop,  objType,  constraint);	  objType.defineInferredProperty(prop,    constraint);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
395	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
396	[BUG]  [BUGGY]  if(straintObj!=  null  &&  objType.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObj!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObj!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    constraintObj.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
397	[BUG]  [BUGGY]  if(objectType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objectType  ==  null  ||  constraintObjType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objectType  ==  null  ||  constraintObjType.hasProperty(prop))  {	  if(strObjType    ==    null    ||    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
398	[BUG]  [BUGGY]  if(constraintObjType  ==  null  &&  objType.isInstanceType())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  &&  objType.isInstanceType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  &&  objType.isInstanceType())  {	  if(objType    ==    null    &&    constraintObj.isInstanceType())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
399	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isUnknownType()  ||  objType.isInterface())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.isUnknownType()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isUnknownType()  ||  objType.isInterface())  {	  if(objType    ==    null    ||    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
400	[BUG]  [BUGGY]  if(objType  ==  null  ||  constraintObjType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  constraintObjType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  constraintObjType.isInterface())  {	  if(objType    ==    null    ||    constraintObjType.isUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
401	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.hasProperty(prop))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.hasProperty(prop))  {	  if(objType!=    null    &&    constraintObjType.hasProperty(prop))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
402	[BUG]  [BUGGY]  if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(type))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  constraintstObj.isPropertyTypeDeclared(type))  {	  if(objType!=    null    &&    constraintObj.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
403	[BUG]  [BUGGY]  if(constraint!=  null  &&  objType.isConstructor())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraint!=  null  &&  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraint!=  null  &&  objType.isConstructor())  {	  if(objType!=    null    &&    constraint.isConstructor())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	43	None	replace
404	[BUG]  [BUGGY]  if(straintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(straintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(straintObjType!=  null  &&  objType.isPropertyTypeDeclared(prop))  {	  if(objType!=    null    &&    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	34	None	replace
405	[BUG]  [BUGGY]  if(objType!=  null  &&!objType.isConstructor())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&!objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&!objType.isConstructor())  {	  if(objType!=    null    &&    type.isConstructor())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	42	None	replace
406	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	91	None	replace
407	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getRecordPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	91	None	replace
408	[BUG]  [BUGGY]  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObj);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getOwnPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    constraintObj);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	91	None	replace
409	[BUG]  [BUGGY]  if(constraintObjType  ==  null  ||  objType.isRecordType())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType  ==  null  ||  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType  ==  null  ||  objType.isRecordType())  {	  if(objType    ==    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	55	None	replace
410	[BUG]  [BUGGY]  if(constraintObj  ==  null  ||  objType.isRecordType())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObj  ==  null  ||  objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObj  ==  null  ||  objType.isRecordType())  {	  if(objType    ==    null    ||    constraintObjType.isRecordType())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	55	None	replace
411	[BUG]  [BUGGY]  if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(type))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(type))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(constraintObjType!=  null  ||  objType.isPropertyTypeDeclared(type))  {	  if(objType!=    null    ||    constraintObjType.isPropertyTypeDeclared(type))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	38	None	replace
412	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintstObjType.isPropertyTypeDeclared(prop))  {	  if(constraintObjType!=    null    ||    constraintObjType.isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	58	None	replace
413	[BUG]  [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  objType))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    isPropertyTypeDeclared(prop))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	37	None	replace
414	[BUG]  [BUGGY]  if(objType!=  null  &&!objType.isRecordType())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&!objType.isRecordType())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&!objType.isRecordType())  {	  if(objType!=    null    &&    type.isRecordType())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	9	None	replace
415	[BUG]  [BUGGY]  ObjectType  propType  =  obj.getOwnPropertyType(prop);  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  obj.getOwnPropertyType(prop);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  obj.getOwnPropertyType(prop);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	75	None	replace
416	[BUG]  [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(prop,  constraint);  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  ObjectType  propType  =  objType.getOwnPropertyType(prop,  constraint);  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	ObjectType  propType  =  objType.getOwnPropertyType(prop,  constraint);	  ObjectType    propType    =    objType.getOwnPropertyType(prop);    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	75	None	replace
417	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraint);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraint);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraint);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	89	None	replace
418	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  type.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  objType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	89	None	replace
419	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  type);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	89	None	replace
420	[BUG]  [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObjType);  }  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObjType);  }  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null)  {  for(String  prop  :  objType.getPropertyNames())  {  inferPropertyTypesToMatchConstraint(prop,  constraintObjType);  }	  if(objType!=    null)    {    for(String    prop    :    objType.getPropertyNames())    {    inferPropertyTypesToMatchConstraint(prop,    objType);    }    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	89	None	replace
421	[BUG]  [BUGGY]  if(objType!=  null  ||  constraintst.hasProperty(prop))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  ||  constraintst.hasProperty(prop))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  ||  constraintst.hasProperty(prop))  {	  if(constraintObjType!=    null    ||    objType.hasProperty(prop))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	96	None	replace
422	[BUG]  [BUGGY]  if(objType  ==  null  ||  objType.isConstructor())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  ||  objType.isConstructor())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  ||  objType.isConstructor())  {	  if(objType!=    null    ||    objType.isConstructor())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	44	None	replace
423	[BUG]  [BUGGY]  if(objType  ==  null  &&  objType.isConstructor()  ||  objType.isInterface())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType  ==  null  &&  objType.isConstructor()  ||  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType  ==  null  &&  objType.isConstructor()  ||  objType.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	98	None	replace
424	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isInterface())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isConstructor()  ||  constraintObj.isInterface())  {	  if(objType!=    null    &&    objType.isConstructor()    ||    objType.isInterface())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	98	None	replace
425	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(type,  constraint))  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isPropertyTypeDeclared(type,  constraint))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isPropertyTypeDeclared(type,  constraint))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	79	None	replace
426	[BUG]  [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  objType))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  objType))  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  type.isPropertyTypeDeclared(prop,  objType))  {	  if(objType!=    null    &&    objType.isPropertyTypeDeclared(prop,    constraint))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
427	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isInterface())  {  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());      [BUGGY]  if(objType!=  null  &&  objType.isInterface())  {  [BUGGY]      for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1123	1123	1	replace	if(objType!=  null  &&  objType.isInterface())  {	  if(objType!=    null    &&    constraintstObj.isRecordType())    {    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	93	None	replace
