bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ObjectType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
2	[BUG]  [BUGGY]  ObjectType  constraint  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraint  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraint  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	31	None	replace
3	[BUG]  [BUGGY]  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	31	None	replace
4	[BUG]  [BUGGY]  ObjectType  constraintObj  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraintObj  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraintObj  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	31	None	replace
5	[BUG]  [BUGGY]  ObjectType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	31	None	replace
6	[BUG]  [BUGGY]  ObjectType  constraintObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  constraintObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  constraintObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	31	None	replace
7	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintObj.getConstructor();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  objType  =  constraintObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
8	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  iobjType  =  constraintObj.getConstructor();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  iobjType  =  constraintObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  iobjType  =  constraintObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
9	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objtype  =  constraintObj.getConstructor();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objtype  =  constraintObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  objtype  =  constraintObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
10	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  constraintObjType  =  constraintObj.getConstructor();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  constraintObjType  =  constraintObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  constraintObjType  =  constraintObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
11	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  typeToInfer  =  constraintObj.getConstructor();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  typeToInfer  =  constraintObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  typeToInfer  =  constraintObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
12	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintstObj.getConstructor();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintstObj.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  objType  =  constraintstObj.getConstructor();	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
13	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.getRecordType());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(str.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType.getRecordType());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraintObj);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordType.recordByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordType.recordByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordType.recordByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.recordType());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.recordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.recordType());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
20	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.recordType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.recordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraint.recordType());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.recordType());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.recordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj.recordType());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	20	None	replace
23	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraint);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraint);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	20	None	replace
24	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraintObj);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	20	None	replace
25	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	44	None	replace
26	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	44	None	replace
27	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(recordType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	18	None	replace
28	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	30	None	replace
29	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	30	None	replace
30	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	30	None	replace
31	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	43	None	replace
32	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.cast(restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.cast(restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.cast(restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	43	None	replace
33	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	43	None	replace
34	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
35	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	71	None	replace
36	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	71	None	replace
37	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
38	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	71	None	replace
39	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(syntacticScope.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(syntacticScope.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(syntacticScope.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(record.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	7	None	replace
40	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintType);    	non-compiled	[CE]  ';'  expected	24	None	replace
41	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  null);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintType);    	non-compiled	[CE]  ';'  expected	24	None	replace
42	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
44	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
45	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
46	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  type,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  type,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  type,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getRecordType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj,  constraint.getRecordType();	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	10	None	replace
49	[BUG]  [BUGGY]  ObjectType  objType  =  constraint,  constraintObj.getRecordType();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint,  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint,  constraintObj.getRecordType();	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	10	None	replace
50	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getRecordType(type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getRecordType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getRecordType(type);	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.restrictByNotNullOrUndefined();	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	68	None	replace
52	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	68	None	replace
53	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(type);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.getPropertyType(type);	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	68	None	replace
54	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.hasProperty(type);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.hasProperty(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.hasProperty(type);	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	68	None	replace
55	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.restrictByNotNullOrUndefined(),  type);	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	68	None	replace
56	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop,  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(prop,  type);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(type,  type);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(type,  null);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
59	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  property);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(type,  property);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(type,  property);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
60	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(scope,  type);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(scope,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(scope,  type);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
61	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  constraint);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  constraint);	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
62	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(scope,  constraintObj));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(scope,  constraintObj));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(scope,  constraintObj));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
63	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(constraintObj,  type));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(constraintObj,  type));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(constraintObj,  type));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
64	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)+  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)+  1);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)+  1);	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
65	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  type);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj),  type);	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
66	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj,  type));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj,  type));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj,  type));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
67	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.cast(ObjectType.getRecordType());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.cast(ObjectType.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.cast(ObjectType.getRecordType());	  ObjectType    objType    =    ObjectType.cast(constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	42	None	replace
68	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getObjectType(type);	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  ';'  expected	52	None	replace
69	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.getObjectType();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.getObjectType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.getObjectType();	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  ';'  expected	52	None	replace
70	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getObjectType();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getObjectType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj,  constraint.getObjectType();	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  ';'  expected	52	None	replace
71	[BUG]  [BUGGY]  ObjectType  objType  =  type.getRecordType();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  type.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  type.getRecordType();	  ObjectType    objType    =    constraint.getRecordType();    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.recordType();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.recordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.recordType();	  ObjectType    objType    =    constraint.getRecordType();    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
74	[BUG]  [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
75	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
76	[BUG]  [BUGGY]  Type  typeToInfer  =  constraintObj.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  typeToInfer  =  constraintObj.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  typeToInfer  =  constraintObj.restrictByNotNullOrUndefined();	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
77	[BUG]  [BUGGY]  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	typeToInfer  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
78	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
79	[BUG]  [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	37	None	replace
80	[BUG]  [BUGGY]  JSType  propType  =  constraintObj.getPropertyType(prop,  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  constraintObj.getPropertyType(prop,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  constraintObj.getPropertyType(prop,  type);	  JSType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	66	None	replace
81	[BUG]  [BUGGY]  JSType  propType  =  constraintObj.getRecordType(prop);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  constraintObj.getRecordType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  constraintObj.getRecordType(prop);	  JSType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	66	None	replace
82	[BUG]  [BUGGY]  JSType  propType  =  constraintObj.getPropertyType(type);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  constraintObj.getPropertyType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  constraintObj.getPropertyType(type);	  JSType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	66	None	replace
83	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	36	None	replace
84	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
85	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
86	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
87	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraintObj);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constraint.getRecordType());    	non-compiled	[CE]  ';'  expected	3	None	replace
88	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.cast(constraint.getRecordType());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.cast(constraint.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.cast(constraint.getRecordType());	  ObjectType    objType    =    ObjectType.cast(constraint.getRecordType());    	non-compiled	[CE]  ';'  expected	3	None	replace
89	[BUG]  [BUGGY]  ObjectType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	57	None	replace
90	[BUG]  [BUGGY]  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	57	None	replace
91	[BUG]  [BUGGY]  JSType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	57	None	replace
92	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint,  constraintObj.getRecordType());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint,  constraintObj.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint,  constraintObj.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
93	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.getRecordType());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
94	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  type.getRecordType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  type.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj,  type.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
95	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj,  constraint.getRecordType());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj,  constraint.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj,  constraint.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
96	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.getRecordType());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
97	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint,  type.getRecordType());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint,  type.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint,  type.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
98	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	58	None	replace
99	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraintObj));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraintObj));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraintObj));	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	58	None	replace
100	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
101	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
102	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
103	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
104	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
105	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	41	None	replace
106	[BUG]  [BUGGY]  ObjectType  ibjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  ibjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  ibjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    ibjType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	53	None	replace
107	[BUG]  [BUGGY]  ObjectType  ibjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  ibjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  ibjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    ibjType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	53	None	replace
108	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.getInstanceType();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.getInstanceType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.getInstanceType();	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  ';'  expected	49	None	replace
109	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getInstanceType();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getInstanceType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj,  constraint.getInstanceType();	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  ';'  expected	49	None	replace
110	[BUG]  [BUGGY]  ObjectType  objType  =  type.getInstanceType();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  type.getInstanceType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  type.getInstanceType();	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  ';'  expected	49	None	replace
111	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	22	None	replace
112	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  type,  constraintObj);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  type,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  type,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	22	None	replace
113	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	22	None	replace
114	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE));	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	69	None	replace
115	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getPropertyType(type));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getPropertyType(type));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getPropertyType(type));	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	69	None	replace
116	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type));	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	69	None	replace
117	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraint);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	69	None	replace
118	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constructor.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	25	None	replace
119	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constructor.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	25	None	replace
120	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constructor.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	25	None	replace
121	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotEmptyOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ';'  expected	19	None	replace
122	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotEmptyOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ';'  expected	19	None	replace
123	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotEmptyOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ';'  expected	19	None	replace
124	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotEmptyOrUndefined());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ';'  expected	19	None	replace
125	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.restrictByNotEmptyOrUndefined());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(str.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ';'  expected	19	None	replace
126	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
127	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
128	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
129	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
130	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
131	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  null);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ';'  expected	59	None	replace
132	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint,  type);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint,  type);	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
133	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
134	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
135	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
136	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  typeToInfer);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  typeToInfer);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  typeToInfer);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    type);    	non-compiled	[CE]  ';'  expected	47	None	replace
137	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  type,  constraint);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  type,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  type,  constraint);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    type);    	non-compiled	[CE]  ';'  expected	47	None	replace
138	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    type);    	non-compiled	[CE]  ';'  expected	47	None	replace
139	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(prop,  type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(prop,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(prop,  type);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
140	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(type,  type);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
141	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  null);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(type,  null);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
142	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  property);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  property);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(type,  property);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
143	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  prop);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(type,  prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(type,  prop);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
144	[BUG]  [BUGGY]  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	56	None	replace
145	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	56	None	replace
146	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	56	None	replace
147	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	63	None	replace
148	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.getRecordType(),  constraintObj);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	63	None	replace
149	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	63	None	replace
150	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.getConstructor();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.getConstructor();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  ';'  expected	51	None	replace
151	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getRawType();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getRawType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getRawType();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  ';'  expected	51	None	replace
152	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  ';'  expected	51	None	replace
153	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType(prop);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getRecordType(prop);	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	64	None	replace
154	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getRecordType();	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	64	None	replace
155	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType(type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getRecordType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getRecordType(type);	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	64	None	replace
156	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	45	None	replace
157	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	45	None	replace
158	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	45	None	replace
159	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ';'  expected	45	None	replace
160	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraint.getRecordType();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraint.getRecordType();	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	14	None	replace
161	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj,  constraint.getRecordType();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj,  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj,  constraint.getRecordType();	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	14	None	replace
162	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)constraintObj  :  constraint.getRecordType();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)constraintObj  :  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)constraintObj  :  constraint.getRecordType();	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	14	None	replace
163	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)type  :  constraint.getRecordType();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)type  :  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj  instanceof  ObjectType?(ObjectType)type  :  constraint.getRecordType();	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	14	None	replace
164	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  type);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  type);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ';'  expected	2	None	replace
165	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraint);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ';'  expected	2	None	replace
166	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraint);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ';'  expected	2	None	replace
167	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraint);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ';'  expected	2	None	replace
168	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraint);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ';'  expected	2	None	replace
169	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(prop,  type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.getPropertyType(prop,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.getPropertyType(prop,  type);	  ObjectType    propType    =    constraint.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	65	None	replace
170	[BUG]  [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
171	[BUG]  [BUGGY]  Type  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  typeToInfer  =  constraint.restrictByNotNullOrUndefined();	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
172	[BUG]  [BUGGY]  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
173	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	35	None	replace
174	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
175	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictBy  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictBy  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictBy	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
176	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(0);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(0);	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
177	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getPropertyType();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.getPropertyType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.getPropertyType();	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
178	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  type);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(strObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
179	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(strObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
180	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
181	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
182	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  constraint.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
183	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraint.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
184	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
185	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(compiler,  constraint.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
186	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
187	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  null);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
188	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintType);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
189	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.restrictByNotNullOrUndefined();	  ObjectType    objType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
190	[BUG]  [BUGGY]  ObjectType  objType  =  type.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  type.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  type.restrictByNotNullOrUndefined();	  ObjectType    objType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
191	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType();	  ObjectType    objType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
192	[BUG]  [BUGGY]  ObjectType  objType  =  constraints.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraints.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraints.restrictByNotNullOrUndefined();	  ObjectType    objType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
193	[BUG]  [BUGGY]  ObjectType  objType  =  constraint.getPropertyType(prop);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint.getPropertyType(prop);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
194	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(value);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(value);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(value);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
195	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(name);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(name);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
196	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(this);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(this);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
197	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objectType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objectType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
198	[BUG]  [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
199	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
200	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
201	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrict  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrict  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrict	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
202	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNot  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNot  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNot	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
203	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
204	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(str.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
205	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
206	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
207	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
208	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
209	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
210	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recorded.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recorded.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recorded.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
211	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
212	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
213	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.cast(restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
214	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(register.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(scope.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
215	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(compiler.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(scope.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
216	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(markupScope.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(markupScope.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(markupScope.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(scope.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
217	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
218	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
219	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(scope,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
220	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(register,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(register,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(register,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
221	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(compiler,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(compiler,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
222	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
223	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraintObj);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  type,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
224	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructor.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructor.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructor.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
225	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
226	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
227	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
228	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type,  constraint.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
229	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
230	[BUG]  [BUGGY]  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	38	None	replace
231	[BUG]  [BUGGY]  JSType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  constraintObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	38	None	replace
232	[BUG]  [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	38	None	replace
233	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	60	None	replace
234	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	60	None	replace
235	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType(),  constraintObj);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ';'  expected	60	None	replace
236	[BUG]  [BUGGY]  Type  objType  =  constraint.getRecordType();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraint.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
237	[BUG]  [BUGGY]  Type  objType  =  constraintObj,  constraint.getRecordType();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj,  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj,  constraint.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
238	[BUG]  [BUGGY]  Type  objType  =  constraintObj.type.getRecordType();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj.type.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj.type.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
239	[BUG]  [BUGGY]  Type  objType  =  constraintObj.getRecordType(type);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj.getRecordType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj.getRecordType(type);	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
240	[BUG]  [BUGGY]  Type  objType  =  type.getRecordType();  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  type.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  type.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
241	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objectType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objectType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	32	None	replace
242	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	32	None	replace
243	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop,  null);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop,  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(prop,  null);	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	64	None	replace
244	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop)+  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(prop)+  1;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(prop)+  1;	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	64	None	replace
245	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(scope);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(scope);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getObjectType(scope);	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  ';'  expected	52	None	replace
246	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(registry);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getObjectType(registry);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getObjectType(registry);	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  ';'  expected	52	None	replace
247	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(nullObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(nullObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(nullObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(recordType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	18	None	replace
248	[BUG]  [BUGGY]  ObjectType  objType  =  constraintOP.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintOP.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintOP.restrictByNotNullOrUndefined();	  ObjectType    objType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	48	None	replace
249	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	70	None	replace
250	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	70	None	replace
251	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	70	None	replace
252	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getImplicitPrototype();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getImplicitPrototype();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getImplicitPrototype();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  ';'  expected	51	None	replace
253	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj.getPropertyType(prop);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj.getPropertyType(prop);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
254	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(name,  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(name,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(name,  type);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	12	None	replace
255	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	56	None	replace
256	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  constraints);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  constraints);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined(),  constraintObj,  constraints);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintType);    	non-compiled	[CE]  ';'  expected	24	None	replace
257	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
258	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(recordObj.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
259	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	17	None	replace
260	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  ';'  expected	26	None	replace
261	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined(),  constraint);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj,  constraint.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  ';'  expected	26	None	replace
262	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(name,  type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(name,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(name,  type);	  ObjectType    objType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  ';'  expected	11	None	replace
263	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
264	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
265	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	29	None	replace
266	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.recordType());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.recordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj.recordType());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
267	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.recordByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  ';'  expected	4	None	replace
268	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	27	None	replace
269	[BUG]  [BUGGY]  Type  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	27	None	replace
270	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	35	None	replace
271	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	35	None	replace
272	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	35	None	replace
273	[BUG]  [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	35	None	replace
274	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(scope);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(scope);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(scope);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	13	None	replace
275	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getPropertyType(null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getPropertyType(null);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	13	None	replace
276	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	30	None	replace
277	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ';'  expected	30	None	replace
278	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintObj.getConstructor());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getConstructor();  ObjectType  objType  =  constraintObj.getConstructor());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType    objType    =    constraintObj.getConstructor();    ObjectType  objType  =  constraintObj.getConstructor());	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
279	[BUG]  [BUGGY]  JSType  propType  =  constraintObj.getRecordType();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  constraintObj.getRecordType();	  JSType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ';'  expected	66	None	replace
280	[BUG]  [BUGGY]  ObjectType  objType  =  constraints.getRecordType();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraints.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraints.getRecordType();	  ObjectType    objType    =    constraint.getRecordType();    	non-compiled	[CE]  ';'  expected	15	None	replace
281	[BUG]  [BUGGY]  ObjectType  objType  =  constraintOP.getRecordType();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintOP.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintOP.getRecordType();	  ObjectType    objType    =    constraint.getRecordType();    	non-compiled	[CE]  ';'  expected	15	None	replace
282	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj,  constraint.getRecordType());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj,  constraint.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj,  constraint.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
283	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.getRecordType());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  ';'  expected	5	None	replace
284	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(recordType,  constraintObj));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(recordType,  constraintObj));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(recordType,  constraintObj));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ';'  expected	54	None	replace
285	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(null,  constraintObj));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(null,  constraintObj));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(null,  constraintObj));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ')'  expected	54	None	replace
286	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)||  constraintObj!=  null);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)||  constraintObj!=  null);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj)||  constraintObj!=  null);	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  ')'  expected	54	None	replace
287	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	60	None	replace
288	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	60	None	replace
289	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	60	None	replace
290	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.getRecordType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strObj.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  ')'  expected	6	None	replace
291	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedObj.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedObj.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictedObj.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	63	None	replace
292	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(typeToInfer);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(typeToInfer);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(typeToInfer);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ')'  expected	59	None	replace
293	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ')'  expected	59	None	replace
294	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(typeObj);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(typeObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(typeObj);	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ')'  expected	59	None	replace
295	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type;	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  ')'  expected	59	None	replace
296	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ')'  expected	20	None	replace
297	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	10	None	replace
298	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	10	None	replace
299	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	10	None	replace
300	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getRecordType();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getRecordType();	  ObjectType    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	10	None	replace
301	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	14	None	replace
302	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj.recordType();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj.recordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj.recordType();	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	14	None	replace
303	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	14	None	replace
304	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraint);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  ')'  expected	61	None	replace
305	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	71	None	replace
306	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	71	None	replace
307	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	62	None	replace
308	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strObj.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	62	None	replace
309	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByUndefined(),  constraintObj);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	72	None	replace
310	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj;	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	72	None	replace
311	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj  +  1);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined(),  constraintObj  +  1);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  ')'  expected	72	None	replace
312	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotEmptyOrUndefined());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ')'  expected	19	None	replace
313	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotEmptyOrUndefined());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type,  constraintObj.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  ')'  expected	19	None	replace
314	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.getRecordType(),  constraint);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ')'  expected	2	None	replace
315	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.getRecordType(),  constraint);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strObj.getRecordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strObj.getRecordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ')'  expected	2	None	replace
316	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(straint.getRecordType(),  type);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  ')'  expected	2	None	replace
317	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	36	None	replace
318	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	36	None	replace
319	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	36	None	replace
320	[BUG]  [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	36	None	replace
321	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(resultObj.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(resultObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(resultObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	38	None	replace
322	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.restrictByNotNullOrUndefined()));  [CE]  class  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.restrictByNotNullOrUndefined()));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.restrictByNotNullOrUndefined()));	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  class  expected	44	None	replace
323	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isRecordType()));  [CE]  class  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isRecordType()));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isRecordType()));	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  class  expected	44	None	replace
324	[BUG]  [BUGGY]  ObjectType  propType  =  constraintobj.restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintobj.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintobj.restrictByNotNullOrUndefined();	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	68	None	replace
325	[BUG]  [BUGGY]  ObjectType  propType  =  type.restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  type.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  type.restrictByNotNullOrUndefined();	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	68	None	replace
326	[BUG]  [BUGGY]  ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraints.restrictByNotNullOrUndefined();	  ObjectType    propType    =    constraint.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ')'  expected	68	None	replace
327	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	28	None	replace
328	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	28	None	replace
329	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	28	None	replace
330	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(typeToInfer);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(typeToInfer);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(typeToInfer);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	32	None	replace
331	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(name);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(name);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(name);	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  ')'  expected	67	None	replace
332	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getPropertyType(value);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getPropertyType(value);	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  ')'  expected	67	None	replace
333	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  ')'  expected	45	None	replace
334	[BUG]  [BUGGY]  ObjectType  propType  =  constraintobj.getPropertyType(prop);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintobj.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintobj.getPropertyType(prop);	  ObjectType    propType    =    constraint.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
335	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
336	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
337	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getInstanceType();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getInstanceType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj  <  null?  null  :  constraintObj.getInstanceType();	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
338	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  null;	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
339	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getInstanceType();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getInstanceType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj  <  null?  null  :  constraint.getInstanceType();	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
340	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  PropertyType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
341	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
342	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.getRecordType(),  type);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraintObj.getRecordType(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraintObj.getRecordType(),  type);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
343	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
344	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
345	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.restrictByNotNullOrUndefined()  ||  constraintObj.isRecordType());	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
346	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraintObj.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
347	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(functionScope.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(functionScope.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(functionScope.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(scope.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
348	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registeredPropertyType.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registeredPropertyType.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registeredPropertyType.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(scope.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
349	[BUG]  [BUGGY]  Type  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj  <  null?  null  :  constraintObj.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	16	None	replace
350	[BUG]  [BUGGY]  Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  null;	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	16	None	replace
351	[BUG]  [BUGGY]  Type  objType  =  constraintObj  ==  null?  null  :  constraintObj.getRecordType();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj  ==  null?  null  :  constraintObj.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj  ==  null?  null  :  constraintObj.getRecordType();	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	16	None	replace
352	[BUG]  [BUGGY]  Type  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj  }?  constraint.getRecordType()  :  null;	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ';'  expected	16	None	replace
353	[BUG]  [BUGGY]  Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	Type  objType  =  constraintObj!=  null?  constraintObj.getRecordType()  :  type;	  Type    objType    =    constraintObj.getRecordType();    	non-compiled	[CE]  ')'  expected	16	None	replace
354	[BUG]  [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(prop);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraint.getOwnPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraint.getOwnPropertyType(prop);	  ObjectType    propType    =    constraint.getPropertyType(prop);    	non-compiled	[CE]  ')'  expected	65	None	replace
355	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getPropertyType(prop);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj,  constraint.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj,  constraint.getPropertyType(prop);	  ObjectType    objType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  ')'  expected	13	None	replace
356	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
357	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
358	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOr  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
359	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
360	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined()  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined()  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined()	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getRecordType(),  constraintObj);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  ')'  expected	1	None	replace
362	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  constraintObj);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  ')'  expected	1	None	replace
363	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.getRecordType(),  constraintObj);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.getRecordType(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.getRecordType(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraintObj);    	non-compiled	[CE]  ')'  expected	1	None	replace
364	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isUnknownType()));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isUnknownType()));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.valueOf(type.isUnknownType()));	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	44	None	replace
365	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.isRecordType());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.isRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.isRecordType());	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	44	None	replace
366	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.TRUE.equals(type));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(boolean.TRUE.equals(type));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(boolean.TRUE.equals(type));	  ObjectType    objType    =    ObjectType.cast(boolean.restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	44	None	replace
367	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
368	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
369	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNu  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
370	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  propType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
371	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(strictt.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	43	None	replace
372	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(object.restrictByNotNullOrUndefined());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(object.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(object.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined());    	non-compiled	[CE]  ')'  expected	43	None	replace
373	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
374	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
375	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  typeToInfer  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    typeToInfer    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
376	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraintObj.restrictBy	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
377	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
378	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
379	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOr  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
380	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNu  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNu  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType[]  objType  =  ObjectType.cast(constraint.restrictByNotNu	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType[]    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
381	[BUG]  [BUGGY]  ObjectType  resultObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  resultObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  resultObjType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
382	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictBy  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictBy  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictBy	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
383	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(constraintObj.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
384	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  resultObjType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    resultObjType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
385	[BUG]  [BUGGY]  JSType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  constraint  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    constraint    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
386	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE),  constraintObj);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getNativeType(UNKNOWN_TYPE),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
387	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type),  constraintObj);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registry.getOwnPropertyType(type),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(registry.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
388	[BUG]  [BUGGY]  ObjectType  propType  =  type.getPropertyType(prop);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  type.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  type.getPropertyType(prop);	  ObjectType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
389	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
390	[BUG]  [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
391	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restrictedPropertyType.restrictByUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
392	[BUG]  [BUGGY]  JSType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
393	[BUG]  [BUGGY]  ObjectType  propType  =  ObjectType.cast(restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  ObjectType.cast(restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  ObjectType.cast(restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    propType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
394	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  type);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
395	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type!=  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
396	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictBy  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictBy  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictBy	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
397	[BUG]  [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type  ==  null)  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
398	[BUG]  [BUGGY]  ObjectType  propType  =  type.getPropertyType(constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  type.getPropertyType(constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  type.getPropertyType(constraintObj);	  ObjectType    propType    =    constraintObj.getPropertyType(type);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
399	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(limiter.getRecordType());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(limiter.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(limiter.getRecordType());	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
400	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type.getRecordType()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type.getRecordType()));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type.getRecordType()));	  ObjectType    objType    =    ObjectType.cast(recordObj.getRecordType());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
401	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getRecordByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
402	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  ObjectType.cast(type.restrictByNotNullOrUndefined());  ObjectType  objectType  =  ObjectType.cast(type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
403	[BUG]  [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(typeToInfer);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(typeToInfer);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  typeToInfer  =  constraint.restrictByNotNullOrUndefined();  ObjectType  objectType  =  ObjectType.cast(typeToInfer);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objectType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
404	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
405	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
406	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  type);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
407	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
408	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  type);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.restrictByNotNullOrUndefined(),  constraintObj,  type);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintType);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
409	[BUG]  [BUGGY]  JSType  propType  =  type.getPropertyType(prop);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  propType  =  type.getPropertyType(prop);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  propType  =  type.getPropertyType(prop);	  JSType    propType    =    constraintObj.getPropertyType(prop);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
410	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
411	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constructType(type,  constraintObj));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constructType(type,  constraintObj));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constructType(type,  constraintObj));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
412	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraint));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constructType(type,  constraint));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constructType(type,  constraint));	  ObjectType    objType    =    ObjectType.cast(constructType(type,    constraintObj));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
413	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraint);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined(),  type,  constraint);	  ObjectType    objType    =    ObjectType.cast(constraintObj.restrictByNotNullOrUndefined(),    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
414	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj.getOwnPropertyNames();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj.getOwnPropertyNames();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj.getOwnPropertyNames();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
415	[BUG]  [BUGGY]  ObjectType  objType  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  type.getConstructor();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  type.getConstructor();	  ObjectType    objType    =    constraintObj.getConstructor();    timeout    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
416	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj.inferPropertyType(type);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj.inferPropertyType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj.inferPropertyType(type);	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
417	[BUG]  [BUGGY]  ObjectType  typeToInfer  =  constraintObj.getRecordType(type);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  typeToInfer  =  constraintObj.getRecordType(type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  typeToInfer  =  constraintObj.getRecordType(type);	  ObjectType    typeToInfer    =    constraintObj.getRecordType();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
418	[BUG]  [BUGGY]  ObjectType  propType  =  type.getPropertyType();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  type.getPropertyType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  type.getPropertyType();	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
419	[BUG]  [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  propType  =  constraintObj.getOwnPropertyType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  propType  =  constraintObj.getOwnPropertyType();	  ObjectType    propType    =    constraintObj.getPropertyType();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
420	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(getNativeType(UNKNOWN_TYPE));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(getNativeType(UNKNOWN_TYPE));	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
421	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(getNativeType(JSTypeNative.UNKNOWN_TYPE));	  ObjectType    objType    =    ObjectType.cast(null);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
422	[BUG]  [BUGGY]  ObjectType  objType  =  constraint,  type.getRecordType();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraint,  type.getRecordType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraint,  type.getRecordType();	  ObjectType    objType    =    constraint.getRecordType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
423	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj,  type.getRecordType());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordObj,  type.getRecordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordObj,  type.getRecordType());	  ObjectType    objType    =    ObjectType.cast(type,    constraintObj.getRecordType());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
424	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(dataset.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(dataset.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(dataset.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(record.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
425	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
426	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(limiter.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(limiter.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(limiter.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
427	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
428	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
429	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOr  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOr  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOr	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
430	[BUG]  [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	if(type.isRecordType())  {  ObjectType  objType  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  ObjectType  objtype  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }  else  {	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    ObjectType    objtype    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
431	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  type);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordt.getRecordType(),  type);	  ObjectType    objType    =    ObjectType.cast(type.getRecordType(),    constraint);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
432	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(str.restrictByNotNullOrUndefined());	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
433	[BUG]  [BUGGY]  JSType  objType  =  ObjectType.cast(constructType(type.restrictByNotNullOrUndefined()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  JSType  objType  =  ObjectType.cast(constructType(type.restrictByNotNullOrUndefined()));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	JSType  objType  =  ObjectType.cast(constructType(type.restrictByNotNullOrUndefined()));	  JSType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
434	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registeredPropertyTypes,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registeredPropertyTypes,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registeredPropertyTypes,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
435	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraintObj.restrictByNotNullOrUndefined(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(parent,  constraintObj.restrictByNotNullOrUndefined(),  constraint);	  ObjectType    objType    =    ObjectType.cast(null,    constraintObj.restrictByNotNullOrUndefined(),    constraint);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
436	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricte.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricte.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricte.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
437	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    PropertyType    objType    =    ObjectType.cast(constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
438	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getUnknownType());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getUnknownType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.getUnknownType());	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
439	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraint));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraint));  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.defineInferredProperty(type,  constraint));	  ObjectType    objType    =    ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
440	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotEmptyOrUndefined());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  constraint.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
441	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(object.restrictByNotEmptyOrUndefined());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(object.restrictByNotEmptyOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(object.restrictByNotEmptyOrUndefined());	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotEmptyOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
442	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  type);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  type);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
443	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(registered.restrictByNotNullOrUndefined(),  constraintObj);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(registered.restrictByNotNullOrUndefined(),  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(registered.restrictByNotNullOrUndefined(),  constraintObj);	  ObjectType    objType    =    ObjectType.cast(restricted.restrictByNotNullOrUndefined(),    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
444	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(null,  type.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
445	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(parent,  constraint.restrictByNotNullOrUndefined());	  ObjectType    objType    =    ObjectType.cast(null,    constraint.restrictByNotNullOrUndefined());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
446	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraint);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraint);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
447	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(recordedPropertyType.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
448	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(restricted.restrictByNotNullOrUndefined(),  constraintObj,  constraintObj);	  ObjectType    objType    =    ObjectType.cast(type.restrictByNotNullOrUndefined(),    constraintObj,    constraintObj);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
449	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraint);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraint);  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(type.recordType(),  constraint);	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
450	[BUG]  [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.recordType());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  ObjectType.cast(record.recordType());  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  ObjectType.cast(record.recordType());	  ObjectType    objType    =    ObjectType.cast(type.recordType());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
451	[BUG]  [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  type;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  type;  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  constraintObj!=  null?  constraintObj.getInstanceType()  :  type;	  ObjectType    objType    =    constraintObj.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
452	[BUG]  [BUGGY]  ObjectType  objType  =  type.getObjectType();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  void  inferPropertyTypesToMatchConstraint(  JSType  type,  JSType  constraint)  {  if  (type  ==  null  ||  constraint  ==  null)  {  return;  }  ObjectType  constraintObj  =  ObjectType.cast(constraint.restrictByNotNullOrUndefined());  if  (constraintObj  !=  null  &&  constraintObj.isRecordType())  {      [BUGGY]  ObjectType  objType  =  type.getObjectType();  [BUGGY]      if  (objType  !=  null)  {  for  (String  prop  :  constraintObj.getOwnPropertyNames())  {  JSType  propType  =  constraintObj.getPropertyType(prop);  if  (!objType.isPropertyTypeDeclared(prop))  {  JSType  typeToInfer  =  propType;  if  (!objType.hasProperty(prop))  {  typeToInfer  =  getNativeType(VOID_TYPE).getLeastSupertype(propType);  }  objType.defineInferredProperty(prop,  typeToInfer,  null);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  inferPropertyTypesToMatchConstraint  [RETURN_TYPE]  void  JSType  type  JSType  constraint  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  ObjectType  constraintObj  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constraint  propType  type  typeToInfer  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  prop  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.30151134457776363	1122	1122	1	replace	ObjectType  objType  =  type.getObjectType();	  ObjectType    objType    =    constraintObj.getObjectType();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
