bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(oldType));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  ')'  expected	9	None	replace
2	[BUG]  [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  ')'  expected	9	None	replace
3	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	3	None	replace
4	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	3	None	replace
5	[BUG]  [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	3	None	replace
8	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
11	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
12	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
13	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	1	None	replace
14	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	      	non-compiled	[CE]  ')'  expected	7	None	replace
15	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	      	non-compiled	[CE]  ')'  expected	7	None	replace
16	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	      	non-compiled	[CE]  ')'  expected	7	None	replace
17	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	      	non-compiled	[CE]  ')'  expected	7	None	replace
18	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE);	      	non-compiled	[CE]  ')'  expected	7	None	replace
19	[BUG]  [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;	      	non-compiled	[CE]  ')'  expected	7	None	replace
20	[BUG]  [BUGGY]  JSType  oldType  =  rawValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  rawValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  rawValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;	      	non-compiled	[CE]  ')'  expected	7	None	replace
21	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valueType));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	6	None	replace
22	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(type));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(type));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(type));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	6	None	replace
24	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(type));  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(type));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(type));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ')'  expected	6	None	replace
25	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	10	None	replace
26	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	10	None	replace
27	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	10	None	replace
28	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	10	None	replace
29	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	10	None	replace
30	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	4	None	replace
31	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	4	None	replace
32	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
33	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
34	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
36	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
37	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
38	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	11	None	replace
39	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));  [CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));	  var.setType(valueType    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  method  traverseNew  in  class  TypeInference  cannot  be  applied  to  given  types;	8	None	replace
40	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
42	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
43	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
44	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
45	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var));	  var.setType(valueType    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
46	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
47	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.getType();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.getType();  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  null  :  var.getType();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
51	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
52	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(var));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(var));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
53	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
55	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
56	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);	  var.setType(oldType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  itemType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  itemType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  itemType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(valueType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  JSType  oldType  =  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  oldType.getLeastSupertype(valueType);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType.getLeastSupertype(valueType);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  JSType  oldType  =  n.getJSType();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  JSType  oldType  =  n.getJSType();  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n.getJSType();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +     ".   "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {    [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));  [BUGGY]    valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
