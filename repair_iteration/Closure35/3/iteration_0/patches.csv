bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
2	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(oldType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
3	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
4	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
5	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
6	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(oldType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
7	[BUG]  [BUGGY]    [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]    [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	  	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
8	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
9	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	5	None	replace
10	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(oldType));  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  ')'  expected	5	None	replace
11	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  ')'  expected	5	None	replace
12	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(oldType));  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +   ". "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(oldType));  [BUGGY]  valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  oldType.getLeastSupertype(oldType));	var.setType(oldType  ==  null  ?  valueType  :  oldType.getLeastSupertype(oldType));  	non-compiled	[CE]  ')'  expected	5	None	replace
