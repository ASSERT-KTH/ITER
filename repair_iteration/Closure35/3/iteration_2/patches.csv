bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  var.setType(valueType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  var.setType(valType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType!=  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
4	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
7	[BUG]  [BUGGY]  var.setType(valType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
8	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
9	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
10	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
11	[BUG]  [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
12	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  objectType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  objectType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  objectType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  oldType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  oldType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType),  valueType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType),  valueType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  type);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  type);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  type);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  var.setType(valType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	33	None	replace
19	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  scope);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	33	None	replace
20	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  valueType);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType),  valueType);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	33	None	replace
21	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  scope));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	33	None	replace
22	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  not  a  statement	24	None	replace
23	[BUG]  [BUGGY]  var.setType(oldType!=  null?  type  :  oldType.getLeastSupertype(type));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  type  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  type  :  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  not  a  statement	24	None	replace
24	[BUG]  [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(type));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  not  a  statement	24	None	replace
25	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(type));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  not  a  statement	24	None	replace
26	[BUG]  [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(scope));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  valueType  :  oldType.getLeastSupertype(scope));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	39	None	replace
27	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  valueType.getLeastSupertype(oldType));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	39	None	replace
28	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	39	None	replace
29	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	39	None	replace
30	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	8	None	replace
31	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	8	None	replace
32	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(valueType));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	8	None	replace
33	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  scope);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  scope);	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	36	None	replace
34	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  scope));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	36	None	replace
35	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  valueType);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType),  valueType);	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  not  a  statement	36	None	replace
36	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var);    	non-compiled	[CE]  not  a  statement	65	None	replace
37	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var);    	non-compiled	[CE]  not  a  statement	65	None	replace
38	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var,  valueType);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var,  valueType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var);    	non-compiled	[CE]  not  a  statement	65	None	replace
39	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	32	None	replace
40	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  scope);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  scope);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	32	None	replace
41	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  valueType.getLeastSupertype(oldType));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	32	None	replace
42	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  scope));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  not  a  statement	32	None	replace
43	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  not  a  statement	56	None	replace
44	[BUG]  [BUGGY]  var.setJSType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setJSType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setJSType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
45	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getUnknownType());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getUnknownType());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getUnknownType());	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  not  a  statement	56	None	replace
46	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType());	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  not  a  statement	56	None	replace
47	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	67	None	replace
48	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	67	None	replace
49	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    ROOT_TYPE    :    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  not  a  statement	67	None	replace
50	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  not  a  statement	17	None	replace
51	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  not  a  statement	17	None	replace
52	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  not  a  statement	17	None	replace
53	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  not  a  statement	17	None	replace
55	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  not  a  statement	25	None	replace
56	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  not  a  statement	25	None	replace
57	[BUG]  [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawValueType  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  not  a  statement	25	None	replace
58	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
59	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  ';'  expected	55	None	replace
60	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
61	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
63	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  valueType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  valueType);	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
64	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
65	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
66	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
67	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType),  scope);	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
68	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  scope));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
69	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;	  JSType    oldType    =    rawValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
70	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType;	  JSType    oldType    =    rawValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
71	[BUG]  [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  JSType    oldType    =    rawValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  ';'  expected	20	None	replace
72	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(type));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
73	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  type  :  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  valueType.getLeastSupertype(oldType));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
74	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  type.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  type.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  type.getLeastSupertype(oldType));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
75	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  oldType  :  var.getLeastSupertype(type));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  oldType  :  var.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  oldType  :  var.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  ';'  expected	53	None	replace
76	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
77	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  var.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  var.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  var.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
80	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  var.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  var.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  var.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
81	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  var.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  var.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  var.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
82	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getName());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getName());	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.type);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.type);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.type);	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
84	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  valueType);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  valueType);	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
85	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  rawValueType);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  rawValueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  rawValueType);	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
86	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getSimpleName());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE,  var.getSimpleName());	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  JSType  oldType  =  valueType.getLeastSupertype(oldType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType.getLeastSupertype(oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType.getLeastSupertype(oldType);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
88	[BUG]  [BUGGY]  JSType  oldType  =  valueType!=  null?  null  :  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType!=  null?  null  :  oldType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType!=  null?  null  :  oldType.getLeastSupertype(valueType);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
89	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  null  :  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  null  :  oldType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  null  :  oldType.getLeastSupertype(valueType);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
90	[BUG]  [BUGGY]  JSType  oldType  =  var.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var.getLeastSupertype(valueType);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
91	[BUG]  [BUGGY]  JSType  oldType  =  objectType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  objectType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  objectType.getLeastSupertype(valueType);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
92	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getFirstSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  JSType  oldType  =  var.getJSType();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var.getJSType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var.getJSType();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
95	[BUG]  [BUGGY]  JSType  oldType  =  n!=  null?  null  :  n.getJSType();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  n!=  null?  null  :  n.getJSType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n!=  null?  null  :  n.getJSType();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
96	[BUG]  [BUGGY]  JSType  oldType  =  n  ==  null?  null  :  n.getJSType();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  n  ==  null?  null  :  n.getJSType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n  ==  null?  null  :  n.getJSType();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
97	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.getJSType();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.getJSType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  null  :  var.getJSType();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
98	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
99	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
100	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	41	None	replace
101	[BUG]  [BUGGY]  var.setType(type  ==  null?  type  :  oldType.getLeastSupertype(type));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  type  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  type  :  oldType.getLeastSupertype(type));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
102	[BUG]  [BUGGY]  var.setType(type  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
103	[BUG]  [BUGGY]  var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
104	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLastSupertype(valueType));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
105	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType;	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
106	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType;	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
107	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE.getLeastSupertype(oldType));	  var.setType(valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
108	[BUG]  [BUGGY]  JSType  valueType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  valueType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  valueType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));	  var.setType(valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  ';'  expected	43	None	replace
109	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType.getLeastSupertype(oldType));	  var.setType(valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
110	[BUG]  [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType;	  JSType    oldType    =    rawValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
111	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var;	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
112	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var;	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
113	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var;	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
114	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
115	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
116	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
117	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
118	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
119	[BUG]  [BUGGY]  JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType);	  JSType    oldType    =    rawValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
120	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  rawValueType.getLeastSupertype(valueType);	  JSType    oldType    =    rawValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
121	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(scope));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
122	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType),  scope);	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
123	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
124	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  scope));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
125	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  objectType.getLeastSupertype(valueType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  objectType.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  objectType.getLeastSupertype(valueType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
126	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType());	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
128	[BUG]  [BUGGY]  var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
129	[BUG]  [BUGGY]  var.setJSType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setJSType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setJSType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
130	[BUG]  [BUGGY]  var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  UNKNOWN_TYPE  :  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
131	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
132	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
133	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  rawValueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  oldType  :  rawValueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  rawValueType.getLeastSupertype(oldType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
134	[BUG]  [BUGGY]  var.setType(rawValueType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawValueType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawValueType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
135	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
136	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawValueType,  valueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
137	[BUG]  [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
138	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
139	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
140	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  valueType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  valueType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  valueType.getNativeType(UNKNOWN_TYPE));	  var.setType(valueType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
141	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  var.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  var.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
142	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
143	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
144	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
145	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
146	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getInstanceType());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getInstanceType());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getInstanceType());	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
147	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
148	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
149	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType),  valueType);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
150	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
151	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getVar(oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getVar(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getVar(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
152	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInstanceType(oldType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInstanceType(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInstanceType(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
153	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  var.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  var.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
154	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
155	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  scope.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  scope.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  scope.getLeastSupertype(var));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
156	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
157	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(var));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
158	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
159	[BUG]  [BUGGY]  JSType  oldType  =  var!=  null?  null  :  var.getType();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var!=  null?  null  :  var.getType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var!=  null?  null  :  var.getType();	  JSType    oldType    =    var    ==    null?    null    :    var.getType();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
160	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  null  :  var.getType();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  null  :  var.getType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  null  :  var.getType();	  JSType    oldType    =    var    ==    null?    null    :    var.getType();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  scope);	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
162	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType,  scope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType,  scope));	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
163	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  type);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  type);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  type);	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
164	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
165	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  name));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  name));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
166	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  valueType));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  valueType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
167	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope),  valueType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope),  valueType);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
168	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  type));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  type));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
169	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope,  scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
170	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  valueType  :  var.getLeastSupertype(oldType));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  valueType  :  var.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  valueType  :  var.getLeastSupertype(oldType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  ';'  expected	40	None	replace
171	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  scope  :  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  scope  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  scope  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
172	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  scope));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
173	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  name));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  name));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
174	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  type  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
175	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  scope.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  scope.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  scope.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
176	[BUG]  [BUGGY]  var.setType(oldType!=  null?  scope  :  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  scope  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  scope  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
177	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
178	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
179	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  objectType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  objectType.getNativeType(UNKNOWN_TYPE));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
180	[BUG]  [BUGGY]  var.setType(objectType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(objectType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(objectType  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
181	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
182	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(rawValueType));	  var.setType(valueType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
183	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(valueType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
184	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
185	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  valueType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  valueType);	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
186	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
187	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
188	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
189	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType,  valueType));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType,  valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
190	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  type  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  type  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  type  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
191	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(rawType),  scope);	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
192	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
193	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(NO_TYPE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(NO_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(NO_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
194	[BUG]  [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  ROOT_TYPE  :  oldType.getJSType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
195	[BUG]  [BUGGY]  var.setType(valType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType  ==  null?  type  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
196	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
197	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  type  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
198	[BUG]  [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
199	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
200	[BUG]  [BUGGY]  var.setType(type  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    type    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
201	[BUG]  [BUGGY]  var.setType(oldType!=  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    type    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
202	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);	  var.setType(oldType!=    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
203	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE),  valueType);	  var.setType(oldType!=    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
204	[BUG]  [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
205	[BUG]  [BUGGY]  var.setType(type  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  oldType  :  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    type    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
206	[BUG]  [BUGGY]  var.setType(oldType!=  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    objectType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
207	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    objectType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
208	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
209	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
210	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
211	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
212	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  type.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  type.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  type.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
213	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(ARRAY_TYPE);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(ARRAY_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(ARRAY_TYPE);	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
214	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
215	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
216	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
217	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  var.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
218	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
219	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  rawType  :  oldType.getLeastSupertype(valueType));	  var.setType(rawType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
220	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  objectType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    objectType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
221	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  objectType  :  oldType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    objectType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
222	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  type  :  objectType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  type  :  objectType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  type  :  objectType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    oldType    :    objectType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
223	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
224	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  type  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    type    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
225	[BUG]  [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  valueType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    type    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
226	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
227	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    valueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
228	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
229	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
230	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));	  var.setType(valueType!=    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
231	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  var.getType();	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
232	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  var.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  var.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  var.getNativeType(UNKNOWN_TYPE));	  var.setType(valueType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
233	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  var.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  var.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  var.getNativeType(UNKNOWN_TYPE));	  var.setType(valueType    ==    null?    oldType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
234	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNextSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNextSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNextSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getFirstSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
235	[BUG]  [BUGGY]  var.setType(type,  oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type,  oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type,  oldType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
236	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  type.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  type.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  type.getLeastSupertype(oldType));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
237	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  rawValueType  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
238	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(RULE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(RULE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(RULE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
239	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
240	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
241	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
242	[BUG]  [BUGGY]  var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  oldType  :  var.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
243	[BUG]  [BUGGY]  var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
244	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
245	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
246	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
247	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(ARRAY_TYPE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(ARRAY_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(ARRAY_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
248	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  hasLendsName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  hasLendsName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  hasLendsName);	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
249	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  n);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  valueType  :  oldType.getLeastSupertype(valueType),  n);	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
250	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
251	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType);	  JSType    oldType    =    rawValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
252	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
253	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
254	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  rawValueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
255	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  objectType  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  objectType  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  objectType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
256	[BUG]  [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawValueType  ==  null?  valueType  :  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
257	[BUG]  [BUGGY]  JSType  oldType  =  var!=  null?  null  :  var.getJSType();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var!=  null?  null  :  var.getJSType();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var!=  null?  null  :  var.getJSType();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
258	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
259	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
260	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
261	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ROOT_TYPE));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ROOT_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getNativeType(ROOT_TYPE));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
262	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
263	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
264	[BUG]  [BUGGY]  var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valType  ==  null?  oldType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
265	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
266	[BUG]  [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
267	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getJSType(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
268	[BUG]  [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
269	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
270	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(var,  oldType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
271	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  rawValueType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
272	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(value));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(value));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  valueType  :  oldType.getLeastSupertype(value));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
273	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  valueType.getLeastSupertype(var));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
274	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  valueType);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  valueType);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
275	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType,  valueType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
276	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  n);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valueType),  n);	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
277	[BUG]  [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType!=  null?  oldType  :  oldType.getLeastSupertype(valType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  ')'  expected	59	None	replace
278	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
279	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInferredSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInferredSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getInferredSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    scope.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
280	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
281	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  var.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  rawValueType  :  var.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  rawValueType  :  var.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    rawValueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
282	[BUG]  [BUGGY]  JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType;	  JSType    oldType    =    rawValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
283	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE_NOT_OBJECT):  oldType.getLeastSupertype(valType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE_NOT_OBJECT):  oldType.getLeastSupertype(valType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(TEMPLATE_TYPE_NOT_OBJECT):  oldType.getLeastSupertype(valType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
284	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(scope));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(scope));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(scope));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
285	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
286	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  UNKNOWN_TYPE  :  oldType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    UNKNOWN_TYPE    :    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
287	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(ARRAY_TYPE):  oldType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
288	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
289	[BUG]  [BUGGY]  var.setType(rawType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawType));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(rawType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(rawType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawType));	  var.setType(oldType    ==    null?    rawValueType    :    oldType.getLeastSupertype(rawType));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
290	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(valueType));	  var.setType(valueType    ==    null?    valueType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
291	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(oldType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
292	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  oldType.getLeastSupertype(valueType));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
293	[BUG]  [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  oldType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  oldType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(valueType  ==  null?  oldType  :  valueType.getLeastSupertype(oldType,  oldType));	  var.setType(valueType    ==    null?    oldType    :    valueType.getLeastSupertype(oldType));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
294	[BUG]  [BUGGY]  JSType  oldType  =  oldType.getLeastSupertype(var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType.getLeastSupertype(var);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType.getLeastSupertype(var);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
295	[BUG]  [BUGGY]  JSType  oldType  =  valueType.getLeastSupertype(var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType.getLeastSupertype(var);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType.getLeastSupertype(var);	  JSType    oldType    =    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
296	[BUG]  [BUGGY]  JSType  oldType  =  oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType!=  null?  valueType  :  oldType.getLeastSupertype(valueType));	  var.setType(oldType!=    null?    oldType    :    oldType.getLeastSupertype(valueType));    	non-compiled	[CE]  ';'  expected	40	None	replace
297	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
298	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  valueType));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(valType,  valueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
299	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  var.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  var.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType,  var.getLeastSupertype(var));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
300	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(val));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(val));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(val));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
301	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType;	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
302	[BUG]  [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  type;	  JSType    oldType    =    var    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
303	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(type));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
304	[BUG]  [BUGGY]  var.setType(type!=  null?  oldType  :  oldType.getLeastSupertype(type));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(type!=  null?  oldType  :  oldType.getLeastSupertype(type));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(type!=  null?  oldType  :  oldType.getLeastSupertype(type));	  var.setType(type    ==    null?    oldType    :    oldType.getLeastSupertype(type));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
305	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  var.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  var.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  var.getLeastSupertype(var));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
306	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
307	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
308	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
309	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType),  valueType);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
310	[BUG]  [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.toString();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  var  ==  null?  null  :  var.toString();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  var  ==  null?  null  :  var.toString();	  JSType    oldType    =    var    ==    null?    null    :    var.getType();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
311	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
312	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(ARRAY_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(ARRAY_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(ARRAY_TYPE));	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
313	[BUG]  [BUGGY]  JSType  oldType  =  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n.setJSType(getNativeType(UNKNOWN_TYPE));	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
314	[BUG]  [BUGGY]  JSType  oldType  =  n.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  n.restrictByNotNullOrUndefined();  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n.restrictByNotNullOrUndefined();	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
315	[BUG]  [BUGGY]  JSType  oldType  =  n.getJSType(valueType);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  n.getJSType(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  n.getJSType(valueType);	  JSType    oldType    =    n.getJSType();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
316	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
317	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
318	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getNativeType(ARRAY_TYPE);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ')'  expected	56	None	replace
319	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.restrictByNotNullOrUndefined());  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.restrictByNotNullOrUndefined());	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
320	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  scope);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(oldType),  scope);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
321	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  valueType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(valueType),  valueType);	  var.setType(oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(oldType),    valueType);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
322	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  valueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  ROOT_TYPE  :  oldType.getLeastSupertype(valType,  valueType));	  var.setType(oldType    ==    null?    ROOT_TYPE    :    oldType.getLeastSupertype(valType));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
323	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  valueType));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  valueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  oldType  :  oldType.getLeastSupertype(scope,  valueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(scope));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
324	[BUG]  [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope.getLeastSupertype(valueType);	  JSType    oldType    =    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType.getLeastSupertype(valueType);    	non-compiled	[CE]  ';'  expected	50	None	replace
325	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
326	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(rawValueType));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(rawValueType));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(rawValueType));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(rawValueType));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
327	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
328	[BUG]  [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(UNKNOWN_TYPE));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  typeRegistry.getNativeType(UNKNOWN_TYPE));	  var.setType(oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
329	[BUG]  [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE)+  1;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  JSType  oldType  =  getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	JSType  oldType  =  getNativeType(UNKNOWN_TYPE)+  1;	  JSType    oldType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
330	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
331	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
332	[BUG]  [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(var));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(var));  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	var.setType(oldType  ==  null?  objectType  :  oldType.getLeastSupertype(var));	  var.setType(oldType    ==    null?    oldType    :    oldType.getLeastSupertype(var));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
333	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
334	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
335	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
336	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
337	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
338	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
339	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      valueType  =  getNativeType(UNKNOWN_TYPE);  }  objectType.defineInferredProperty(memberName,  valueType,  name);  if  (qObjName  !=  null  &&  name.isString())  {  String  qKeyName  =  qObjName  +       ".     "  +  memberName;  Var  var  =  syntacticScope.getVar(qKeyName);  JSType  oldType  =  var  ==  null  ?  null  :  var.getType();  if  (var  !=  null  &&  var.isTypeInferred())  {      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      valueType  :  oldType.getLeastSupertype(oldType));  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure35/src/com/google/javascript/jscomp/TypeInference.java	0.22360679774997896	692	693	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
