bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
3	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  incompatible  types	124	None	replace
4	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	36	None	replace
5	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  READER_ID  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	36	None	replace
6	[BUG]  [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  ReLATIVE_HeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVE_HeaderOffset	36	None	replace
7	[BUG]  [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RESULT_HeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RESULT_HeaderOffset	36	None	replace
8	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	69	None	replace
9	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	69	None	replace
10	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  width);  [CE]  cannot  find  symbol  width  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  width);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  width);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	69	None	replace
11	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionSize);  [CE]  cannot  find  symbol  compressionSize  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionSize);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  compressionSize	69	None	replace
12	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressedSize);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	69	None	replace
13	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(length,  buffer,  offset);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[],int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(length,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(length,  buffer,  offset);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[],int)	69	None	replace
14	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  DWORD);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  DWORD);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	69	None	replace
15	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  incompatible  types	98	None	replace
16	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
17	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
18	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
19	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
20	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
21	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,int)	157	None	replace
22	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,int)	157	None	replace
23	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	157	None	replace
24	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  length);  [CE]  cannot  find  symbol  compressionSize  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  cannot  find  symbol  compressionSize	157	None	replace
25	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
26	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
27	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	non-compiled	[CE]  incompatible  types	102	None	replace
28	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	11	1	add
29	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	11	1	add
30	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  incompatible  types	11	None	add
31	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	11	None	add
32	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	11	None	add
33	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	11	None	add
34	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	11	None	add
35	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  incompatible  types	11	None	add
36	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	11	1	add
37	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	11	1	add
38	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
39	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
40	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
41	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  incompatible  types	139	None	replace
42	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
43	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
44	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
45	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
46	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
47	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	101	None	replace
48	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  READER_ID  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	101	None	replace
49	[BUG]  [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  ReLATIVEHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVEHeaderOffset	101	None	replace
50	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	101	None	replace
51	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
52	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
53	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
54	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
55	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
56	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
57	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
58	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
59	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
60	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	31	1	add
61	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	31	1	add
62	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	31	None	add
63	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
64	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
65	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	31	None	add
66	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	31	None	add
67	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
68	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
69	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
70	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
71	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
72	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
73	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
74	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
75	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
76	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
77	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  illegal  start  of  type  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
78	[BUG]  [BUGGY]  restul  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  restul  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  restul  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	restul  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol  restul	149	None	replace
79	[BUG]  [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  remainder  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remainder  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	149	None	replace
80	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
81	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
82	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	84	None	replace
83	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
84	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remainder);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
85	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
86	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	86	None	replace
87	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	86	None	replace
88	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	86	None	replace
89	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	62	None	replace
90	[BUG]  [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  ReclativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  ReclativeHeaderOffset	62	None	replace
91	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	62	None	replace
92	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	114	None	replace
93	[BUG]  [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  ReLATIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVEHeaderOffset	114	None	replace
94	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  READER_ID  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	114	None	replace
95	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	114	None	replace
96	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
97	[BUG]  [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  not  a  statement  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  not  a  statement	57	None	replace
98	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
99	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  incompatible  types  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  incompatible  types	57	None	replace
100	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
101	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  incompatible  types  [FE]                                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  incompatible  types	57	None	replace
102	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset);  [CE]  cannot  find  symbol  [FE]                                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
103	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
104	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	116	1	replace
105	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	116	1	replace
106	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
107	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	138	1	add
108	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	138	1	add
109	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	138	1	add
110	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	138	1	add
111	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	138	None	add
112	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	138	None	add
113	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	138	None	add
114	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [CE]  cannot  find  symbol  remainder  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	138	None	add
115	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
116	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
117	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
118	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
119	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
120	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
121	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
122	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
123	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
124	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
125	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
126	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	61	None	replace
127	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	61	None	replace
128	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	61	None	replace
129	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	61	None	replace
130	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	61	None	replace
131	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	61	None	replace
132	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	61	None	replace
133	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  length);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
134	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
135	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
136	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD_MUST_HAVE_BOTH_SIZES_MSG);  [CE]  cannot  find  symbol  DWORD_MUST_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD_MUST_HAVE_BOTH_SIZES_MSG);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD_MUST_HAVE_BOTH_SIZES_MSG);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol  DWORD_MUST_HAVE_BOTH_SIZES_MSG	106	None	replace
137	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD_MUST_HAVE_BOTH_SIZES_MSG);  [CE]  cannot  find  symbol  WORD_MUST_HAVE_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD_MUST_HAVE_BOTH_SIZES_MSG);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD_MUST_HAVE_BOTH_SIZES_MSG);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol  WORD_MUST_HAVE_BOTH_SIZES_MSG	106	None	replace
138	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  length);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  length);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
139	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
140	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
141	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
142	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
143	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
144	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	129	1	replace
145	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  incompatible  types	129	None	replace
146	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	49	1	add
147	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	49	1	add
148	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	49	None	add
149	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
150	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	49	None	add
151	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
152	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	49	None	add
153	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
154	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	150	1	add
155	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	150	1	add
156	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  find  symbol  reportHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  reportHeaderOffset	150	None	add
157	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  ';'  expected	150	None	add
158	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  off);  }  [CE]  cannot  find  symbol  off  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  off);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  off);  }	  	non-compiled	[CE]  cannot  find  symbol  off	150	None	add
159	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  find  symbol  referHeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  referHeaderOffset	150	None	add
160	[BUG]  [BUGGY]  timeout  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	timeout	150	1	add
161	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  timeout  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	timeout	150	1	add
162	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
163	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  4);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
164	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  8);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  8);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  8);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
165	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  12);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  12);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  12);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
166	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  size);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  size);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
167	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
168	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
169	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
170	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
171	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
172	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	160	1	replace
173	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	160	1	replace
174	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
175	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
176	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
177	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
178	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
179	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	160	1	replace
180	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	160	1	replace
181	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
182	[BUG]  [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [CE]  not  a  statement  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  not  a  statement	39	None	replace
183	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
184	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
185	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [CE]  incompatible  types  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  incompatible  types	39	None	replace
186	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  1);  [CE]  cannot  find  symbol  [FE]                                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
187	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [CE]  cannot  find  symbol  [FE]                                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
188	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  incompatible  types	112	None	replace
189	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  '('  or  '['  expected	112	None	replace
190	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
191	[BUG]  [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  '('  or  '['  expected	112	None	replace
192	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  incompatible  types	112	None	replace
193	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  '('  or  '['  expected	112	None	replace
194	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
195	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	117	None	replace
196	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
197	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
198	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
199	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
200	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
201	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
202	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  remainder  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	163	None	replace
203	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
204	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [CE]  cannot  find  symbol  rest  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  rest	163	None	replace
205	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
206	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	20	None	replace
207	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	20	None	replace
208	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	20	None	replace
209	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	20	None	replace
210	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
211	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  incompatible  types	151	None	replace
212	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
213	[BUG]  [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	146	None	replace
214	[BUG]  [BUGGY]  Integer  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Integer  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Integer  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	146	None	replace
215	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	146	None	replace
216	[BUG]  [BUGGY]  double  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],double)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],double)	146	None	replace
217	[BUG]  [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	146	None	replace
218	[BUG]  [BUGGY]  long  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],long)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],long)	146	None	replace
219	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
220	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
221	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
222	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
223	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
224	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
225	[BUG]  [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
226	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
227	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
228	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
229	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
230	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
231	[BUG]  [BUGGY]  RelativeHeaderOffset  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
232	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
233	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
234	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
235	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
236	[BUG]  [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
237	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	99	None	replace
238	[BUG]  [BUGGY]  int  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  repaint  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	99	None	replace
239	[BUG]  [BUGGY]  double  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  repaint  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	99	None	replace
240	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
241	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
242	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
243	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
244	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
245	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
246	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
247	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
248	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
249	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
250	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  illegal  start  of  type  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
251	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
252	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
253	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
254	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
255	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
256	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
257	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
258	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	158	1	replace
259	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  incompatible  types	158	None	replace
260	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	37	None	replace
261	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	37	None	replace
262	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	37	None	replace
263	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	37	None	replace
264	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	37	None	replace
265	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)	154	None	replace
266	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,ZipEightByteInteger)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,ZipEightByteInteger)	154	None	replace
267	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,int)	154	None	replace
268	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest,  compressedSize);  [CE]  cannot  find  symbol  rest  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  cannot  find  symbol  rest	154	None	replace
269	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
270	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
271	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	22	None	replace
272	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	22	None	replace
273	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	22	None	replace
274	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	22	None	replace
275	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
276	[BUG]  [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	93	None	replace
277	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
278	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
279	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
280	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	122	None	add
281	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incompatible  types	122	None	add
282	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	122	1	add
283	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	122	1	add
284	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy	  	non-compiled	[CE]  '('  or  '['  expected	122	None	add
285	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incompatible  types	122	None	add
286	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [CE]  ')'  expected  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +	  	non-compiled	[CE]  ')'  expected	122	None	add
287	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [CE]  ')'  expected  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +	  	non-compiled	[CE]  ')'  expected	122	None	add
288	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                  ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightBy	  	non-compiled	[CE]  '('  or  '['  expected	122	None	add
289	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	110	1	add
290	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	110	1	add
291	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	110	1	add
292	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	110	1	add
293	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	110	None	add
294	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	110	None	add
295	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	110	None	add
296	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	110	None	add
297	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
298	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
299	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
300	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
301	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	80	None	replace
302	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	80	None	replace
303	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	80	None	replace
304	[BUG]  [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  ReclativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  ReclativeHeaderOffset	34	None	replace
305	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressionSize);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	155	None	replace
306	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);  [CE]  cannot  find  symbol  rest  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressionSize);    	non-compiled	[CE]  cannot  find  symbol  rest	155	None	replace
307	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	90	None	replace
308	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	90	None	replace
309	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	90	None	replace
310	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	159	1	replace
311	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	159	1	replace
312	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
313	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  length);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
314	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  length);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
315	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset,  remaining);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
316	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(data,  buffer,  offset);  [CE]  cannot  find  symbol  data  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(data,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(data,  buffer,  offset);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  data	142	None	replace
317	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  1);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
318	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  remaining);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
319	[BUG]  [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  ReLATIVE_HeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVE_HeaderOffset	44	None	replace
320	[BUG]  [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RESULT_HeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RESULT_HeaderOffset	44	None	replace
321	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining  +  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
322	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
323	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
324	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  2);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
325	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
326	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	40	1	add
327	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	40	1	add
328	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	40	None	add
329	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
330	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	40	None	add
331	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
332	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	40	None	add
333	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
334	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  remaining,  length);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  remaining,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  remaining,  length);	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
335	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(data,  buffer,  remaining);  [CE]  cannot  find  symbol  data  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(data,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(data,  buffer,  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  data	4	None	replace
336	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(remaining,  buffer);	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
337	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset,  remaining);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset,  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
338	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	18	None	replace
339	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [CE]  cannot  find  symbol  rest  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  rest	18	None	replace
340	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	18	None	replace
341	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
342	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
343	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
344	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
345	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
346	[BUG]  [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
347	[BUG]  [BUGGY]  short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
348	[BUG]  [BUGGY]  Remaining  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Remaining  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Remaining  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
349	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	9	None	replace
350	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	9	None	replace
351	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
352	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
353	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
354	[BUG]  [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  ReLATIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVEHeaderOffset	118	None	replace
355	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  READER_ID  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	118	None	replace
356	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	82	None	replace
357	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	82	None	replace
358	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	82	None	replace
359	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	82	None	replace
360	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[])  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[])	81	None	replace
361	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  remainder  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	81	None	replace
362	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	21	None	replace
363	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	21	None	replace
364	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	21	None	replace
365	[BUG]  [BUGGY]  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	89	None	replace
366	[BUG]  [BUGGY]  char  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  char  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	char  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	89	None	replace
367	[BUG]  [BUGGY]  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	89	None	replace
368	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
369	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
370	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
371	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
372	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
373	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
374	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);  offset  +=  DWORD;  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	3	None	replace
375	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
376	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
377	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
378	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
379	[BUG]  [BUGGY]  double  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
380	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	compilable	  [FE]  ZipException  	136	1	add
381	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	compilable	  [FE]  ZipException  	136	1	add
382	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	136	None	add
383	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  incompatible  types	136	None	add
384	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	136	None	add
385	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	136	None	add
386	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	136	None	add
387	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  incompatible  types	136	None	add
388	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	10	None	replace
389	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  HEADER_ID);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	10	None	replace
390	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	10	None	replace
391	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	10	None	replace
392	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
393	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
394	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
395	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  DWORD  +  1);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining  +  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
396	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
397	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  2);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
398	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	96	None	replace
399	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	non-compiled	[CE]  incompatible  types	133	None	replace
400	[BUG]  [BUGGY]  Remaining  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Remaining  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Remaining  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
401	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	compilable	  [FE]  ZipException  	133	1	replace
402	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	compilable	  [FE]  ZipException  	133	1	replace
403	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
404	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
405	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
406	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	59	1	add
407	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	59	1	add
408	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	59	None	add
409	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	59	None	add
410	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	59	None	add
411	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	59	None	add
412	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	59	None	add
413	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
414	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
415	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
416	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
417	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
418	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	79	None	replace
419	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
420	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
421	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
422	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
423	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
424	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
425	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
426	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
427	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
428	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
429	[BUG]  [BUGGY]  DoubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  DoubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DoubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DoubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  DoubleHeaderOffset	64	None	replace
430	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	64	None	replace
431	[BUG]  [BUGGY]  String  remaining  =  ZipLong.valueOf(remaining);  [CE]  variable  remaining  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  remaining  =  ZipLong.valueOf(remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  remaining  =  ZipLong.valueOf(remaining);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  variable  remaining  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	143	None	replace
432	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  1);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  1);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
433	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  length);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  length);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
434	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  length);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  length);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
435	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(length);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
436	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  2);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining  +  2);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
437	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	66	None	replace
438	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
439	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  throw  new  ZipException( "  [CE]  unclosed  string  literal  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  throw  new  ZipException( "  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  throw  new  ZipException( "	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  unclosed  string  literal	66	None	replace
440	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  System.err.println( "  [CE]  unclosed  string  literal  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  System.err.println( "  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  System.err.println( "	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  unclosed  string  literal	66	None	replace
441	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  '('  or  '['  expected	66	None	replace
442	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  return  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  return	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
443	[BUG]  [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
444	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
445	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
446	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
447	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	108	1	replace
448	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	108	1	replace
449	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
450	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
451	[BUG]  [BUGGY]  Remaining  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Remaining  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Remaining  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
452	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	145	None	replace
453	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	145	None	replace
454	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	145	None	replace
455	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	145	None	replace
456	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	145	None	replace
457	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	85	None	replace
458	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	85	None	replace
459	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	85	None	replace
460	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	85	None	replace
461	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
462	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	127	None	replace
463	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	127	None	replace
464	[BUG]  [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  not  a  statement  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  not  a  statement	127	None	replace
465	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	127	None	replace
466	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
467	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	127	None	replace
468	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	23	None	replace
469	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [CE]  cannot  find  symbol  rest  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  rest	23	None	replace
470	[BUG]  [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  remainder  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remainder  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	23	None	replace
471	[BUG]  [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  ReLATIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVEHeaderOffset	121	None	replace
472	[BUG]  [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  LIMITIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  LIMITIVEHeaderOffset	121	None	replace
473	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	compilable	  [FE]  ZipException  	15	1	add
474	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	compilable	  [FE]  ZipException  	15	1	add
475	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	15	None	add
476	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
477	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	compilable	  [FE]  ZipException  	15	1	add
478	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	compilable	  [FE]  ZipException  	15	1	add
479	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
480	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  diskStart  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
481	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
482	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
483	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
484	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
485	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
486	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
487	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
488	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
489	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  cannot  find  symbol  [FE]                                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
490	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
491	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
492	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  remaining  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
493	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
494	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
495	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[])  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(remaining,  buffer);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[])	71	None	replace
496	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(length,  buffer,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[],int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(length,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(length,  buffer,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,byte[],int)	71	None	replace
497	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	71	None	replace
498	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(data,  buffer,  remaining);  [CE]  cannot  find  symbol  data  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(data,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(data,  buffer,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  data	71	None	replace
499	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [CE]  cannot  find  symbol  computeSize  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  computeSize	71	None	replace
500	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  buffer);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
501	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
502	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
503	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	148	1	add
504	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	148	1	add
505	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  reportHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  cannot  find  symbol  reportHeaderOffset	148	None	add
506	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    If(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  ';'  expected	148	None	add
507	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  referHeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  cannot  find  symbol  referHeaderOffset	148	None	add
508	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	148	None	add
509	[BUG]  [BUGGY]  timeout  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	timeout	148	1	add
510	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  timeout  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	timeout	148	1	add
511	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
512	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
513	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	97	1	add
514	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	97	1	add
515	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  incompatible  types	97	None	add
516	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	97	None	add
517	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	97	None	add
518	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	97	None	add
519	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  incompatible  types	97	None	add
520	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVE_HEADEROffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RELATIVE_HEADEROffset  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVE_HEADEROffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    RELATIVE_HEADEROffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HEADEROffset	97	None	add
521	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
522	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
523	[BUG]  [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
524	[BUG]  [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
525	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
526	[BUG]  [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
527	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
528	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	53	None	replace
529	[BUG]  [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  ReLATIVE_HeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVE_HeaderOffset	53	None	replace
530	[BUG]  [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RESULT_HeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RESULT_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RESULT_HeaderOffset	53	None	replace
531	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	53	None	replace
532	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	140	1	add
533	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	140	1	add
534	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	140	1	add
535	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	140	1	add
536	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	140	None	add
537	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	140	None	add
538	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	140	None	add
539	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	131	1	replace
540	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	131	1	replace
541	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	131	1	replace
542	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	131	1	replace
543	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
544	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
545	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
546	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
547	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
548	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
549	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	47	None	replace
550	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	47	None	replace
551	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  length  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	int  diskStart  =  length  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
552	[BUG]  [BUGGY]  int  diskStart  =  length  -  2  *  DWORD;  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  length  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  length  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
553	[BUG]  [BUGGY]  int  diskStart  =  size  -  2  *  DWORD  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  size  -  2  *  DWORD  +  1;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  size  -  2  *  DWORD  +  1;	          int    diskStart    =    size    -    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	48	None	replace
554	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  buffer.length  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	int  diskStart  =  buffer.length  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
555	[BUG]  [BUGGY]  int  diskStart  =  buffer.length  -  2  *  DWORD;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  buffer.length  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  buffer.length  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
556	[BUG]  [BUGGY]  int  diskStart  =  size  -  2  *  DWORD,  compressedSize;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  size  -  2  *  DWORD,  compressedSize;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  size  -  2  *  DWORD,  compressedSize;	          int    diskStart    =    size    -    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	48	None	replace
557	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  offset  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	int  diskStart  =  offset  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
558	[BUG]  [BUGGY]  int  diskStart  =  offset  -  2  *  DWORD;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  offset  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  offset  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	compilable	  [FE]  ZipException  	48	1	replace
559	[BUG]  [BUGGY]  int  diskStart  =  data.length  -  2  *  DWORD;  [CE]  cannot  find  symbol  data  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  data.length  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  data.length  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	non-compiled	[CE]  cannot  find  symbol  data	48	None	replace
560	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
561	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
562	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
563	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
564	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
565	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
566	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
567	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
568	[BUG]  [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	125	None	replace
569	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
570	[BUG]  [BUGGY]  int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	125	None	replace
571	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	56	None	replace
572	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
573	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	56	None	replace
574	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException(LFH_MUST_HAVE  [CE]  ')'  expected  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException(LFH_MUST_HAVE  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException(LFH_MUST_HAVE	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	56	None	replace
575	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException( "  [CE]  unclosed  string  literal  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException( "  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  throw  new  ZipException( "	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  unclosed  string  literal	56	None	replace
576	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  System.arraycopy(buffer,  offset  [CE]  ')'  expected  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  System.arraycopy(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  System.arraycopy(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	56	None	replace
577	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	42	None	replace
578	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	42	None	replace
579	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	42	None	replace
580	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
581	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
582	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
583	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
584	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	60	None	replace
585	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	60	None	replace
586	[BUG]  [BUGGY]  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	104	None	replace
587	[BUG]  [BUGGY]  Size  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  Size  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Size  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Size  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  Size	104	None	replace
588	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	104	None	replace
589	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	compilable	  [FE]  ZipException  	95	1	add
590	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	compilable	  [FE]  ZipException  	95	1	add
591	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  incompatible  types	95	None	add
592	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	95	None	add
593	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	95	None	add
594	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	95	None	add
595	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	95	None	add
596	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	95	None	add
597	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	107	1	add
598	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	107	1	add
599	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	107	1	add
600	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	107	1	add
601	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	107	None	add
602	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	107	None	add
603	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	107	None	add
604	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
605	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
606	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  illegal  start  of  type  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
607	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
608	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  illegal  start  of  type  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
609	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
610	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
611	[BUG]  [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  ReLATIVE_HeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReLATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  ReLATIVE_HeaderOffset	63	None	replace
612	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	55	None	replace
613	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	55	None	replace
614	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	55	None	replace
615	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  incompatible  types	123	None	replace
616	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  incompatible  types	123	None	replace
617	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	123	None	replace
618	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  remaining);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
619	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  WORD);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
620	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  length);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  length);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
621	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  2);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
622	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  DWORD);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
623	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	94	None	replace
624	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
625	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
626	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
627	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(size,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(size,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(size,  buffer,  offset);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
628	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
629	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(length,  buffer,  offset);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
630	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
631	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
632	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
633	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
634	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [CE]  cannot  find  symbol  rest  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  rest	135	None	replace
635	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other);  [CE]  cannot  find  symbol  other  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  other	135	None	replace
636	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
637	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	109	None	replace
638	[BUG]  [BUGGY]  if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	109	None	replace
639	[BUG]  [BUGGY]  if(length  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteIn	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	109	None	replace
640	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining!=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining!=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightBy	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	109	None	replace
641	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	13	None	replace
642	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	13	None	replace
643	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	13	None	replace
644	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	13	None	replace
645	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [CE]  cannot  find  symbol  compressionSize  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  compressionSize	13	None	replace
646	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	13	None	replace
647	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  incompatible  types	105	None	replace
648	[BUG]  [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
649	[BUG]  [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  inconvertible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  inconvertible  types	105	None	replace
650	[BUG]  [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
651	[BUG]  [BUGGY]  ||  diskStart  ==  null)  {  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ||  diskStart  ==  null)  {  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	||  diskStart  ==  null)  {  offset  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
652	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	compilable	  [FE]  ZipException  	105	1	replace
653	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	compilable	  [FE]  ZipException  	105	1	replace
654	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	45	None	replace
655	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	45	None	replace
656	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	45	None	replace
657	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	45	None	replace
658	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
659	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(size,  offset  +  DWORD,  buffer);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(ZipEightByteInteger,int,byte[])  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(size,  offset  +  DWORD,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(size,  offset  +  DWORD,  buffer);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    size);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(ZipEightByteInteger,int,byte[])	156	None	replace
660	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    size);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	156	None	replace
661	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    size);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	156	None	replace
662	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	8	None	replace
663	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  8);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  8);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  8);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	8	None	replace
664	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	8	None	replace
665	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	111	1	replace
666	[BUG]  [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	111	1	replace
667	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
668	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
669	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
670	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
671	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  length);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
672	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  remaining);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
673	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  1);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
674	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  remaining);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
675	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  -  remaining);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
676	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  2);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
677	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  length);	  RelativeHeaderOffset    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
678	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(remaining,  buffer,  offset);	  RelativeHeaderOffset    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
679	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset,  size);	  RelativeHeaderOffset    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
680	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	130	1	replace
681	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	compilable	  [FE]  ZipException  	130	1	replace
682	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  '('  or  '['  expected	130	None	replace
683	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
684	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
685	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
686	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  *  DWORD);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
687	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
688	[BUG]  [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	103	None	replace
689	[BUG]  [BUGGY]  RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeFileHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeFileHeaderOffset	103	None	replace
690	[BUG]  [BUGGY]  int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	103	None	replace
691	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	compilable	  [FE]  ZipException  	119	1	replace
692	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	compilable	  [FE]  ZipException  	119	1	replace
693	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	87	None	replace
694	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	compilable	  [FE]  ZipException  	78	1	add
695	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	compilable	  [FE]  ZipException  	78	1	add
696	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	78	None	add
697	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	78	None	add
698	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	78	1	add
699	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	78	1	add
700	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskStart  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskStart  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  diskStart  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	78	None	add
701	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
702	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	38	None	replace
703	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
704	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
705	[BUG]  [BUGGY]  long  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
706	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
707	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  2,  remaining);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
708	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  remaining  +  1);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
709	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
710	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
711	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  0);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  0);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  0);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
712	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  length  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  length  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  length  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
713	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	54	None	replace
714	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	54	None	replace
715	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	54	None	replace
716	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
717	[BUG]  [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
718	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
719	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
720	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
721	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
722	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
723	[BUG]  [BUGGY]  short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	short  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	134	None	replace
724	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	134	None	replace
725	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
726	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
727	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
728	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
729	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
730	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
731	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	83	None	replace
732	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	83	None	replace
733	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	83	None	replace
734	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  offset  +  DWORD,  buffer);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,int,byte[])  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  offset  +  DWORD,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(remaining,  offset  +  DWORD,  buffer);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,int,byte[])	58	None	replace
735	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	58	None	replace
736	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  remaining);  [CE]  cannot  find  symbol  compressionSize  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    remaining);    	non-compiled	[CE]  cannot  find  symbol  compressionSize	58	None	replace
737	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  length);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
738	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  remaining);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
739	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset,  length);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
740	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset,  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset,  remaining);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
741	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  1);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
742	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  -  remaining);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
743	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	33	None	replace
744	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	33	None	replace
745	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	33	None	replace
746	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	33	None	replace
747	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
748	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
749	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
750	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  length);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
751	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
752	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  remaining);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset,  remaining);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
753	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset,  length);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset,  length);	  int    diskStart    =    ZipLong.parse(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
754	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  1);	  int    diskStart    =    ZipLong.parse(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
755	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  remaining);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	1	None	replace
756	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  length);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  length);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	1	None	replace
757	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
758	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  size);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  size);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,ZipEightByteInteger)	1	None	replace
759	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
760	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  rest);  [CE]  cannot  find  symbol  rest  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  rest);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  rest	1	None	replace
761	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  width);  [CE]  cannot  find  symbol  width  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset,  width);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset,  width);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	1	None	replace
762	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
763	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining  -  DWORD);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
764	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
765	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  size);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  size);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
766	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [CE]  ')'  expected  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	118	None	replace
767	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    	non-compiled	[CE]  ')'  expected	12	None	replace
768	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	148	None	add
769	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  rest  -=  DWORD;  }  [CE]  cannot  find  symbol  rest  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  rest  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  rest  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  rest	138	None	add
770	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  return  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	150	None	add
771	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
772	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
773	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
774	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
775	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	65	None	replace
776	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	65	None	replace
777	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
778	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
779	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	66	None	replace
780	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	66	None	replace
781	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
782	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
783	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	63	None	replace
784	[BUG]  [BUGGY]  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
785	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	120	None	replace
786	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	compilable	  [FE]  ZipException  	120	1	replace
787	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	compilable	  [FE]  ZipException  	120	1	replace
788	[BUG]  [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  repaint  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	repaint  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  repaint	99	None	replace
789	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  size  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	size  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	99	1	replace
790	[BUG]  [BUGGY]  size  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  size  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	size  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	99	1	replace
791	[BUG]  [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  repaint  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	repaint  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  repaint	99	None	replace
792	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	47	None	replace
793	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	47	None	replace
794	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	47	None	replace
795	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
796	[BUG]  [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	47	None	replace
797	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
798	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  buffer.length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  buffer.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  buffer.length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	157	None	replace
799	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(length,  offset  +  DWORD,  buffer);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,int,byte[])  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(length,  offset  +  DWORD,  buffer);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(length,  offset  +  DWORD,  buffer);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(int,int,byte[])	157	None	replace
800	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
801	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
802	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	136	None	add
803	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  privHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  privHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  privHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    privHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  privHeaderOffset	136	None	add
804	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	136	None	add
805	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	136	None	add
806	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	136	None	add
807	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
808	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
809	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	60	None	replace
810	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
811	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
812	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
813	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
814	[BUG]  [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	38	None	replace
815	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
816	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
817	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
818	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
819	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
820	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	56	None	replace
821	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	56	None	replace
822	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
823	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  -  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
824	[BUG]  [BUGGY]  rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  rackStart  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  cannot  find  symbol  rackStart	105	None	replace
825	[BUG]  [BUGGY]  readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  readER_ID  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  cannot  find  symbol  readER_ID	105	None	replace
826	[BUG]  [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	45	None	replace
827	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	87	None	replace
828	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	85	None	replace
829	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	85	None	replace
830	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
831	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	85	None	replace
832	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(size,  buffer,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(ZipEightByteInteger,byte[],int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(size,  buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(size,  buffer,  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(ZipEightByteInteger,byte[],int)	71	None	replace
833	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	86	None	replace
834	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	93	None	replace
835	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	93	None	replace
836	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	93	1	replace
837	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	93	1	replace
838	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  compressedSize  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  compressedSize  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	93	1	replace
839	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  compressedSize  =  new  ZipEightByteInteger(buffer,  remaining);  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  compressedSize  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  compressedSize  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	93	1	replace
840	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	95	None	add
841	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	95	None	add
842	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  incompatible  types	95	None	add
843	[BUG]  [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	109	None	replace
844	[BUG]  [BUGGY]  if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	109	None	replace
845	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	109	None	replace
846	[BUG]  [BUGGY]  if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	109	None	replace
847	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	109	None	replace
848	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	109	None	replace
849	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  size);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  size);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
850	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  rest);  [CE]  cannot  find  symbol  rest  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD,  rest);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  rest	7	None	replace
851	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	23	None	replace
852	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	23	None	replace
853	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	23	None	replace
854	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
855	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	59	None	add
856	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
857	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
858	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
859	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
860	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
861	[BUG]  [BUGGY]  int  diskStart  =  size  -  2  *  DWORD  +  compressedSize;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  size  -  2  *  DWORD  +  compressedSize;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  size  -  2  *  DWORD  +  compressedSize;	          int    diskStart    =    size    -    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	48	None	replace
862	[BUG]  [BUGGY]  int  diskStart  =  compressedSize  -  2  *  DWORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  compressedSize  -  2  *  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  compressedSize  -  2  *  DWORD;	          int    diskStart    =    size    -    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	48	None	replace
863	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
864	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
865	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
866	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
867	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Object  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	Object  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	89	1	replace
868	[BUG]  [BUGGY]  Object  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Object  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Object  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	89	1	replace
869	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	33	None	replace
870	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
871	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset  +  DWORD);	  int    diskStart    =    ZipLong.parseDouble(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
872	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  incompatible  types	42	None	replace
873	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	42	None	replace
874	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	11	None	add
875	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	11	None	add
876	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	11	1	add
877	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	11	1	add
878	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
879	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
880	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
881	[BUG]  [BUGGY]  while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
882	[BUG]  [BUGGY]  rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  cannot  find  symbol  rackSize  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  rackSize	139	None	replace
883	[BUG]  [BUGGY]  rayOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  cannot  find  symbol  rayOffset  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rayOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rayOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  rayOffset	139	None	replace
884	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
885	[BUG]  [BUGGY]  while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
886	[BUG]  [BUGGY]  readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
887	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
888	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
889	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
890	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
891	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
892	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
893	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	103	None	replace
894	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	103	None	replace
895	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
896	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1,  length);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
897	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD;	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	62	None	replace
898	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	98	1	replace
899	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	98	1	replace
900	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
901	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
902	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
903	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
904	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  restOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
905	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
906	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;  }  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	140	None	add
907	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	69	None	replace
908	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
909	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
910	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
911	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  DWORD);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	compilable	  [FE]  ZipException  	137	1	replace
912	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	13	None	replace
913	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
914	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	80	None	replace
915	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
916	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  compressionSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
917	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
918	[BUG]  [BUGGY]  RelativeHeaderOffset  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  restOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  restOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
919	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	78	None	add
920	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	78	None	add
921	[BUG]  [BUGGY]  float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	61	None	replace
922	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  2);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
923	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  +  DWORD);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
924	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  -  1);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset  -  1);	  int    diskStart    =    ZipLong.parseFromLocalFileData(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
925	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
926	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	15	None	add
927	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
928	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
929	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
930	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  -  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  -  1);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
931	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
932	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
933	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
934	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  remainder  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	84	None	replace
935	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
936	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remaining  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
937	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
938	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
939	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
940	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  +  1);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ZipException  	96	1	replace
941	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
942	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
943	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
944	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	39	None	replace
945	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
946	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  long);  [CE]  '.class'  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  long);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  long);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressionSize);    	non-compiled	[CE]  '.class'  expected	155	None	replace
947	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	10	None	replace
948	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	54	None	replace
949	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	compilable	  [FE]  ZipException  	102	1	replace
950	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	compilable	  [FE]  ZipException  	102	1	replace
951	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	55	None	replace
952	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	55	None	replace
953	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
954	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
955	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
956	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
957	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	35	None	replace
958	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
959	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressSize);  [CE]  cannot  find  symbol  compressSize  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    remaining);    	non-compiled	[CE]  cannot  find  symbol  compressSize	58	None	replace
960	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
961	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
962	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
963	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1  -  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
964	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
965	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
966	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
967	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
968	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  ')'  expected	159	None	replace
969	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD  +  2);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
970	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
971	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
972	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
973	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
974	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
975	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
976	[BUG]  [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	126	None	replace
977	[BUG]  [BUGGY]  if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	126	None	replace
978	[BUG]  [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
979	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
980	[BUG]  [BUGGY]  if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteIn	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
981	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
982	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightBy	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
983	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
984	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	115	None	replace
985	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
986	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
987	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
988	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,ZipEightByteInteger)  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger,ZipEightByteInteger)	154	None	replace
989	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3  *  remaining);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
990	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  5);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  5);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  5);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
991	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [CE]  cannot  find  symbol  remainder  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	162	None	replace
992	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
993	[BUG]  [BUGGY]  float  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  float  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	float  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
994	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressionSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressionSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
995	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  incompatible  types	146	None	replace
996	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
997	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
998	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
999	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
1000	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	79	None	replace
1001	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1002	[BUG]  [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1003	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  inconvertible  types	112	None	replace
1004	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1005	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1006	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  2);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1007	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  DWORD);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1008	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset  +  remaining);	  int    diskStart    =    ZipLong.parseInt(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1009	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
1010	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
1011	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
1012	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1013	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1014	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1015	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1016	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	145	None	replace
1017	[BUG]  [BUGGY]  double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  unexpected  type  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  unexpected  type	145	None	replace
1018	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	145	None	replace
1019	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	145	None	replace
1020	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	124	None	replace
1021	[BUG]  [BUGGY]  rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  rackSize  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rackSize  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  rackSize	111	None	replace
1022	[BUG]  [BUGGY]  rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  rackStart  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rackStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  rackStart	111	None	replace
1023	[BUG]  [BUGGY]  ray  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  ray  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ray  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ray  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  ray	111	None	replace
1024	[BUG]  [BUGGY]  readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  readER_ID  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readER_ID  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  readER_ID	111	None	replace
1025	[BUG]  [BUGGY]  readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readEROffset(diskStart,  buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1026	[BUG]  [BUGGY]  readEROffset(diskStart);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readEROffset(diskStart);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readEROffset(diskStart);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1027	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1028	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1029	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1030	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1031	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(remaining  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1032	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1033	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1034	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1035	[BUG]  [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1036	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1037	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1038	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1039	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1040	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	offset  =  new  ZipEightByteInteger(buffer,  remaining);  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	164	None	replace
1041	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1042	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  2);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1043	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	135	None	replace
1044	[BUG]  [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
1045	[BUG]  [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
1046	[BUG]  [BUGGY]  float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	float  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
1047	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  buffer  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1048	[BUG]  [BUGGY]  RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RELATIVE_WORD  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_WORD  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_WORD	151	None	replace
1049	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1050	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1051	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1052	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1053	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1054	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1055	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1056	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  size);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG,  size);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1057	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	97	None	add
1058	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	97	1	add
1059	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	97	1	add
1060	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	97	None	add
1061	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  incompatible  types	97	None	add
1062	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  size);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining,  size);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1063	[BUG]  [BUGGY]  readEROffset(diskStart,  0,  length);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readEROffset(diskStart,  0,  length);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readEROffset(diskStart,  0,  length);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
1064	[BUG]  [BUGGY]  readFully(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  readFully(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	readFully(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
1065	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remainder);  [CE]  cannot  find  symbol  remainder  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remainder);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remainder);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  remainder	61	None	replace
1066	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);  [CE]  cannot  find  symbol  rest  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  rest	61	None	replace
1067	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);  [CE]  cannot  find  symbol  resting  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  resting	18	None	replace
1068	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1069	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1070	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1071	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  size);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  size);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1072	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionSize);  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  compressionSize);	  RelativeHeaderOffset    <    T>    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1073	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1074	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1075	[BUG]  [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeRelativeHeaderOffset	63	None	replace
1076	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
1077	[BUG]  [BUGGY]  long  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  long  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	long  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  int    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  incompatible  types	3	None	replace
1078	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  DWORD,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  DWORD,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  DWORD,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    size);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)	156	None	replace
1079	[BUG]  [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    size);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	156	None	replace
1080	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
1081	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	16	1	replace
1082	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1083	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1084	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1085	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);  [CE]  cannot  find  symbol  resting  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  resting	81	None	replace
1086	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	81	None	replace
1087	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	109	None	replace
1088	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	109	None	replace
1089	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionHeaderOffset);  [CE]  cannot  find  symbol  compressionHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionHeaderOffset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset,  compressionHeaderOffset);	  remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  compressionHeaderOffset	69	None	replace
1090	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	1	replace
1091	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  DWORD  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  *  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	1	replace
1092	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining  +  1);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	96	None	replace
1093	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_BOTH_SIZES_MSG);  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_BOTH_SIZES_MSG);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_BOTH_SIZES_MSG);	  int    diskStart    =    ZipLong.parse(buffer,    offset    +    LFH_MUST_HAVE_BOTH_SIZES_MSG);    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	106	None	replace
1094	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  buffer.length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	58	None	replace
1095	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  READER_ID  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	20	None	replace
1096	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
1097	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
1098	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
1099	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	50	1	replace
1100	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1101	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  '('  or  '['  expected	35	None	replace
1102	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  '('  or  '['  expected	35	None	replace
1103	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	compilable	  [FE]  ZipException  	133	1	replace
1104	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    }    	compilable	  [FE]  ZipException  	133	1	replace
1105	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
1106	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
1107	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressionSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD,  compressionSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	128	None	replace
1108	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol	138	None	add
1109	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1110	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	158	None	replace
1111	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1112	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    <    =    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	129	None	replace
1113	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	102	None	replace
1114	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	replace
1115	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2,  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	87	None	replace
1116	[BUG]  [BUGGY]  float  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],float)  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  float  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	float  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],float)	146	None	replace
1117	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	146	None	replace
1118	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
1119	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
1120	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
1121	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	139	1	replace
1122	[BUG]  [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1123	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionHeaderOffset);  [CE]  cannot  find  symbol  compressionHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionHeaderOffset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionHeaderOffset);	  remaining    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  compressionHeaderOffset	13	None	replace
1124	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	78	None	add
1125	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	78	None	add
1126	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  illegal  start  of  type	78	None	add
1127	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	78	None	add
1128	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  READER_ID  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	82	None	replace
1129	[BUG]  [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeRelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeRelativeHeaderOffset	82	None	replace
1130	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1).toString();  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1).toString();  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1).toString();	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  incompatible  types	33	None	replace
1131	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1132	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  otherHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  otherHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  otherHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1133	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
1134	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
1135	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
1136	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	79	1	replace
1137	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
1138	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	41	1	replace
1139	[BUG]  [BUGGY]  double  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  diskStart  =  new  ZipLong(buffer,  offset);	  int    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  incompatible  types	1	None	replace
1140	[BUG]  [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  not  a  statement  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  not  a  statement	145	None	replace
1141	[BUG]  [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  not  a  statement  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  not  a  statement	145	None	replace
1142	[BUG]  [BUGGY]  double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  unexpected  type  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	double  -=  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  unexpected  type	145	None	replace
1143	[BUG]  [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	145	None	replace
1144	[BUG]  [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  not  a  statement  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  (new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	(new  ZipEightByteInteger(buffer,  offset  +  DWORD));  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  not  a  statement	145	None	replace
1145	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	46	None	replace
1146	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
1147	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	141	1	replace
1148	[BUG]  [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	141	None	replace
1149	[BUG]  [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1150	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	add
1151	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        DWORD);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	59	None	add
1152	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  remaining  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol	140	None	add
1153	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	22	None	replace
1154	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  cannot  find  symbol  extendedHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  extendedHeaderOffset	22	None	replace
1155	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
1156	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(left  +  1);  [CE]  cannot  find  symbol  left  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(left  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(left  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  left	39	None	replace
1157	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(data.length  +  1);  [CE]  cannot  find  symbol  data  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(data.length  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(data.length  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  data	39	None	replace
1158	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(long  +  1);  [CE]  '.class'  expected  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(long  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(long  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    1);    	non-compiled	[CE]  '.class'  expected	39	None	replace
1159	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    Z>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1160	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining);  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining);	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  ')'  expected	4	None	replace
1161	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining));  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining));  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(computeHeaderOffset(buffer,  remaining));	  int    diskStart    =    ZipLong.parse(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1162	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	54	None	replace
1163	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1164	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	54	None	replace
1165	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  extendedHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  extendedHeaderOffset	54	None	replace
1166	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
1167	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
1168	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
1169	[BUG]  [BUGGY]  if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  inconvertible  types	126	None	replace
1170	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    else    {    size    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	126	None	replace
1171	[BUG]  [BUGGY]  byte  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  byte  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	byte  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	92	None	replace
1172	[BUG]  [BUGGY]  RectangleEdge  buffer  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RectangleEdge  buffer  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RectangleEdge  buffer  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1173	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  '('  or  '['  expected	66	None	replace
1174	[BUG]  [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  READER_ID  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	READER_ID  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  READER_ID	101	None	replace
1175	[BUG]  [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  LIMITIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  LIMITIVEHeaderOffset	101	None	replace
1176	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	56	None	replace
1177	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  buffer  =  new  ZipLong(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	56	None	replace
1178	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	23	None	replace
1179	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	23	None	replace
1180	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  buffer  =  new  Zip  [CE]  '('  or  '['  expected  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  buffer  =  new  Zip  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  else  {  buffer  =  new  Zip	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
1181	[BUG]  [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  ReclativeHeaderOffset  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  ReclativeHeaderOffset	80	None	replace
1182	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1183	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1184	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  new  ZipEightByteInteger(buffer,  remaining);  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  ';'  expected	67	None	replace
1185	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1186	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1187	[BUG]  [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  <  =  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1188	[BUG]  [BUGGY]  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	replace
1189	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
1190	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	108	1	replace
1191	[BUG]  [BUGGY]  cearcăDiskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  cearc  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  cearcăDiskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	cearcăDiskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  cearc	108	None	replace
1192	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
1193	[BUG]  [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  3);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  ((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	((  ZipEightByteInteger)relativeHeaderOffset).set(length  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1194	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
1195	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3  [CE]  ')'  expected  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(offset    +    3);    	non-compiled	[CE]  ')'  expected	57	None	replace
1196	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	compilable	  [FE]  ZipException  	112	1	replace
1197	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	compilable	  [FE]  ZipException  	112	1	replace
1198	[BUG]  [BUGGY]  if(discardStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(discardStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(discardStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
1199	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);  [CE]  cannot  find  symbol  resting  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  resting);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  resting	163	None	replace
1200	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  0);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	163	None	replace
1201	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressedSize);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1202	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  compressionHeaderOffset);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1203	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  size);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  size);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1204	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  buffer.length);	  RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1205	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  incompatible  types	51	None	replace
1206	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	117	None	replace
1207	[BUG]  [BUGGY]  RelativeHeaderOffset  remainder  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remainder  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remainder  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1208	[BUG]  [BUGGY]  RelativeHeaderOffset  woffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  woffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  woffset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1209	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    DWORD    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1210	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  find  symbol  repaintOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  repaintOffset	150	None	add
1211	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  }  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
1212	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  offset);  }	  	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	150	None	add
1213	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  size);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  size);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
1214	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  diskStart);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  diskStart);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  diskStart);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    -    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	113	None	replace
1215	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  repaintOffset  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  repaintOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  cannot  find  symbol  repaintOffset	148	None	add
1216	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    if(remaining  >  DWORD)  {  return  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	148	None	add
1217	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	62	None	replace
1218	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	62	None	replace
1219	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	62	None	replace
1220	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	62	None	replace
1221	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1222	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1223	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  '('  or  '['  expected	130	None	replace
1224	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  '('  or  '['  expected	130	None	replace
1225	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  '('  or  '['  expected	130	None	replace
1226	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  ')'  expected	38	None	replace
1227	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  buffer  =  new  ZipLong(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  ')'  expected	38	None	replace
1228	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	45	None	replace
1229	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1230	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	45	None	replace
1231	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  extendedHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  extendedHeaderOffset	45	None	replace
1232	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	137	None	replace
1233	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	137	None	replace
1234	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	104	None	replace
1235	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	104	None	replace
1236	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1237	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1238	[BUG]  [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeRelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeRelativeHeaderOffset	53	None	replace
1239	[BUG]  [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeFactory  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeFactory	53	None	replace
1240	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  inconvertible  types  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  inconvertible  types	105	None	replace
1241	[BUG]  [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	105	None	replace
1242	[BUG]  [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(diskStart  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1243	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
1244	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	84	None	replace
1245	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1246	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	164	1	replace
1247	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    else    {    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	164	None	replace
1248	[BUG]  [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	Integer  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    long    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	134	None	replace
1249	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  	non-compiled	[CE]  '('  or  '['  expected	122	None	add
1250	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  	non-compiled	[CE]  '('  or  '['  expected	122	None	add
1251	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByt	  	non-compiled	[CE]  '('  or  '['  expected	122	None	add
1252	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +	  	non-compiled	[CE]  ')'  expected	122	None	add
1253	[BUG]  [BUGGY]  String  LFH_MUST_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  String  LFH_MUST_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);	  String    LFH_MUST_HAVE_BOTH_SIZES_MSG    =    ZipLong.valueOf(remaining);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1254	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	123	1	replace
1255	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	123	1	replace
1256	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	123	1	replace
1257	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	compilable	  [FE]  ZipException  	123	1	replace
1258	[BUG]  [BUGGY]  wORD  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  wORD  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  wORD  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	wORD  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  wORD	99	None	replace
1259	[BUG]  [BUGGY]  rehash  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  rehash  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  rehash  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	rehash  =  new  ZipEightByteInteger(buffer,  offset);	  repaint    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  rehash	99	None	replace
1260	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1261	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  RelativeHeaderOffset    w    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1262	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  restingOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
1263	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
1264	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  N>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  remainderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    N>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
1265	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  incompatible  types	95	None	add
1266	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD  +  1);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD    +    1);    ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  DWORD  +  1);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
1267	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
1268	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1269	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1270	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1271	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInt	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
1272	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  ')'  expected	159	None	replace
1273	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteIn	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    }    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
1274	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1275	[BUG]  [BUGGY]  remaining  -=  new  ZipEightByteInteger(buffer,  offset);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  -=  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  -=  new  ZipEightByteInteger(buffer,  offset);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	71	None	replace
1276	[BUG]  [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  remainder  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remainder  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remainder  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	71	None	replace
1277	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);	  remaining    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	71	None	replace
1278	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	add
1279	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	add
1280	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
1281	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        2);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	40	None	add
1282	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1283	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1284	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    <    T>    remaining    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1285	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
1286	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
1287	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	120	None	replace
1288	[BUG]  [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	120	None	replace
1289	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1290	[BUG]  [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	120	None	replace
1291	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	12	1	replace
1292	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	12	1	replace
1293	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  length  -  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
1294	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
1295	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    WORD);    int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  	non-compiled	[CE]  incompatible  types	11	None	add
1296	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
1297	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1298	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1299	[BUG]  [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  rest);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    offset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	19	None	replace
1300	[BUG]  [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  LIMITIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LIMITIVEHeaderOffset	114	None	replace
1301	[BUG]  [BUGGY]  LIMITED_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  LIMITED_WORD  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LIMITED_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LIMITED_WORD  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  LIMITED_WORD	114	None	replace
1302	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	34	None	replace
1303	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1304	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);	  RelativeHeaderOffset    <    ZipEight>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1305	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	111	1	replace
1306	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	111	1	replace
1307	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
1308	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  offset  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1309	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  while(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	while(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  if(remaining    >    DWORD)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
1310	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	86	None	replace
1311	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
1312	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	94	None	replace
1313	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	15	None	add
1314	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	15	None	add
1315	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        remaining);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	15	None	add
1316	[BUG]  [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);  [CE]  '.class'  expected  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    LiquidRelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  '.class'  expected	90	None	replace
1317	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	119	None	replace
1318	[BUG]  [BUGGY]  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    }    	non-compiled	[CE]  incompatible  types	119	None	replace
1319	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    compressedSize);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int,ZipEightByteInteger)	154	None	replace
1320	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	64	None	replace
1321	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	64	None	replace
1322	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	64	None	replace
1323	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
1324	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  cannot  find  symbol  extendedHeaderOffset  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  extendedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  extendedHeaderOffset	64	None	replace
1325	[BUG]  [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  LIMITIVEHeaderOffset  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	LIMITIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVEHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  LIMITIVEHeaderOffset	118	None	replace
1326	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
1327	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
1328	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
1329	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	60	1	replace
1330	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  ')'  expected	60	None	replace
1331	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
1332	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  size  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  int  size  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    int  size  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  incompatible  types	97	None	add
1333	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    length);    DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	97	None	add
1334	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	116	None	replace
1335	[BUG]  [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	116	None	replace
1336	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	49	None	add
1337	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
1338	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  diskStart  =  new  ZipLong(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  diskStart  =  new  ZipLong(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        3);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  diskStart  =  new  ZipLong(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	49	None	add
1339	[BUG]  [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RelativeFactory  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeFactory	36	None	replace
1340	[BUG]  [BUGGY]  RectangleEdge  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RectangleEdge  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RectangleEdge  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1341	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  size);	  RelativeHeaderOffset    <    T>    remainingHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1342	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD,    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	157	None	replace
1343	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    ZipEightByteInteger>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1344	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1345	[BUG]  [BUGGY]  RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RelativeFileHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeFileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RelativeFileHeaderOffset	125	None	replace
1346	[BUG]  [BUGGY]  RELATIVE_SIZE  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RELATIVE_SIZE  [FE]                  ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RELATIVE_SIZE  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RELATIVE_SIZE  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_SIZE	125	None	replace
1347	[BUG]  [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RelativeFactory  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeFactory.RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RelativeFactory	44	None	replace
1348	[BUG]  [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RelativeRelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVE_HeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RelativeRelativeHeaderOffset	44	None	replace
1349	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	127	None	replace
1350	[BUG]  [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	127	None	replace
1351	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((    ZipEightByteInteger)relativeHeaderOffset).set(buffer,    offset    +    3);    	non-compiled	[CE]  ')'  expected	127	None	replace
1352	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other.length);  [CE]  cannot  find  symbol  other  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other.length);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  other.length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  other	135	None	replace
1353	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);  [CE]  cannot  find  symbol  resting  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  resting);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  resting	135	None	replace
1354	[BUG]  [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);  [CE]  '.class'  expected  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  long);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int    diskHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  '.class'  expected	135	None	replace
1355	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1356	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                      ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	85	None	replace
1357	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  cannot  find  symbol  remainder  [FE]                        ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remainder);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	85	None	replace
1358	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	85	None	replace
1359	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	31	None	add
1360	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int  dummyHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
1361	[BUG]  [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset        =        new        ZipEightByteInteger(buffer,        offset        +        1);        relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
1362	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	136	None	add
1363	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD	  	non-compiled	[CE]  ')'  expected	136	None	add
1364	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	136	None	add
1365	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2    *    DWORD);    DWORD  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
1366	[BUG]  [BUGGY]  RelativeHeaderOffset  -=  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  -=  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  -=  new  ZipEightByteInteger(buffer,  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
1367	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  compressedSize);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	70	None	replace
1368	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1369	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1370	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	43	None	replace
1371	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
1372	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
1373	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
1374	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
1375	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]      offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	32	1	replace
