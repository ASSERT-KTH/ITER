bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset);	      	non-compiled	[CE]  incompatible  types	10	None	replace
2	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
3	[BUG]  [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	      	non-compiled	[CE]  incompatible  types	10	None	replace
4	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  remaining);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parseDouble(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseDouble(buffer,  offset);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parseInt(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseInt(buffer,  offset);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
7	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  DWORD);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	17	None	replace
9	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	17	None	replace
10	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	8	None	replace
11	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
12	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
13	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  incompatible  types	8	None	replace
14	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	8	None	replace
15	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
16	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
17	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	7	None	add
18	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
19	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	7	None	add
20	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	7	None	add
21	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	7	None	add
22	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	7	None	add
23	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
24	[BUG]  [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  Z>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
26	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
27	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
30	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  offset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
31	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	3	1	add
32	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	3	1	add
33	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	3	None	add
34	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	3	None	add
35	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	3	None	add
36	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	3	None	add
37	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	3	None	add
38	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	3	None	add
39	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
40	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	11	1	add
41	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	11	1	add
42	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	11	None	add
43	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	11	None	add
44	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	11	None	add
45	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	11	None	add
46	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	11	None	add
47	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	11	None	add
48	[BUG]  [BUGGY]      int  diskStart  =  size  -  2  *  DWORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]      int  diskStart  =  size  -  2  *  DWORD;  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	        int  diskStart  =  size  -  2  *  DWORD;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	9	None	add
49	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	16	1	add
50	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	16	1	add
51	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	16	None	add
52	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	16	None	add
53	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	16	None	add
54	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	16	None	add
55	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	16	None	add
56	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	16	None	add
57	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((  ZipEightByteInteger)relativeHeaderOffset).set(offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
58	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	14	None	replace
59	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	13	1	add
60	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	compilable	  [FE]  ZipException  	13	1	add
61	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	13	None	add
62	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	13	None	add
63	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	13	None	add
64	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	13	None	add
65	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	13	None	add
66	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    offset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	13	None	add
67	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
69	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	6	None	replace
70	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	6	None	replace
71	[BUG]  [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  remaining  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	remaining  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  incompatible  types	6	None	replace
72	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
73	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
74	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
75	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
76	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
77	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]                      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
78	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	compilable	  [FE]  ZipException  	5	1	add
79	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	compilable	  [FE]  ZipException  	5	1	add
80	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	5	None	add
81	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	5	None	add
82	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVE_HeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	5	None	add
83	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	5	None	add
84	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  offset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	5	None	add
85	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  doubleHeaderOffset  [FE]                ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    doubleHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  doubleHeaderOffset	5	None	add
86	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	2	None	replace
87	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	2	None	replace
88	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
89	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    String  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
90	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	7	None	add
91	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remainingHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
92	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	5	None	add
93	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	5	None	add
94	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  offset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    offset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	5	None	add
95	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	14	1	replace
96	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	compilable	  [FE]  ZipException  	14	1	replace
97	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
98	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
99	[BUG]  [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  repaint  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  repaint  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	repaint  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  repaint	6	None	replace
100	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	16	None	add
102	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	16	None	add
103	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	16	None	add
104	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  RelatedHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    RelatedHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  RelatedHeaderOffset	16	None	add
105	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  inconvertible  types  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	      	non-compiled	[CE]  inconvertible  types	10	None	replace
106	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parse(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
107	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
108	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
109	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
111	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
112	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  inconvertible  types  [FE]              ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  }	      	non-compiled	[CE]  inconvertible  types	10	None	replace
113	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  remaining);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	2	None	replace
114	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	11	None	add
115	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	11	None	add
116	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	11	None	add
117	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [CE]  cannot  find  symbol  LiquidRelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    LiquidRelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  LiquidRelativeHeaderOffset	11	None	add
118	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	13	None	add
119	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	13	None	add
120	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	13	None	add
121	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	3	None	add
122	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	3	1	add
123	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	3	1	add
124	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	3	None	add
125	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    fileHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	3	None	add
126	[BUG]  [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  else  {  size  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
127	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    ((  ZipEightByteInteger)relativeHeaderOffset).set(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
128	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  DWORD);	  RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	2	None	replace
129	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
130	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	11	None	add
131	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
132	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  T>  remaining  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    <    T>    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
133	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	7	None	add
134	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    long  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
135	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    remaining);    int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
136	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	12	1	replace
137	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	12	1	replace
138	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
139	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
140	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
141	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	10	1	replace
142	[BUG]  [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	int  diskStart  =  ZipLong.parseFromLocalFileData(buffer,  offset);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
143	[BUG]  [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	String  LFH_MUST_HAVE_BOTH_SIZES_MSG  =  ZipLong.valueOf(remaining);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
144	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  3);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    3);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
145	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  assign  a  value  to  final  variable  DWORD  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  DWORD	13	None	add
146	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    int  DWORD  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  	non-compiled	[CE]  incompatible  types	13	None	add
147	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
148	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	6	1	replace
149	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	6	1	replace
150	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	6	1	replace
151	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	if(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	compilable	  [FE]  ZipException  	6	1	replace
152	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEightByteInteger>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
153	[BUG]  [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  <  ZipEight>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
154	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressedSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	14	None	replace
155	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [CE]  cannot  find  symbol  compressionSize  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  compressionSize);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  cannot  find  symbol  compressionSize	14	None	replace
156	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  size);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,ZipEightByteInteger)	14	None	replace
157	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)  [FE]          ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD,  length);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipEightByteInteger(byte[],int,int)	14	None	replace
158	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
159	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	3	None	add
160	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    if(relativeHeaderOffset  <  =  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
161	[BUG]  [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  w  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
162	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]    ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	5	None	add
163	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    int  diskHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	5	None	add
164	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]        ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    remaining);    if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  remaining);  }  else  {  offset  +=  DWORD;  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	5	None	add
165	[BUG]  [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    }  if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {    [BUGGY]  RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	RelativeHeaderOffset  DWORD  =  new  ZipEightByteInteger(buffer,  offset);	  RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
